[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Mastering Shiny, by Hadley Wickham\nEngineering Production-Grade Shiny Apps, by Colin Fay, Sébastien Rochette, Vincent Guyader & Cervan Girard\nBuilding Web Apps with R, by Lisa DeBruine – a short course (paired with an online book with instructions, resources, etc.)\n\n\n\n\n\nBuilding Shiny apps - an interactive tutorial, by Dean Attali\nSpeeding Up R Shiny, by Jakub Sobolewski in R bloggers – details methods on improving app performance\nThe Basics of Building Shiny Apps in R, by Allison Horst\n\n\n\n\n\n{shinytest2}: Unit testing for Shiny applications, rstudio::conf(2022) talk by Barret Schloerke\n{shinytest2} Testing Shiny with {testthat}, 2022 Appsilon Shiny Conference talk by Barret Schloerke (GitHub repo)\nShiny testing overview, by Winston Chang – this article discussed the shinytest2 predecessor, shinytest (which is now entering maintenance mode), but provides some helpful context and is worth a read\nA Robust Framework for Automated Shiny App Testing, an rstudio::conf(2022) talk by Sydaeka Watson – a really cool case study / overview of a (slightly more complex) framework for automated Shiny app testing\nIntroduction to Snapshot Testing in R, by Indrajeet Patil – a broader presentation on what is snapshot testing, why it’s necessary, and its implementation in R in {testthat} package and extensions\n\n\n\n\n\nModularizing Shiny App Code & associated materials, by Garrett Grolemund & Joe Cheng at the 2016 Shiny Developer’s Conference – NOTE: This 2016 talk is an excellent introduction to modules and is definitely worth a watch, especially because we just explored the exact example demoed by G. Grolemund. Please note, however, that Shiny modules were overhauled in 2020 with the introduction of moduleServer(). Content covered in our modules slides has been updated to reflect those changes and therefore differs slightly from what’s taught in this video.\nMastering Shiny, Ch. 19 - Shiny Modules, by Hadley Wickham\nModularizing Shiny app code, by Winston Chang\nEffective use of Shiny modules in application development, studio::conf(2019) talk by Eric Nantz\nA beginners guide to Shiny modules, by Emily Riederer\n\n\n\n\n\nR Shiny & FontAwesome Icons – How to Use Them in Your Dashboards, by Dario Radečić in R Bloggers – instructions for setting up your fontawesome kit\nShiny UI Editor and Nick Strayer’s rstudio::conf(2022) talk introducing it – a visual tool for building the UI portion of a Shiny application that generates clean and human-readable code\nThe {golem} package provides an opinionated framework for building production-grade shiny applications and is a part of a growing ecosystem of packages called the {golemverse}. There are lots of accompanying learning materials, including the book, Engineering Production Grade Shiny Apps, by Colin Fay, Sébastien Rochette, Vincent Guyader & Cervan Girard."
  },
  {
    "objectID": "resources.html#general-shiny-resources",
    "href": "resources.html#general-shiny-resources",
    "title": "Resources",
    "section": "",
    "text": "Mastering Shiny, by Hadley Wickham\nEngineering Production-Grade Shiny Apps, by Colin Fay, Sébastien Rochette, Vincent Guyader & Cervan Girard\nBuilding Web Apps with R, by Lisa DeBruine – a short course (paired with an online book with instructions, resources, etc.)\n\n\n\n\n\nBuilding Shiny apps - an interactive tutorial, by Dean Attali\nSpeeding Up R Shiny, by Jakub Sobolewski in R bloggers – details methods on improving app performance\nThe Basics of Building Shiny Apps in R, by Allison Horst\n\n\n\n\n\n{shinytest2}: Unit testing for Shiny applications, rstudio::conf(2022) talk by Barret Schloerke\n{shinytest2} Testing Shiny with {testthat}, 2022 Appsilon Shiny Conference talk by Barret Schloerke (GitHub repo)\nShiny testing overview, by Winston Chang – this article discussed the shinytest2 predecessor, shinytest (which is now entering maintenance mode), but provides some helpful context and is worth a read\nA Robust Framework for Automated Shiny App Testing, an rstudio::conf(2022) talk by Sydaeka Watson – a really cool case study / overview of a (slightly more complex) framework for automated Shiny app testing\nIntroduction to Snapshot Testing in R, by Indrajeet Patil – a broader presentation on what is snapshot testing, why it’s necessary, and its implementation in R in {testthat} package and extensions\n\n\n\n\n\nModularizing Shiny App Code & associated materials, by Garrett Grolemund & Joe Cheng at the 2016 Shiny Developer’s Conference – NOTE: This 2016 talk is an excellent introduction to modules and is definitely worth a watch, especially because we just explored the exact example demoed by G. Grolemund. Please note, however, that Shiny modules were overhauled in 2020 with the introduction of moduleServer(). Content covered in our modules slides has been updated to reflect those changes and therefore differs slightly from what’s taught in this video.\nMastering Shiny, Ch. 19 - Shiny Modules, by Hadley Wickham\nModularizing Shiny app code, by Winston Chang\nEffective use of Shiny modules in application development, studio::conf(2019) talk by Eric Nantz\nA beginners guide to Shiny modules, by Emily Riederer\n\n\n\n\n\nR Shiny & FontAwesome Icons – How to Use Them in Your Dashboards, by Dario Radečić in R Bloggers – instructions for setting up your fontawesome kit\nShiny UI Editor and Nick Strayer’s rstudio::conf(2022) talk introducing it – a visual tool for building the UI portion of a Shiny application that generates clean and human-readable code\nThe {golem} package provides an opinionated framework for building production-grade shiny applications and is a part of a growing ecosystem of packages called the {golemverse}. There are lots of accompanying learning materials, including the book, Engineering Production Grade Shiny Apps, by Colin Fay, Sébastien Rochette, Vincent Guyader & Cervan Girard."
  },
  {
    "objectID": "resources.html#ux-ui",
    "href": "resources.html#ux-ui",
    "title": "Resources",
    "section": "UX / UI",
    "text": "UX / UI\n\nOutstanding User Interfaces with Shiny, by David Granjon\nShiny Developer Series, Episode 20: Outstanding User Interfaces with David Granjon\n15 User Experience Principles and Theories, by Pathum Goonawardene"
  },
  {
    "objectID": "resources.html#accessibility",
    "href": "resources.html#accessibility",
    "title": "Resources",
    "section": "Accessibility",
    "text": "Accessibility\n\nColors\n\nPalette Generator, by Learn UI Design – supply a starting color(s) and this tool will generate a palette, single hue, or divergent color scheme\nViz Palette, by Elijah Meeks and Susie Lu – a tool that shows you how well your chosen colors work for tiny lines and big areas, warns if you have colors sharing the same name (which can make it more challenging to talk about your designs, say, in a presentation), and can simulate color vision deficiencies\nShade Generator – a tool for generating shade scales\nColorblind Safe Color Schemes, by the NCEAS Science Communication Resource Center – tips and examples of colorblind-friendly color palettes\nColor review, by Anton Robsarve – for understanding foreground and background contrasts\nYour Friendly Guide to Colors in Data Visualization, by Lisa Charlotte Muth – a blog post on useful tools for deciding data viz color palettes\nWhat to consider when choosing colors for data visualization, by Lisa Charlotte Muth – a blog post with explanations and examples\nSubtleties of Color, by Robert Simmon – a 6 part blog post series from NASA Earth Observatory about the use of color to map Earth observation data\n\n\n\nAlternative (alt) text\n\nHow to write good alternative descriptions for your data visualization, by Amy Cesal – great instructions (and examples) on how to construct informative alt text for data visualizations\nWriting Alt Text for Data Visualization, also by Amy Cesal – more great example of alt text for data viz!\n#TidyTuesday alt text instructions – a simple formula for writing alt text for data visualizations, as recommended for #TidyTuesday participants"
  },
  {
    "objectID": "resources.html#data-visualization",
    "href": "resources.html#data-visualization",
    "title": "Resources",
    "section": "Data Visualization",
    "text": "Data Visualization\nThere are so many incredible data viz resources. Check out the resources page on the EDS 240: Data Visualization & Communication course website for many of my favorites."
  },
  {
    "objectID": "course-materials/part8-wrap-up.html#required-packages",
    "href": "course-materials/part8-wrap-up.html#required-packages",
    "title": "Wrap up",
    "section": "Required Packages",
    "text": "Required Packages\nNo coding required in this section!"
  },
  {
    "objectID": "course-materials/part8-wrap-up.html#required-data",
    "href": "course-materials/part8-wrap-up.html#required-data",
    "title": "Wrap up",
    "section": "Required Data",
    "text": "Required Data\nNo data downloads required for this section"
  },
  {
    "objectID": "course-materials/part8-wrap-up.html#lecture-materials",
    "href": "course-materials/part8-wrap-up.html#lecture-materials",
    "title": "Wrap up",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 8 is contained in one lesson:\n\nWrap up\n lecture 8 slides"
  },
  {
    "objectID": "course-materials/part7-debugging-testing.html#required-packages",
    "href": "course-materials/part7-debugging-testing.html#required-packages",
    "title": "Debugging & Unit Testing",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be using the following R packages:\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(reactlog)\nlibrary(shinytest2)"
  },
  {
    "objectID": "course-materials/part7-debugging-testing.html#required-data",
    "href": "course-materials/part7-debugging-testing.html#required-data",
    "title": "Debugging & Unit Testing",
    "section": "Required Data",
    "text": "Required Data\n\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "course-materials/part7-debugging-testing.html#lecture-materials",
    "href": "course-materials/part7-debugging-testing.html#lecture-materials",
    "title": "Debugging & Unit Testing",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 7 is broken down into two lessons:\n\n\n\nDebugging\n lecture 7.1 slides\n\n\n\n\nUnit Testing\n lecture 7.2 slides"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#title-slide",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 2.1\nBuilding a single-file app"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#build-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#build-app1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Building out your 1st app\n\n\nHere, we’ll create our first reactive objects and establish a general Shiny coding workflow"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#LO-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#LO-app1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - App #1 (single-file app)\n\n\nBy the end of building out this first app, you should be a bit more familiar with:\n\n\n\n writing a single-file (app.R) shiny app\n\n\n\n\n adding and styling text in the UI using tags\n\n\n\n\n practicing data wrangling and visualization outside of your shiny app\n\n\n\n\n following a general workflow for building reactive apps, which includes adding inputs and outputs to the UI, then writing the server instructions on how to assemble user input values into outputs\n\n\n\n\n running and quitting apps in RStudio\n\n\n\n\nPackages introduced:\n\n\n\n\n {shiny}: framework for building our reactive app + standard widgets\n\n\n\n\n {DT}: interactive datatable widgets (that can be made reactive using shiny!)\n\n\n\n\n {tidyverse}: collection of packages for wrangling & visualizing data\n\n\n\n\n {palmerpenguins}: data"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#roadmap-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#roadmap-app1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Roadmap for App #1\n\n\nWe’ll start by building a small single-file app using data from the {palmerpenguins} package. We’ll build out the the following features:\n\n\n\n  \n\n(a) A title and subtitle\n\n\n(b) A slider widget for users to select a range of penguin body masses\n\n\n(c) A reactive scatterplot that updates based on user-supplied values"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-plain",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-plain",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add text in the UI\n\nWe’ll do this in the UI within fluidPage(), a layout function that sets up the basic visual structure of the page and scales components in real time to fill all available browser width. Add a title and subtitle to your app (be sure to separate each with a comma, ,), save, and run:\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # app title ----\n  \"My App Title\",\n  \n  # app subtitle ----\n  \"Exploring Antarctic Penguin Data\"\n  \n  )"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-tags",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-tags",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Style text in the UI\n\nRecall that the UI is actually just an HTML document. We can style our text by adding static HTML elements using tags – a list of functions that parallel common HTML tags (e.g. &lt;h1&gt; == tags$h1()) The most common tags also have wrapper functions (e.g. h1()).\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # app title ----\n  tags$h1(\"My App Title\"), # alternatively, you can use the `h1()` wrapper function\n  \n  # app subtitle ----\n  h4(strong(\"Exploring Antarctic Penguin Data\")) # alternatively, `tags$h4(tags$strong(\"text\"))`\n  \n  )"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#inputs-outputs",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#inputs-outputs",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What are inputs and outputs?\n\nNext, we will begin to add some inputs and outputs to our UI inside fluidPage() (anything that you put into fluidPage() will appear in our app’s user interface…and we want inputs and outputs to show up there!).\nInputs (or widgets) are the things that users can interact with (e.g. toggle, slide) and provide values to your app.\nOutputs are the R objects that your user sees (e.g. tables, plots). Outputs respond when a user interacts with / changes an input value."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#input-output-fxns",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#input-output-fxns",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Examples of input & output functions\n\nThe shiny package comes with a number of input and output functions, but you can extend these with additional packages (e.g. shinyWidgets, plotly, DT, etc.; more on those later).\n\n\nExamples of Input Functions:\n actionButton()\n checkboxInput()\n checkboxGroupInput()\n dateInput()\n dateRangeInput()\n radioButtons()\n selectInput()\n sliderInput()\n textInput()\n See a full list of shiny input functions\n\n\n\nExamples of Output Functions:\n dataTableOutput() (inserts an interactive table)\n imageOutput() (inserts an image)\n plotOutput() (inserts a plot)\n tableOutput() (inserts a table)\n textOutput() (inserts text)\n See a full list of shiny output functions"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#reactive-plot-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#reactive-plot-app1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Adding our reactive plot\n\n\nNext, we’ll create a scatterplot of penguin bill lengths vs. penguin flipper lengths using the penguins data set from the {palmerpengiuns} package. We will make this scatterplot reactive by adding a sliderInput that allows users to filter the displayed data points by selecting a range of penguin body masses (e.g. only plot bill and flipper lengths for penguins with body masses ranging from 4,500 grams to 6,000 grams).\n\n\n\n\n\nTo create a reactive plot, we will follow these steps:\n\n\n(1) Add an input (e.g. sliderInput) to the UI that users can interact with\n\n\n(2) Add an output (e.g. plotOutput) to the UI that creates a placeholder space to fill with our eventual reactive output\n\n\n(3) Tell the server how to assemble inputs into outputs"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#input-syntax",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#input-syntax",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Input function syntax\n\n\n All input functions have the same first argument, inputId (NOTE: Id not ID), which is used to connect the front end of your app (the UI) with the back end (the server). For example, if your UI has an inputId = \"name\", the server function will access that input value using the syntax input$name. The inputId has two constraints:\n\n\n(1) it must be a simple string containing only letters, numbers, and underscores,\n(2) it must be unique within your app.\n\n\n\n Most input functions have a second parameter called label, which is used to create a human-readable label for the control, which will appear in the UI.\n\n\n The remaining arguments are unique to each input function. Oftentimes, these include a value parameter, which lets you set the default value of your widget, where applicable.\n\nA couple examples:\n\nsliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\", value = c(3000, 4000), ...)\n\nselectInput(inputId = \"island_input\", label = \"Choose and island:\", ...)\n\n\n\nCheck out the interactive Shiny Widgets Gallery to learn how to implement the most common widgets."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#add-input",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#add-input",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Step 1: Add an input to your app\n\n\nFirst let’s add a sliderInput() that will allow users to select a range of penguin body masses (g).\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider input ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000))\n  )\n\n\n\n\nWhen you run your app, you should see something similar to the image below. It’s operable, but does not yet have an associated output."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#output-syntax",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#output-syntax",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Output function syntax\n\n\nOutputs in the UI create placeholders which are later filled by the server function.\n\n\nSimilar to input functions, all output functions take the same first argument, outputId (again, note Id not ID), which connects the front end UI with the back end server. For example, if your UI contains an output function with an outputId = \"plot\", the server function will access it (or in other words, know to place the plot in that particular placeholder) using the syntax output$plot.\n\n\n\nA couple examples:\n\n\nplotOutput(outputId = \"bodyMass_scatterplot_output\")\n\ndataTableOutput(outputId = \"penguin_data_output\")"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#add-output",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#add-output",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Step 2: Add an output to your app\n\n\nLet’s now add a plotOutput(), which will be updated based on the user inputs via the sliderInput(), then run the app.\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider input ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot ouput ----\n  plotOutput(outputId = \"bodyMass_scatterplot_output\")\n  \n  )"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#wheres-my-output",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#wheres-my-output",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Where’s my output??\n\nOkay, it looks like nothing changed?? Remember, *Output() functions create placeholders, but we have not yet written the server instructions on how to fill and update those placeholders. We can inspect the HTML and see that there is, in fact, a placeholder area awaiting our eventual output, which will be a plot named “bodyMass_scatterplot_output”:"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rendering-outputs",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rendering-outputs",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Render outputs with render*() functions\n\n\nEach *Output() function in the UI is coupled with a render*() function in the server, which contains the “instructions” for creating the output based on user inputs (or in other words, the instructions for making your output reactive).\n\n\n\nExamples of *Output() functions and their corresponding render*() functions:\n\n\n\n\n\nOutput function\nRender function\n\n\n\n\ndataTableOutput()\nrenderDataTable()\n\n\nimageOutput()\nrenderImage()\n\n\nplotOutput()\nrenderPlot()\n\n\ntableOutput()\nrenderTable()\n\n\ntextOutput()\nrenderText()"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#assemble",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#assemble",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Step 3: Tell the server how to assemble inputs into outputs\n\n\nNow that we’ve designed our input / output in the UI, we need to write the server instructions (i.e. write the server function) on how to use the input value(s) (i.e. penguin body mass range via a slider input) to update the output (scatter plot).\n\n\nThe server function is defined with two arguments, input and output, both of which are list-like objects. You must define both of these arguments within the server function. input contains the values of all the different inputs at any given time, while output is where you’ll save output objects to be displayed in the app.\n\nThis part can be intimidating, but if you follow these three rules, you will successfully create reactivity within your shiny app!\n\n\nRules:\n\n\n\n Save objects you want to display to output$&lt;id&gt;\n\n\n Build reactive objects using a render*() function\n\n\n Access input values with input$&lt;id&gt;"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Rule 1: Save objects you want to display to output$&lt;id&gt;\n\n\n\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterplot_output\") \n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # render penguin scatter plot ----\n  output$bodyMass_scatterplot_output &lt;- # code to generate plot here\n  \n}\n\n\n\n\nIn our UI, we created a placeholder for our plot using the plotOutput() function and gave it the Id \"bodyMass_scatterplot_output\".\nIn our server, we will save our plot to the output argument by its outputId.\nNote: In the UI, our outputId is quoted (\"bodyMass_scatterplot_output\"), but not in the server (bodyMass_scatterplot_output)."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Rule 2: Build reactive objects with render*()\n\n\nUse the appropriate render*() function to make your output reactive (e.g. if you have a plotOutput in your UI, you will need to use renderPlot() in your server). Within your render*(), write any code inside a set of curly braces, {}. This allows you to include as many lines of code as it takes to build your object.\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterplot_output\") \n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # render penguin scatter plot ----\n  output$bodyMass_scatterplot_output &lt;- renderPlot({\n    \n     # code to generate plot here\n    \n  }) \n}"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.2",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "An Aside: Draft objects in a separate script first\n\n\nI find it easier to experiment and draft my objects (e.g. plots) first in a separate script (outside my app directory), then copy the code over to the server after. I want to make a plot that looks like this:\n\n\nCodeOutput\n\n\n\n\n\n~/scratch/practice-script-app1.R\n\n# load packages ----\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n# create scatterplot ----\nggplot(na.omit(penguins), \n       aes(x = flipper_length_mm, y = bill_length_mm, \n           color = species, shape = species)) +\n  geom_point() +\n  scale_color_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n  scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n  labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\", \n       color = \"Penguin species\", shape = \"Penguin species\") +\n  theme_minimal() +\n  theme(legend.position = c(0.85, 0.2),\n        legend.background = element_rect(color = \"white\"))"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.3",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.3",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Copy your plot code into the server\n\n\nCopy your code over to your app, placing it inside the {} (and make sure to add any additional required packages to the top of your app.R script). Run your app. What do you notice?\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterplot_output\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # render penguin scatter plot ----\n  output$bodyMass_scatterplot_output &lt;- renderPlot({ \n      ggplot(na.omit(penguins),\n             aes(x = flipper_length_mm, y = bill_length_mm,\n                 color = species, shape = species)) + \n        geom_point() + \n        scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n        scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n        labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\", \n             color = \"Penguin species\", shape = \"Penguin species\") + \n        theme_minimal() + \n        theme(legend.position = c(0.85, 0.2), \n              legend.background = element_rect(color = \"white\")) \n  })"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#non-reactive-plot",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#non-reactive-plot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A non-reactive plot now lives in our plotOutput() placeholder\n\n\nWe have a plot (yay!), but it isn’t reactive. We have not yet told the server how to update the plot based on user inputs via the sliderInput() in the UI. Let’s do that next…"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#practice-filtering",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#practice-filtering",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Practice filtering data in our separate script\n\n\nFirst, create a new data frame where we filter the body_mass_g column for observations within a specific range of values (in this example, values ranging from 3000 - 4000):\n\n\n\n\n\n~/scratch/practice-script-app1.R\n\n# load packages ----\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n# filter penguins df for observations where body_mass_g &gt;= 3000 & &lt;= 4000 ----\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% c(3000:4000))\n\n\n\n\n\nThen, plot the new filtered data frame:\n\n\n\n\n\n\n~/scratch/practice-script-app1.R\n\n# plot new, filtered data ----\nggplot(na.omit(body_mass_df), # plot 'body_mass_df' rather than 'penguins' df\n       aes(x = flipper_length_mm, y = bill_length_mm, \n           color = species, shape = species)) +\n  geom_point() +\n  scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n  labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\", \n       color = \"Penguin species\", shape = \"Penguin species\") +\n  theme_minimal() +\n  theme(legend.position = c(0.85, 0.2),\n        legend.background = element_rect(color = \"white\"))"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#what-needs-updating",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#what-needs-updating",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Which part of our code needs to be updated when a user changes the slider range input?\n\n\n\n\n\n~/scratch/practice-script-app1.R\n\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% c(3000:4000)) # 3000:4000 needs to be update-able (or in other words, reactive)!\n\n\n\n\n\n\nFor example:\n\n\n\n\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% c(2857:5903))\n\n\n\n\n\n\n\n\n\n\n\n\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% c(3725:5191))"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Rule 3: Access input values with input$&lt;id&gt;\n\n\nRecall that in our UI, we gave our sliderInput() an inputId = \"body_mass_input\".\n\n\n\n\n~/one-file-app/app.R\n\n# load packages (omitted for brevity) ----\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\", \n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterplot_output\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n      \n  # render the scatter plot ----\n  output$bodyMass_scatterplot_output &lt;- renderPlot({ \n      ggplot(na.omit(penguins, aes(...)) + # etc. (omitted for brevity)\n  }) \n    \n}"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.2",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Rule 3: Access input values with input$&lt;id&gt;\n\n\n\n\n\n\n~/one-file-app/app.R\n\n# load packages (omitted for brevity) ----\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\", \n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterplot_output\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # filter body masses ----\n  body_mass_df &lt;- reactive({ \n    penguins |&gt; \n      filter(body_mass_g %in% c(input$body_mass_input[1]:input$body_mass_input[2])) \n  })\n      \n  # render the scatter plot ----\n  output$bodyMass_scatterplot_output &lt;- renderPlot({ \n      ggplot(na.omit(body_mass_df(), aes(...)) + \n        # etc. (omitted for brevity)\n  }) \n    \n}\n\n\n\n\nIn our server, we can access the values of that slider input using the syntax, input$body_mass_input. If you want your output to change according to the input values, substitute hard-coded values (e.g. 3725:5191) with the input values from the UI. For example, c(input$body_mass_input[1]:input$body_mass_input[2]).\n\n\nImportantly, we need to use reactive() to create reactive data frames that update with user inputs. When you call your reactive data frame in your ggplot, the data frame name must be followed by ()."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#run-that-app",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#run-that-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Okay, RUN THAT APP!\n\n\nYou should now have a reactive Shiny app! Note that reactivity automatically occurs whenever you use an input value to render an output object."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#recapp-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#recapp-app1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Recap: We created our first reactive Shiny app following these steps:\n\n\n\n(1) We created an app.R file in it’s own directory and began our app with the template, though you can also create a two-file Shiny app by using separate ui.R and server.R files.\n\n\n\n\n(2) We added an input to the fluidPage() in our UI using an *Input() function and gave it a unique inputId (e.g. inputId = \"unique_input_Id_name\")\n\n\n\n\n(3) We created a placeholder for our reactive object by using an *Output() function in the fluidPage() of our UI and gave it an outputId (e.g. outputId = \"output_Id_name\")\n\n\n\n\n(4) We wrote the server instructions for how to assemble inputs into outputs, following these rules:\n\n\n save objects that you want to display to output$&lt;id&gt;\n\n\n build reactive objects using a render*() function (and similarly, build reactive data frames using reactive()\n\n\n access input values with input$&lt;id&gt;\n\n\n\n\nAnd we saw that reactivity automatically occurs whenever we use an input value to render an output object."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Question Exercise 1: Add another reactive widget\n\n\nThe {DT} package provides an R interface to the JavaScript library DataTables (you may have already used the {DT} package in your knitted RMarkdown / Quarto HTML documents). DT datatables allow for filtering, pagination, sorting, and lots of other neat features for tables on your HTML pages.\n\n\n\n\n\n\nWorking alone or in groups, add a reactive DT datatable to your app with a checkboxGroupInput that allows users to select which year(s) to include in the table. Configure your checkboxGroupInput so that the years 2007 and 2008 are pre-selected.\n\n\nIn the end, your app should look something like the example to the right.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for some tips on getting started!"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-tips",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Lightbulb Exercise 1: Tips\n\nTips:\n\n Use ?checkboxGroupInput to learn more about which arguments you need (remember, all inputs require an inputId and oftentimes a label, but there are others required to make this work as well)\n\n\n Both {shiny} and {DT} packages have functions named dataTableOutput() and renderDataTable() – DT::renderDataTable() allows you to create both server-side and client-side DataTables and supports additional DataTables features while shiny::renderDataTable() only provides server-side DataTables. Be sure to use the one from the {DT} package using the syntax packageName::functionName().\n\n\n There are lots of ways to customize DT tables, but to create a basic one, all you need is DT::dataTable(your_dataframe)\n\nAnd remember to follow the steps outlined on the previous slides:\n\n(1) Add an input (e.g. checkboxGroupInput) to the UI that users can interact with\n\n\n(2) Add an output (e.g. DT::datatableOutput) to the UI that creates a placeholder space to fill with our eventual reactive output\n\n\n(3) Tell the server how to assemble inputs into outputs following 3 rules:\n\n\n Save objects you want to display to output$&lt;id&gt;\n\n\n Build reactive objects using a render*() function\n\n\n Access input values with input$&lt;id&gt;\n\n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-solution",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 1: A solution\n\n\nPress the right arrow key to advance through the newly added lines of code.\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(DT)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # app title ----\n  tags$h1(\"My App Title\"),\n  \n  # app subtitle ----\n  h4(strong(\"Exploring Antarctic Penguin Data\")),\n  \n  # body mass slider input ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g)\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n\n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterplot_output\"),\n  \n  # year input ----\n  checkboxGroupInput(inputId = \"year_input\", label = \"Select year(s):\",\n                     choices = c(2007, 2008, 2009), # or `unique(penguins$year)` | NOTE: update checkbox display name by using \"New name\" = \"observation name\" (e.g \"The year 2007\" = 2007)\n                     selected = c(2007, 2008)),\n  \n  # DT output ----\n  DT::dataTableOutput(outputId = \"penguin_DT_output\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # filter body masses ----\n  body_mass_df &lt;- reactive({\n    penguins |&gt;\n      filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2]) # return observations where body_mass_g is \"in\" the set of options provided by the user in the sliderInput\n  })\n\n  # render the scatterplot output ----\n  output$bodyMass_scatterplot_output &lt;- renderPlot({\n\n    ggplot(na.omit(body_mass_df()),\n           aes(x = flipper_length_mm, y = bill_length_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      scale_color_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\") +\n      theme_minimal() +\n      theme(legend.position = c(0.85, 0.2),\n            legend.background = element_rect(color = \"white\"))\n    \n  })\n  \n  # filter for years ----\n  years_df &lt;- reactive({\n    penguins |&gt; \n      filter(year %in% c(input$year_input)) # return observations where year is \"in\" the set of options provided by the user via the checkboxGroupInput\n  })\n  \n  # render the DT::datatable ----\n  output$penguin_DT_output &lt;- DT::renderDataTable({\n    \n    DT::datatable(years_df(),\n                  options = list(pagelength = 10),\n                  rownames = FALSE)\n    \n  })\n  \n}\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#common-mistakes",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#common-mistakes",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Common mistakes to look out for\n\nIt’s inevitable that you’ll make mistakes here and there as you build out your app…and they can be frustrating to catch. A few that I find myself making over and over again:\n\n\n\n\n misspelling inputId as inputID (or outputId as outputID)\n\n\n misspelling your inputId (or outputId) name in the server (e.g. UI: inputId = \"myInputID\", server: input$my_Input_ID)\n\n\n repeating inputIds (each must be unique)\n\n\n forgetting to separate UI elements with a comma, ,\n\n\n forgetting the set of parentheses when calling the name of a reactive data frame (e.g. ggplot(my_reactive_df(), aes(...)))"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#end-section",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#end-section",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 2.1\n\n\nUp next: building out a two-file app\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#title-slide",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 2.2\nBuilding a two-file app"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#build-app2",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#build-app2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Building out your 2nd app\n\n\nUp until now, we’ve been adding our text and widgets in a pretty unstructured way – elements are stacked on top of one another within a single column. Next, we’ll learn how to customize the layout of our app to make it a bit more visually pleasing."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#LO-app2v1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#LO-app2v1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app)\n\n\nBy the end of building out this second app, you should:\n\n\n\n be comfortable creating a shiny app using the two-file (ui.R & server.R) format along with a global.R file\n\n\n\n\n understand how to use layout functions to customize the visual structure of your app’s UI\n\n\n\n\n have more practice building reactive outputs – and placing them within the layout structure of your app\n\n\n\n\n be able to create multiple inputs that control a given output\n\n\n\n\n know how to import larger bodies of text using includeMarkdown() (rather than writing & styling text within your UI)\n\n\n\n\n successfully deploy an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\n {shinyWidgets}: extend shiny widgets with some different, fun options\n\n\n\n\n {lterdatasampler}: data"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#roadmap-app2v1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#roadmap-app2v1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Roadmap for App #2\n\n\nWe’ll be building out our two-file app using data from the {lterdatasampler} and {palmerpenguins} packages. We’ll focus on creating a functional app that has a more visually pleasing UI layout. Our goals are to create:\n\n\n\n \n\n(a) A navigation bar with two pages, one of which will contain two tabs (one tab for each plot)\n\n\n(b) A pickerInput and checkboxGroupButtons for users to filter cutthroat trout data in a reactive scatterplot\n\n\n(c) A pickerInput for users to filter penguin data and a sliderInput to adjust the number of bins in a reactive histogram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou’ll notice that there are some UI quirks (most notably, blank plots that appear when no data is selected) that can make the user experience less than ideal (and even confusing) – we’ll learn about ways to improve this in the next section."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#two-source",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#two-source",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Two files? Try two panes!\n\n\nWe’ll be building out a two-file shiny app this time around. You can open multiple scripts up side-by-side by navigating to Tools &gt; Global Options &gt; Pane Layout &gt; Add Column\n\n\n\nThis setup is certainly not required / necessary – organize your IDE however you work best!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#app2-trout-plot",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#app2-trout-plot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Practice on your scratch script – Trout\n\nIn a ~scratch/practice_script_app2.R file, practice wrangling & plotting trout data. . .\n\n\n\n\n\n~/scratch/practice_script_app2.R\n\n#..........................load packages.........................\nlibrary(lterdatasampler)\nlibrary(tidyverse)\n\n#............custom ggplot theme (apply to both plots)...........\nmyCustomTheme &lt;- function() {\n  theme_light() +\n  theme(axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(linewidth = 0.7))\n}\n\n#.......................wrangle trout data.......................\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n#..................practice filtering trout data.................\ntrout_filtered_df &lt;- clean_trout |&gt; \n  filter(channel_type %in% c(\"pool\", \"rapid\")) |&gt; \n  filter(section %in% c(\"clear cut forest\"))\n\n#........................plot trout data.........................\nggplot(trout_filtered_df, aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n  geom_point(alpha = 0.7, size = 5) +\n  scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\", \n                                \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\", \n                                \"side channel\" = \"#94CBEC\")) +\n  scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19, \n                                \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23, \n                                \"side channel\" = 25)) +\n  labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n  myCustomTheme()\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the and_vertebrates data set from {lterdatasampler} to create a scatter plot of trout weights by lengths. When we move to shiny, we’ll build two inputs for filtering our data: one to select channel_type and one to select section."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#app2-penguin-plot",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#app2-penguin-plot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Practice on your scratch script – Penguins\n\n. . .and penguin data\n\n\n\n\n\n~/scratch/practice_script_app2.R\n\n#..........................load packages.........................\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n#..................practice filtering for island.................\nisland_df &lt;- penguins |&gt; \n  filter(island %in% c(\"Dream\", \"Torgesen\"))\n\n#........................plot penguin data.......................\nggplot(na.omit(island_df), aes(x = flipper_length_mm, fill = species)) +\n  geom_histogram(alpha = 0.6, position = \"identity\", bins = 25) +\n  scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n       fill = \"Penguin species\") +\n  myCustomTheme()\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the penguins data set from {palmerpenguins} to create a histogram of penguin flipper lengths. When we move to shiny, we’ll build two inputs for filtering our data: one to select island and one to change the number of histogram bins."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#global.R",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#global.R",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We’ll use our global.R file to help with organization\n\n\nWhile not a requirement of a shiny app, a global.R file will help reduce redundant code, increase your app’s speed, and help you better organize your code. It works by running once when your app is first launched, making any logic, objects, etc. contained in it available to both the ui.R and server.R files (or, in the case of a single-file shiny app, the app.R file). It’s a great place for things like:\n\n\n\n loading packages\n importing data\n sourcing scripts (particularly functions – we’ll talk more about functions later)\n data wrangling (though you’ll want to do any major data cleaning before bringing your data into your app)\n building custom ggplot themes\n etc.\n\n\n\nReminder: global.R must be saved to the same directory as your ui.R and server.R files."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#unstructured-app1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#unstructured-app1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We created a perfectly functional first app, but it’s not so visually pleasing\n\n\n\n   nothing really grabs your eye\n inputs & outputs are stacked vertically on top of one another (which requires a lot of vertical scrolling)\n widget label text is difficult to distinguish from other text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we jump into adding reactive outputs to our next app, we’ll first plan out the visual structure of our UI – first on paper, then with layout functions."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-functions",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-functions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Layout functions provide the high-level visual structure of your app\n\n\nLayouts are created using a hierarchy of function calls (typically) inside fluidPage(). Layouts often require a series functions – container functions establish the larger area within which other layout elements are placed. See a few minimal examples of layout functions on the following slides (though more exist!).\n\n\nSome useful layout function pairings:\n\n\n# sidebar for inputs & main area for outputs within the sidebarLayout() container\nsidebarLayout(\n  sidebarPanel(),\n  mainPanel()\n)\n\n# multi-row fluid layout (add any number of fluidRow()s to a fluidPage())\nfluidRow(\n  column(4, ...),\n  column(8, ...)\n)\n\n# tabPanel()s to contain HTML components (e.g. inputs/outputs) within the tabsetPanel() container\ntabsetPanel(\n  tabPanel()\n)\n\n# NOTE: can use navbarPage() in place of fluidPage(); creates a page with top-level navigation bar that can be used to toggle tabPanel() elements\nnavbarPage(\n  tabPanel()\n)"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-function-examples",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-function-examples",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Example UI layouts (adapted from Mastering Shiny, Ch. 6)\n\n\nNote: You can combine multiple layout function groups to really customize your UI – for example, you can create a navbar, include tabs, and also establish sidebar and main panel areas for inputs and outputs.\n\n\nSidebar & main areaPage with multiple rowsTabsNavbar\n\n\n\nTo create a page with a side bar and main area to contain your inputs and outputs (respectively), explore the following layout functions and read up on the sidebarLayout documentation:\n\n\n\n\nfluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs here\n    ),\n    mainPanel(\n      # outputs here\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo create a page with multiple rows, explore the following layout functions and check out the fluid layout documentation. Note that each row is made up of 12 columns. The first argument of the column() function takes a value of 1-12 to specify the number of columns to occupy.\n\n\n\n\nfluidPage(\n  fluidRow(\n    column(4, \n      ...\n    ),\n    column(8, \n      ...\n    )\n  ),\n  fluidRow(\n    column(6, \n      ...\n    ),\n    column(6, \n      ...\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may find that you eventually end up with too much content to fit on a single application page. Enter tabsetPanel() and tabPanel(). tabsetPanel() creates a container for any number of tabPanel()s. Each tabPanel() can contain any number of HTML components (e.g. inputs and outputs). Find the tabsetPanel documentation here and check out this example:\n\n\n\n\ntabsetPanel(\n  tabPanel(\"Tab 1\", \n    # an input\n    # an output\n  ),\n  tabPanel(\"Tab 2\"),\n  tabPanel(\"Tab 3\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also want to use a navigation bar (navbarPage()) with different pages (created using tabPanel()) to organize your application. Read through the navbarPage documentation and try running the example below:\n\n\n\n\nnavbarPage(\n  title = \"My app\",\n  tabPanel(title = \"Tab 1\",\n           # an input\n           # an output\n           ),\n  tabPanel(title = \"Tab 2\")\n)"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-fxns-app2",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-fxns-app2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Overview of layout functions used in App #2"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#tips",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Important tips for success\n\n\n Enable rainbow parentheses: Tools &gt; Global Options &gt; Code &gt; Display &gt; check Use rainbow parentheses\n\n\n Add code comments at the start and end of each UI element: Even with rainbow parentheses, it can be easy to lose track or mistake what parentheses belong with which (see examples on follow slide)\n\n\n\n Add placeholder text within your layout functions: Adding text, like \"slider input will live here\" and \"plot output here\" will help you better visualize what you’re working towards. It also makes it easier to navigate large UIs as you begin adding real inputs and outputs.\n\n\n\n Use keyboard shortcuts to realign your code: Select all your code using cmd / ctrl + A, then realign using cmd / ctrl + I."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#build-navbar",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#build-navbar",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Build a navbar with two pages\n\n\nFirst, let’s build a UI that has a navigation bar with two tabs – one for background information and one to contain our data visualizations. To do this, we’ll use navbarPage() instead of fluidPage() to create our webpage.\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           \"inputs and outputs will live here\" # REPLACE THIS WITH CONTENT\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\nTip: Run your app often while building out your UI to make sure it’s looking as you’d expect!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#add-tabs",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#add-tabs",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add two tabs to the “Explore the Data” page\n\n\nGive your tabs the following titles: Trout and Penguins.\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"LTER Animal Data Explorer\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      \"trout data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#sidebar-main-panels",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#sidebar-main-panels",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add sidebar & main panels to the Trout tab\n\n\nWe’ll eventually place our input in the sidebar and output in the main panel.\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-prompt",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-prompt",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 2: Add sidebar and main panels to the Penguins tab\n\n\n\n \nI encourage you to type the code out yourself, rather than copy/paste!\n\nBe sure to add text where your input / output will eventually be placed.\n\nWhen you’re done, you app should look like this \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-solution",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 2: A solution\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Animal Data Explorer\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"penguin plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END penguin sidebarPanel\n                        \n                        # penguin mainPanel ----\n                        mainPanel(\n                          \n                          \"penguin plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END penguin mainPanel\n                        \n                      ) # END penguin sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-review",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-review",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Some important things to remember when building your UI’s layout:\n\n\n\n try creating a rough sketch of your intended layout before hitting the keyboard (I like to think of this as UI layout “pseudocode”)\n\n\n\n\n keeping clean code is important – we haven’t even any added any content yet and our UI is already &gt;70 lines of code!\n\n\n\n\n use rainbow parentheses, code comments and plenty of space between lines to keep things looking manageable and navigable\n\n\n\n\n use the keyboard shortcut, command + I (Mac) or control + I (Windows), to align messy code – this helps put those off-alignment parentheses back where they belong\n\n\n\n\n things can get out of hand quickly – add one layout section at a time, run your app to check that things look as you intend, then continue"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#first-trout",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#first-trout",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add data viz: First up, trout\n\n\nWe’ll be using the and_vertebrates dataset from the {lterdatasampler} package to create our first reactive plot. These data contain coastal cutthroat trout (Oncorhynchus clarkii clarkii) lengths and weights collected in Mack Creek, Andrews Forest LTER. Original data can be found on the EDI Data Portal. Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\nImage Source: Joseph R. Tomelleri, as found on the Western Native Trout Initiative"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#import-packages-global",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#import-packages-global",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\nIn addition to the {lterdatasampler} package, we’ll also be using the {tidyverse} for data wrangling / visualization, and the {shinyWidgets} package to add a pickerInput and a checkboxGroupInput to our app.\n\nImport those three packages at the top of your global.R file\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler) \nlibrary(tidyverse)\nlibrary(shinyWidgets)"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#wrangle-data-global",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#wrangle-data-global",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\n\nWe can also do the bulk of our data wrangling here, rather than in the server. If we were reading in a data file (e.g. .csv), we would do that here too. Our new data object clean_trout, will now be available for us to call directly in our server (NOTE: we can copy our wrangling code over from our practice script).\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(tidyverse)\nlibrary(shinyWidgets) \n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#trout-pickerInput",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#trout-pickerInput",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a pickerInput for selecting channel_type to your UI\n\n\nThe channel_type variable (originally called unittype – we updated the name when wrangling data) represents the type of water body (cascade, riffle, isolated pool, pool, rapid, step (small falls), or side channel) where data were collected. We’ll start by building a shinyWidgets::pickerInput() to allow users to filter data based on channel_type.\n\n\n\nReminder: When we designed our UI layout, we added a sidebarPanel to our Trout tab with the placeholder text \"trout plot input(s) go here\". Replace that text with the code for your pickerInput:\n\n\n\n\n~/two-file-app/ui.R\n\n# channel type pickerInput ----\npickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n            choices = unique(clean_trout$channel_type), # alternatively: choices = c(\"rapid\", \"cascade\" ...)\n            selected = c(\"cascade\", \"pool\"), \n            options = pickerOptions(actionsBox = TRUE), # creates \"Select All / Deselect All\" buttons\n            multiple = TRUE) # END channel type pickerInput\n\n\n\nSave and run your app – a functional pickerInput should now appear in your UI.\n\n\nA shinyWidgets::pickerInput() is functionally equivalent to shiny::selectInput(), though it allows for greater customization and looks (in my opinion) a bit nicer."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#trout-output",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#trout-output",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a plot output to your UI\n\n\nNext, we need to create a placeholder in our UI for our trout scatterplot to live. Because we’ll be creating a reactive plot, we can use the plotOutput() function to do so.\n\n\n\nReminder: When we we designed our UI layout, we added a mainPanel to our Trout tab with the placeholder text \"trout plot output goes here\". Replace that text with the code for your plotOuput():\n\n\n\n\n~/two-file-app/ui.R\n\nplotOutput(outputId = \"trout_scatterplot_output\")\n\n\n\nSave and run your app – it won’t look different at first glance, but inspecting your app in a browser window (using Chrome, right click &gt; Inspect) will reveal a placeholder box for your plot output to eventually live:"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#trout-plot",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#trout-plot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Tell the server how to assemble pickerInput values into your plotOutput\n\n\nRemember the three rules for building reactive outputs: (1) save objects you want to display to output$&lt;id&gt;, (2) build reactive objects using a render*() function, and (3) access input values with input$&lt;id&gt;:\n\n\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter trout data ----\n  trout_filtered_df &lt;- reactive({\n    \n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input))\n    \n  })\n  \n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n    \n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n    \n  }) \n  \n} # END server\n\n\n\n\n\n\nA couple notes / reminders:\n\n\n If needed, reference your practice script to remind yourself how you planned to filter and plot your data\n\n\n Reactive data frames need a set of parentheses, (), following the name of the df (see ggplot(trout_filtered_df() ...))\n\n\n For a cohesive appearance, save your custom ggplot theme function to global.R (here, myCustomTheme()), then apply to all plots in your app. See code on the following slide."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#ggplot-theme",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#ggplot-theme",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Save your custom ggplot theme to global.R\n\n\nThis allows us to easily add our theme as a layer to each of our ggplots. Bonus: If you decide to modify your plot theme, you only have to do so in one place.\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- function() {\n  \n  theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n  \n}\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-first-widget",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-first-widget",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app and try out your pickerInput widget!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-ui",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-ui",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a second input that will update the same output\n\n\nYou can have more than one input control the same output. Let’s now add a checkboxGroupButtons widget to our UI for selecting forest section (either clear cut forest or old growth forest). Check out the function documentation for more information on how to customize the appearance of your buttons.\n\n\nBe sure to add the widget to the same sidebarPanel as our pickerInput (and separate them with a comma!):\n\n\n\n\n~/two-file-app/ui.R\n\n# trout plot sidebarPanel ----\nsidebarPanel(\n  \n  # channel type pickerInput ----\n  pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n              choices = unique(clean_trout$channel_type),\n              selected = c(\"cascade\", \"pool\"),\n              options = pickerOptions(actionsBox = TRUE),\n              multiple = TRUE), # END channel type pickerInput\n\n  # section checkboxGroupButtons ----\n  checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                       choices = c(\"clear cut forest\", \"old growth forest\"),\n                       selected = c(\"clear cut forest\", \"old growth forest\"),\n                       individual = FALSE, justified = TRUE, size = \"sm\",\n                       checkIcon = list(yes = icon(\"check\", lib = \"font-awesome\"), \n                                        no = icon(\"xmark\", lib = \"font-awesome\"))), # END section checkboxGroupInput\n                   \n            ) # END trout plot sidebarPanel"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-server",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-server",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Update your reactive df to also filter based on the new checkboxGroupInput\n\n\nReturn to your server to modify trout_filtered_df – our data frame needs to be updated based on both the pickerInput, which selects for channel_type, and the checkboxGrouptInput, which selects for forest section:\n\n\n\n\n~/two-file-app/server.R\n\n# filter trout data ----\ntrout_filtered_df &lt;- reactive({\n\n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input)) |&gt;\n      filter(section %in% c(input$section_input))\n      \n  })\n\n# trout scatterplot ----\noutput$trout_scatterplot_output &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n    geom_point(alpha = 0.7, size = 5) +\n    scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                  \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                  \"side channel\" = \"#94CBEC\")) +\n    scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                  \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                  \"side channel\" = 25)) +\n    labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n    myCustomTheme\n\n })"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-second-widget",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-second-widget",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app and try out your pickerInput & checkboxGrouptInput widgets!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#break-section1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#break-section1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Take a break\n\n\nUp next: Adding in the penguins plot\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#second-penguins",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#second-penguins",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add data viz: Next up, penguins\n\n\nWe’ll be using the penguins dataset from the {palmerpenguins} package to create our second reactive plot. These data contain penguin (genus Pygoscelis) body size measurements collected from three islands in the Palmer Archipelago, Antarctica, as part of the Palmer Station LTER. Original data can be found on the EDI Data Portal (Adélie data, Gentoo data, and Chinstrap data). Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-prompt",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-prompt",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 3: Add a reactive plot to the ‘Penguins’ tab\n\n\nWorking alone or in groups, add a reactive histogram of penguin flipper lengths (using the penguins data set from the {palmerpenguins} package) to the Penguins tab. Your plot should have the following features and look like the example below, when complete:\n\n\n\n\n data colored by penguin species\n\n\n a shinyWidgets::pickerInput() that allows users to filter data based on island, and that includes buttons to Select All / Deselect All island options at once\n\n\n a shiny::sliderInput() that allows users to change the number of histogram bins and that by default, displays a histogram with 25 bins\n\n\n the two widgets should be placed in the sidebarPanel and the reactive histogram should be placed in the mainPanel of the Penguins tab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for some tips on getting started!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-tips",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 3: Tips\n\n\nTips:\n\n Remember to load the palmerpenguins package at the top of global.R so that your app can find the data\n\n\n Add your widgets to the sidebarPanel and your plot output to the mainPanel of the Penguins tab – look for that placeholder text we added earlier to help place your new code in the correct spot within your UI!\n\n\n Try changing the histogram bin number in your practice code script first, before attempting to make it reactive\n\n\nAnd remember to follow the our three steps for building reactive outputs ((1) add input to UI, (2) add output to UI, (3) tell server how to assemble inputs into outputs)!\n  \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-solution",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 3: A solution\n\n\nglobal.Rui.Rserver.R\n\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- function() {\n  \n  theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n  \n}\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"check\", lib = \"font-awesome\"), \n                                                                no = icon(\"xmark\", lib = \"font-awesome\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\")\n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins |&gt; \n      filter(island %in% input$penguin_island_input)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram_output &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, position = \"identity\", bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme()\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#break-section2",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#break-section2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Take a break\n\n\nUp next: we’ll finish up by adding some intro text to the landing page\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#add-text",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#add-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add background / other important text\n\n\nIt’s usually valuable (and important) to provide some background information / context for your app – the landing page of your app can be a great place for this. We’re going to add text to our app’s landing page (i.e. the About this App page) so that it looks like the example below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\nSome important pieces for information to consider adding:\n\n\n motivation for building the app\n\n\n brief instructions for exploring the data\n\n\n who maintains the app, where the code lives, how to submit issues / suggestions"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#unruly-text",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#unruly-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Adding long text to the UI can get unruly\n\n\nFor example, I’ve added and formatted my landing page’s text directly in the UI using lots of nested tags – I’ve done this inside the tabPanel titled About this App (Note: I’ve formatted the layout of this page a bit using fluidRow and columns to create some white space around the edges. I’ve also created a faint gray horizontal line, using hr(), beneath which I added a footnote):\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           fluidRow(\n             column(1),\n             column(10,\n                    tags$h1(\"Welcome to the LTER Animal Data Explorer!\"),\n                    tags$br(),\n                    tags$h4(\"Why did we build this app?\"),\n                    tags$p(\"This shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's\", tags$a(href = \"https://lternet.edu/\", \"Long Term Ecological Research (LTER)\"), \"sites...but primarily, it was built as a teaching tool for\", tags$a(href = \"https://bren.ucsb.edu/courses/eds-430\", \"EDS 430 (Intro to Shiny)\"), \"-- this workshop, taught through the\", tags$a(href = \"https://ucsb-meds.github.io/\", \"Master of Environmental Data Science (MEDS) program\"), \"at the\", tags$a(href = \"https://bren.ucsb.edu/\", \"Bren School of Environmental Science and Management\"), \"is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\"),\n                    tags$br(),\n                    tags$h4(\"Where's the data?\"),\n                    tags$p(\"Check out the\", tags$strong(\"Explore the Data\"), \"page to find interactive data visualizations looking at Cutthroat trout of the\", tags$a(href = \"https://andrewsforest.oregonstate.edu/\", \"Andrews Forest LTER\"), \"and Adélie, Gentoo & Chinstrap penguins of the\", tags$a(href = \"https://pallter.marine.rutgers.edu/\", \"Palmer Station LTER.\"))\n             ),\n             column(1)\n           ), # END fluidRow\n           \n           hr(),\n           \n           em(\"This app is maintained by\", tags$a(href = \"https://samanthacsik.github.io/\", \"Samantha Csik\"), \"and is updated as needed for teaching purposes. Please report any issues\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app/issues\", \"here.\"), \"Source code can be found on\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app\", \"GitHub.\"))\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#includeMarkdown",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#includeMarkdown",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Instead, use includeMarkdown()\n\n\nTo maintain readability and an overall tidier-looking UI, you can write and style long bodies of text in separate markdown (.md) files that you then read into your UI using the includeMarkdown() function (Important: the includeMarkdown() function requires the {markdown} package – be sure to add library(markdown) to your global.R file!). I recommend saving those .md files in a subdirectory named /text within your app’s directory (e.g. ~/two-file-app/text/mytext.md).\n\n\nBelow shows how we can use this approach to simplify our UI:\n\n\nui.Rtext/about.mdtext/footer.md\n\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1)\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel\n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\")\n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\n~/two-file-app/text/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\n~/two-file-app/text/footer/md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#last-run",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#last-run",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app one more time to admire your beautiful creation!\n\n\n\nAgain, we have some UX/UI quirks to fix (most notably, blank plots when all widget options are deselected), which we’ll handle soon. But for now, we have a functioning app that we can practice deploying for the first time!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#app2-code",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#app2-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Code recap for app #2, so far:\n\n\nglobal.Rui.Rserver.Rabout.mdfooter.md\n\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\nlibrary(markdown)\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- function() {\n  \n  theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n  \n}\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1)\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type), # alternatively, include vector of options\n                                      selected = c(\"cascade\", \"pool\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"check\", lib = \"font-awesome\"), \n                                                                no = icon(\"xmark\", lib = \"font-awesome\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins |&gt; \n      filter(island %in% input$penguin_island_input)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram_output &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, position = \"identity\", bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme()\n    \n  })\n  \n} # END server\n\n\n\n\n\n\n\n~/two-file-app/text/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\n~/two-file-app/text/footer.md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#end",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 2.2\n\n\nUp next: deploying our app with shinyapps.io\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#add-text",
    "href": "course-materials/slides/part2.2C.html#add-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add background / other important text\n\n\nIt’s usually valuable (and important) to provide some background information / context for your app – the landing page of your app can be a great place for this. We’re going to add text to our app’s landing page (i.e. the About this App page) so that it looks like the example below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\nSome important pieces for information to consider adding:\n\n\n motivation for building the app\n\n\n brief instructions for exploring the data\n\n\n who maintains the app, where the code lives, how to submit issues / suggestions"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#unruly-text",
    "href": "course-materials/slides/part2.2C.html#unruly-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Adding long text to the UI can get unruly\n\n\nFor example, I’ve added and formatted my landing page’s text directly in the UI using lots of nested tags – I’ve done this inside the tabPanel titled About this App (Note: I’ve formatted the layout of this page a bit using fluidRow and columns to create some white space around the edges. I’ve also created a faint gray horizontal line, using hr(), beneath which I added a footnote):\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           fluidRow(\n             column(1),\n             column(10,\n                    tags$h1(\"Welcome to the LTER Animal Data Explorer!\"),\n                    tags$br(),\n                    tags$h4(\"Why did we build this app?\"),\n                    tags$p(\"This shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's\", tags$a(href = \"https://lternet.edu/\", \"Long Term Ecological Research (LTER)\"), \"sites...but primarily, it was built as a teaching tool for\", tags$a(href = \"https://bren.ucsb.edu/courses/eds-430\", \"EDS 430 (Intro to Shiny)\"), \"-- this workshop, taught through the\", tags$a(href = \"https://ucsb-meds.github.io/\", \"Master of Environmental Data Science (MEDS) program\"), \"at the\", tags$a(href = \"https://bren.ucsb.edu/\", \"Bren School of Environmental Science and Management\"), \"is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\"),\n                    tags$br(),\n                    tags$h4(\"Where's the data?\"),\n                    tags$p(\"Check out the\", tags$strong(\"Explore the Data\"), \"page to find interactive data visualizations looking at Cutthroat trout of the\", tags$a(href = \"https://andrewsforest.oregonstate.edu/\", \"Andrews Forest LTER\"), \"and Adélie, Gentoo & Chinstrap penguins of the\", tags$a(href = \"https://pallter.marine.rutgers.edu/\", \"Palmer Station LTER.\"))\n             ),\n             column(1)\n           ), # END fluidRow\n           \n           hr(),\n           \n           em(\"This app is maintained by\", tags$a(href = \"https://samanthacsik.github.io/\", \"Samantha Csik\"), \"and is updated as needed for teaching purposes. Please report any issues\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app/issues\", \"here.\"), \"Source code can be found on\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app\", \"GitHub.\"))\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#includeMarkdown",
    "href": "course-materials/slides/part2.2C.html#includeMarkdown",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Instead, use includeMarkdown()\n\n\nTo maintain readability and an overall tidier-looking UI, you can write and style long bodies of text in separate markdown (.md) files that you then read into your UI using the includeMarkdown() function (Important: the includeMarkdown() function requires the {markdown} package – be sure to add library(markdown) to your global.R file!). I recommend saving those .md files in a subdirectory named /text within your app’s directory (e.g. ~/two-file-app/text/mytext.md).\n\n\nBelow shows how we can use this approach to simplify our UI:\n\n\nui.Rtext/about.mdtext/footer.md\n\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1)\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel\n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\")\n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\n~/two-file-app/text/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\n~/two-file-app/text/footer/md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#last-run",
    "href": "course-materials/slides/part2.2C.html#last-run",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app one more time to admire your beautiful creation!\n\n\n\nAgain, we have some UX/UI quirks to fix (most notably, blank plots when all widget options are deselected), which we’ll handle soon. But for now, we have a functioning app that we can practice deploying for the first time!"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#app2-code",
    "href": "course-materials/slides/part2.2C.html#app2-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Code recap for app #2, so far:\n\n\nglobal.Rui.Rserver.Rabout.mdfooter.md\n\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\nlibrary(markdown)\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- function() {\n  \n  theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n  \n}\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1)\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type), # alternatively, include vector of options\n                                      selected = c(\"cascade\", \"pool\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"check\", lib = \"font-awesome\"), \n                                                                no = icon(\"xmark\", lib = \"font-awesome\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins |&gt; \n      filter(island %in% input$penguin_island_input)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram_output &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, position = \"identity\", bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme()\n    \n  })\n  \n} # END server\n\n\n\n\n\n\n\n~/two-file-app/text/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\n~/two-file-app/text/footer.md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#end",
    "href": "course-materials/slides/part2.2C.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 2.2\n\n\nUp next: deploying our app with shinyapps.io\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#title-slide",
    "href": "course-materials/slides/part6.2-modules-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 6.2\nModules"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#modules",
    "href": "course-materials/slides/part6.2-modules-slides.html#modules",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Writing modules\n\n\nWe can take our code abstraction a step further and bundle repeated UI & server components together into modules, streamlining our code and increasing efficiency."
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#LO-modules",
    "href": "course-materials/slides/part6.2-modules-slides.html#LO-modules",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - Modules\n\n\nBy the end of this section, you should have an intro-level understanding of:\n\n\n\n what is a shiny module and when it might make sense to build one\n\n\n\n\n the structure of a shiny module\n\n\n\n\n how to use a module\n\n\n\n\nPackages introduced:\n\n\n\n\nBox Open {gapminder}: data"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#gapminder-app",
    "href": "course-materials/slides/part6.2-modules-slides.html#gapminder-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The utility of modules is best demonstrated by taking a look at an example app\n\n\nThis app, developed by Garrett Grolemund & Joe Cheng as part of their Modules lesson, taught at the 2016 Shiny Developer Conference, is a prime candidate for modularization.\n\n\nIt uses the gapminder data set to display life expectancy by GDP per capita from 1952 to 2007 for Africa, the Americas, Asia, Europe, Oceania, and all regions collectively. The only difference between each tab is the subset of data displayed."
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#gapminder-code",
    "href": "course-materials/slides/part6.2-modules-slides.html#gapminder-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The code for this app isn’t particularly complex, but it’s repetitive and long\n\n\n\n\n~/modularized-app/app.R\n\n# app.R\n\n#..............................setup.............................\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(gapminder)\n\n# Note: This code creates data sets to use in each tab.\n# It removes Kuwait since Kuwait distorts the gdp scale\nall_data &lt;- filter(gapminder, country != \"Kuwait\")\nafrica_data &lt;- filter(gapminder, continent == \"Africa\")\namericas_data &lt;- filter(gapminder, continent == \"Americas\")\nasia_data &lt;- filter(gapminder, continent == \"Asia\", country != \"Kuwait\")\neurope_data &lt;- filter(gapminder, continent == \"Europe\")\noceania_data &lt;- filter(gapminder, continent == \"Oceania\")\n\n#...............................ui...............................\nui &lt;- fluidPage(\n  \n  # app title ----\n  titlePanel(\"Gapminder\"),\n  \n  # continent tabsetPanel ----\n  tabsetPanel(id = \"continent\", \n              \n              # All tab ----\n              tabPanel(title = \"All\", \n                       plotOutput(outputId = \"all_plot\"),\n                       sliderInput(inputId = \"all_year\", label = \"Select Year\", \n                                   value = 1952, min = 1952, max = 2007, step = 5, \n                                   animate = animationOptions(interval = 500))\n              ), # END All tab\n              \n              # Africa tab ----\n              tabPanel(title = \"Africa\", \n                       plotOutput(outputId = \"africa_plot\"),\n                       sliderInput(inputId = \"africa_year\", label = \"Select Year\", \n                                   value = 1952, min = 1952, max = 2007, step = 5, \n                                   animate = animationOptions(interval = 500))\n              ), # END Africa tab \n              \n              # Americas tab ----\n              tabPanel(title = \"Americas\", \n                       plotOutput(outputId = \"americas_plot\"),\n                       sliderInput(inputId = \"americas_year\", label = \"Select Year\", \n                                   value = 1952, min = 1952, max = 2007, step = 5, \n                                   animate = animationOptions(interval = 500))\n              ), # END Americas tab\n              \n              # Asia tab ----\n              tabPanel(title = \"Asia\", \n                       plotOutput(outputId = \"asia_plot\"),\n                       sliderInput(inputId = \"asia_year\", label = \"Select Year\", \n                                   value = 1952, min = 1952, max = 2007, step = 5, \n                                   animate = animationOptions(interval = 500))\n              ), # END Asia tab\n              \n              # Europe tab ----\n              tabPanel(title = \"Europe\", \n                       plotOutput(outputId = \"europe_plot\"),\n                       sliderInput(inputId = \"europe_year\", label = \"Select Year\", \n                                   value = 1952, min = 1952, \n                                   max = 2007, step = 5, animate = animationOptions(interval = 500))\n              ), # END Europe\n              \n              # Oceania tab ----\n              tabPanel(title = \"Oceania\", \n                       plotOutput(outputId = \"oceania_plot\"),\n                       sliderInput(inputId = \"oceania_year\", label = \"Select Year\", \n                                   value = 1952, min = 1952, max = 2007, step = 5, \n                                   animate = animationOptions(interval = 500))\n              ) # END Oceania tab\n              \n  ) # END continent tabsetPanel\n  \n) # END fluidPage\n\n#.............................server.............................\nserver &lt;- function(input, output) {\n  \n  # ---- collect one year of data ----\n  ydata_all &lt;- reactive({\n    filter(all_data, year == input$all_year)\n  })\n  \n  ydata_africa &lt;- reactive({\n    filter(africa_data, year == input$africa_year)\n  })\n  \n  ydata_americas &lt;- reactive({\n    filter(americas_data, year == input$americas_year)\n  })\n  \n  ydata_asia &lt;- reactive({\n    filter(asia_data, year == input$asia_year)\n  })  \n  \n  ydata_europe &lt;- reactive({\n    filter(europe_data, year == input$europe_year)\n  })\n  \n  ydata_oceania &lt;- reactive({\n    filter(oceania_data, year == input$oceania_year)\n  })\n  \n  # ---- compute plot ranges ----\n  xrange_all &lt;- range(all_data$gdpPercap)\n  yrange_all &lt;- range(all_data$lifeExp)\n  \n  xrange_africa &lt;- range(africa_data$gdpPercap)\n  yrange_africa &lt;- range(africa_data$lifeExp)\n  \n  xrange_americas &lt;- range(americas_data$gdpPercap)\n  yrange_americas &lt;- range(americas_data$lifeExp)\n  \n  xrange_asia &lt;- range(asia_data$gdpPercap)\n  yrange_asia &lt;- range(asia_data$lifeExp)\n  \n  xrange_europe &lt;- range(europe_data$gdpPercap)\n  yrange_europe &lt;- range(europe_data$lifeExp)\n  \n  xrange_oceania &lt;- range(oceania_data$gdpPercap)\n  yrange_oceania &lt;- range(oceania_data$lifeExp)\n  \n  # ---- render plots ----\n  \n  # render all countries ----\n  output$all_plot &lt;- renderPlot({\n    \n    # draw background plot with legend \n    plot(all_data$gdpPercap, all_data$lifeExp, type = \"n\", \n         xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n         panel.first = {\n           grid()\n           text(mean(xrange_all), mean(yrange_all), input$all_year, \n                col = \"grey90\", cex = 5)\n         }\n    )\n    \n    # build legend\n    legend(\"bottomright\", legend = levels(all_data$continent), \n           cex = 1.3, inset = 0.01, text.width = diff(xrange_all)/5,\n           fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \"#984EA399\", \"#FF7F0099\")\n    )\n    \n    # Determine bubble colors\n    cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n              \"Americas\" = \"#377EB899\",\n              \"Asia\" = \"#4DAF4A99\",\n              \"Europe\" = \"#984EA399\",\n              \"Oceania\" = \"#FF7F0099\")[ydata_all()$continent]\n    \n    # add bubbles \n    symbols(ydata_all()$gdpPercap, ydata_all()$lifeExp, \n            circles = sqrt(ydata_all()$pop), bg = cols, inches = 0.5, fg = \"white\", \n            add = TRUE)\n  })\n  \n  # render africa ----\n  output$africa_plot &lt;- renderPlot({\n    \n    # draw background plot with legend\n    plot(africa_data$gdpPercap, africa_data$lifeExp, type = \"n\", \n         xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n         panel.first = {\n           grid()\n           text(mean(xrange_africa), mean(yrange_africa), input$africa_year, \n                col = \"grey90\", cex = 5)\n         }\n    )\n    \n    # build legend\n    legend(\"bottomright\", legend = levels(africa_data$continent), \n           cex = 1.3, inset = 0.01, text.width = diff(xrange_africa)/5,\n           fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \"#984EA399\", \"#FF7F0099\")\n    )\n    \n    # Determine bubble colors\n    cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n              \"Americas\" = \"#377EB899\",\n              \"Asia\" = \"#4DAF4A99\",\n              \"Europe\" = \"#984EA399\",\n              \"Oceania\" = \"#FF7F0099\")[ydata_africa()$continent]\n    \n    # add bubbles\n    symbols(ydata_africa()$gdpPercap, ydata_africa()$lifeExp, \n            circles = sqrt(ydata_africa()$pop), bg = cols, inches = 0.5, fg = \"white\", \n            add = TRUE)\n  })\n  \n  # render americas ----\n  output$americas_plot &lt;- renderPlot({\n    \n    # draw background plot with legend\n    plot(americas_data$gdpPercap, americas_data$lifeExp, type = \"n\", \n         xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n         panel.first = {\n           grid()\n           text(mean(xrange_americas), mean(yrange_americas), input$americas_year, \n                col = \"grey90\", cex = 5)\n         }\n    )\n    \n    # build legend\n    legend(\"bottomright\", legend = levels(americas_data$continent), \n           cex = 1.3, inset = 0.01, text.width = diff(xrange_americas)/5,\n           fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \"#984EA399\", \"#FF7F0099\")\n    )\n    \n    # Determine bubble colors\n    cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n              \"Americas\" = \"#377EB899\",\n              \"Asia\" = \"#4DAF4A99\",\n              \"Europe\" = \"#984EA399\",\n              \"Oceania\" = \"#FF7F0099\")[ydata_americas()$continent]\n    \n    # add bubbles\n    symbols(ydata_americas()$gdpPercap, ydata_americas()$lifeExp, \n            circles = sqrt(ydata_americas()$pop), bg = cols, inches = 0.5, fg = \"white\", \n            add = TRUE)\n  })\n  \n  # render asia ----\n  output$asia_plot &lt;- renderPlot({\n    \n    # draw background plot with legend\n    plot(asia_data$gdpPercap, asia_data$lifeExp, type = \"n\", \n         xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n         panel.first = {\n           grid()\n           text(mean(xrange_asia), mean(yrange_asia), input$asia_year, \n                col = \"grey90\", cex = 5)\n         }\n    )\n    \n    # build legend\n    legend(\"bottomright\", legend = levels(asia_data$continent), \n           cex = 1.3, inset = 0.01, text.width = diff(xrange_asia)/5,\n           fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \"#984EA399\", \"#FF7F0099\")\n    )\n    \n    # Determine bubble colors\n    cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n              \"Americas\" = \"#377EB899\",\n              \"Asia\" = \"#4DAF4A99\",\n              \"Europe\" = \"#984EA399\",\n              \"Oceania\" = \"#FF7F0099\")[ydata_asia()$continent]\n    \n    # add bubbles\n    symbols(ydata_asia()$gdpPercap, ydata_asia()$lifeExp, \n            circles = sqrt(ydata_asia()$pop), bg = cols, inches = 0.5, fg = \"white\", \n            add = TRUE)\n  })\n  \n  # render europe ----\n  output$europe_plot &lt;- renderPlot({\n    stop(\"Error: Don't look at Europe\")\n    # draw background plot with legend\n    plot(europe_data$gdpPercap, europe_data$lifeExp, type = \"n\", \n         xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n         panel.first = {\n           grid()\n           text(mean(xrange_europe), mean(yrange_europe), input$europe_year, \n                col = \"grey90\", cex = 5)\n         }\n    )\n    \n    # build legend\n    legend(\"bottomright\", legend = levels(europe_data$continent), \n           cex = 1.3, inset = 0.01, text.width = diff(xrange_europe)/5,\n           fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \"#984EA399\", \"#FF7F0099\")\n    )\n    \n    # Determine bubble colors\n    cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n              \"Americas\" = \"#377EB899\",\n              \"Asia\" = \"#4DAF4A99\",\n              \"Europe\" = \"#984EA399\",\n              \"Oceania\" = \"#FF7F0099\")[ydata_europe()$continent]\n    \n    # add bubbles\n    symbols(ydata_europe()$gdpPercap, ydata_europe()$lifeExp, \n            circles = sqrt(ydata_europe()$pop), bg = cols, inches = 0.5, fg = \"white\", \n            add = TRUE)\n  })\n  \n  # render oceania ----\n  output$oceania_plot &lt;- renderPlot({\n    \n    # draw background plot with legend\n    plot(oceania_data$gdpPercap, oceania_data$lifeExp, type = \"n\", \n         xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n         panel.first = {\n           grid()\n           text(mean(xrange_oceania), mean(yrange_oceania), input$oceania_year, \n                col = \"grey90\", cex = 5)\n         }\n    )\n    \n    # build legend\n    legend(\"bottomright\", legend = levels(oceania_data$continent), \n           cex = 1.3, inset = 0.01, text.width = diff(xrange_oceania)/5,\n           fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \"#984EA399\", \"#FF7F0099\")\n    )\n    \n    # Determine bubble colors\n    cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n              \"Americas\" = \"#377EB899\",\n              \"Asia\" = \"#4DAF4A99\",\n              \"Europe\" = \"#984EA399\",\n              \"Oceania\" = \"#FF7F0099\")[ydata_oceania()$continent]\n    \n    # add bubbles ----\n    symbols(ydata_oceania()$gdpPercap, ydata_oceania()$lifeExp, \n            circles = sqrt(ydata_oceania()$pop), bg = cols, inches = 0.5, fg = \"white\", \n            add = TRUE)\n  })\n  \n} # END server\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#repeated-code1",
    "href": "course-materials/slides/part6.2-modules-slides.html#repeated-code1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Repeated code sections (1/2)\n\n\nTaking a closer look at the gapminder app code, we’ll see that the following sections of code are repeated for each region (6 times total; only code sections for “all” regions shown below):\n\n\n tabPanel (UI)\n\n\n# \"All\" tabPanel (repeated 5 more times for each subregion) \ntabPanel(title = \"All\", \n         plotOutput(outputId = \"all_plot\"),\n         sliderInput(inputId = \"all_year\", label = \"Select Year\", \n                     value = 1952, min = 1952, max = 2007, step = 5, \n                     animate = animationOptions(interval = 500)))\n\n\n reactive data frame (server)\n\n\n# \"All\" reactive data frame (repeated 5 more times for each subregion)\nydata_all &lt;- reactive({\n  filter(all_data, year == input$all_year)\n})\n\n\n calculating date ranges (server)\n\n\n# \"All\" date range (repeated 5 more times for each subregion)\nxrange_all &lt;- range(all_data$gdpPercap)\nyrange_all &lt;- range(all_data$lifeExp)"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#repeated-code2",
    "href": "course-materials/slides/part6.2-modules-slides.html#repeated-code2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Repeated code sections (2/2)\n\n\n renderPlot({}) (server)\n\n\n# \"All\" plot (repeated 5 more times for each subregion)\noutput$all_plot &lt;- renderPlot({\n    \n    # draw background plot with legend \n    plot(all_data$gdpPercap, all_data$lifeExp, type = \"n\", \n         xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n         panel.first = {\n           grid()\n           text(mean(xrange_all), mean(yrange_all), input$all_year, \n                col = \"grey90\", cex = 5)\n         }\n    )\n    \n    # build legend\n    legend(\"bottomright\", legend = levels(all_data$continent), \n           cex = 1.3, inset = 0.01, text.width = diff(xrange_all)/5,\n           fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \"#984EA399\", \"#FF7F0099\")\n    )\n    \n    # Determine bubble colors\n    cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n              \"Americas\" = \"#377EB899\",\n              \"Asia\" = \"#4DAF4A99\",\n              \"Europe\" = \"#984EA399\",\n              \"Oceania\" = \"#FF7F0099\")[ydata_all()$continent]\n    \n    # add bubbles \n    symbols(ydata_all()$gdpPercap, ydata_all()$lifeExp, \n            circles = sqrt(ydata_all()$pop), bg = cols, inches = 0.5, fg = \"white\", \n            add = TRUE)\n  })"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#enter-modules",
    "href": "course-materials/slides/part6.2-modules-slides.html#enter-modules",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Enter Shiny modules\n\n\n A shiny module is a piece of a shiny app – it can’t be run directly, but instead is included as part of a larger app. While functions work well for code that that is either completely on the client (UI) side or completely on the server side, modules can be written for code that spans both.\n\n Modules can represent inputs, outputs, or both (we’ll be building a module that represents both). Motivation for building modules can range from enabling reuse of code (once created, modules can be reused within the same app or even across different apps), to breaking up a large, complex app into smaller, separate components.\n\n\n Modules help to solve a namespacing problem – recall that all Ids (e.g. inputIds) must be unique across your app. Namespacing is a system for organizing objects with identical names (similar to namespacing functions from particular packages using the syntax package::function() e.g. plyr::arrange() vs dplyr::arrange())."
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#modules-structure",
    "href": "course-materials/slides/part6.2-modules-slides.html#modules-structure",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What do modules look like?\n\n\nModules are a coding pattern, organized into two functions: one that creates the UI elements and one that loads the server logic. They can look a bit different, depending on your module, but they generally follow this pattern:\n\n\n\n\nmyModule.R\n\n#..........................ui function...........................\n\nmyModuleUI &lt;- function(id) {\n  \n  ns &lt;- NS(id)\n  \n  tagList(\n    # inputs with ids wrapped in ns() (e.g. `sliderInput(id = ns(\"slider\"))`)\n    # outputs with ids wrapped in ns() (e.g. `plotOutput(id = \"ns(plot\"))`)\n  )\n  \n}\n\n#........................server function.........................\nmyModuleServer &lt;- function(id, ...) { # where `...` includes any number of additional parameters\n  \n  moduleServer(id, function(input, output, session) {\n    \n    # server logic\n    \n  }) \n  \n}"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#where-to-define-modules",
    "href": "course-materials/slides/part6.2-modules-slides.html#where-to-define-modules",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Where should I define / save my module?\n\n\nPart of the appeal of creating modules is breaking your long app.R (or ui.R & server.R) scripts into smaller pieces. Creating a separate R script to house a given module (both the UI and Server function components) is typically the best course of action (a good naming convention is giving it a descriptive name with the suffix “Module” e.g. gapModule.R). There are a variety of places you can write and / or save your modularized code to, but I recommend one of the following two options (at least while we’re just getting started on our shiny modules journey):\n\n\n\n(1) save your modularized code script inside your app’s directory (e.g. ~/&lt;app-directory&gt;/myModule.R)\n\nIf you choose this option, call source(\"myModule.R\") into global.R (if using ui.R / server.R) or app.R.\n\n\n\n\n(2) save your modularized code script inside the R/ subdirectory of your application (e.g. ~/&lt;app-directory&gt;/R/myModule.R)\n\n\nIf you choose this option, your module will automatically be sourced (as of Shiny 1.5.0) when the application is loaded."
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#ui-function",
    "href": "course-materials/slides/part6.2-modules-slides.html#ui-function",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Breaking down the UI function:\n\nThe UI part of a module needs to do two things: (1) return a shiny element (e.g. an input & output), and (2) assign module elements to a unique namespace using NS(). NS() provides an easy way to help with namespacing within your module, ensuring that each time your module is called, a unique id is assigned.\nThe UI function for our gapminder module will look like this (NOTE: code comments below denote the general order of operations I followed when writing this UI function):\n\n\n\n~/modularized-app/R/gapModule.R\n\n# step 1: a good function naming convention is a descriptive base name, suffixed by `UI`\n\ngapModuleUI &lt;- function(id) { # step 2: the first argument to a UI function should always be `id` -- this is the namespace for the module \n  \n  ns &lt;- NS(id) # step 3: the function body starts with the statement `ns &lt;- NS(id)`\n  \n  tagList( # step 4: surrounding all inputs & outputs in `tagList()`, which ensures that they are ALL returned (not necessary if you're just returning a single element)\n    \n    plotOutput(outputId = ns(\"plot\")), # step 5.1: wrap outputId in `ns()`\n    \n    sliderInput(inputId = ns(\"year\"), label = \"Select Year\", # step 5.2: wrap inputId in `ns()`\n                value = 1952, min = 1952, max = 2007, step = 5,  \n                animate = animationOptions(interval = 500))\n    \n  ) # END taglist\n  \n} # END gapModuleUI function"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#ns",
    "href": "course-materials/slides/part6.2-modules-slides.html#ns",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A note on ns()\n\n\nWrapping our input and output Ids in ns() will create unique Ids each time our module is called , preventing things from overwriting one one another. For example:\n\n\nIf we call gapModuleUI(id = \"myFirstModuleCall\"):\n\noutputId will be set to myFirstModuleCall-plot\ninputId will be set to myFirstModuleCall-year\n\n\n\n\nCalling our module a second time (e.g. gapModuleUI(id = \"mySecondModuleCall\")):\n\noutputId will be set to mySecondModuleCall-plot\ninputId will be set to mySecondModuleCall-year"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#server-function1",
    "href": "course-materials/slides/part6.2-modules-slides.html#server-function1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Breaking down the Server function:\n\nThe server part of a module looks very similar to a normal (i.e. non-modular) Shiny app server function.\n\n(1) Begin by defining your module server function name (e.g. gapModuleServer) and provide it with the first required parameter, id, along with any other necessary parameters (we also need to pass our particular function a data parameter to differentiate between data subsets (e.g. All vs. Africa vs. Asia etc.)).\n\n\n(2) Next, call moduleServer() inside your server function and pass it the id variable, along with the module function. The module function must have three parameters: input, output, and session. You do not have to use ns() to refer to inputs and outputs here. Copy server code from our original app, plop it inside the module function, and substitute in our data parameter wherever a data frame subset is called.\n\n\n\nSee code on the following slide"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#server-function2",
    "href": "course-materials/slides/part6.2-modules-slides.html#server-function2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Breaking down the Server function:\n\n\n\n\n\n~/modularized-app/R/gapModule.R\n\n# step 1: a good function naming convention is a descriptive base name, suffixed by `Server`\n\ngapModuleServer &lt;- function(id, data) { # step 2: the first argument to a server function should always be `id`, followed by any other necessary arguments; here we include a 'data' parameter, since we need to be able to tell our server function which data subset to plot in each tab\n  \n  moduleServer(id, function(input, output, session) { # step 3: call `moduleServer()`, and pass it two things -- (a) a string id that corresponds with the id used to call the module's UI function, and (b) a module server function (this MUST use the three arguments: input, output, and session)\n    \n    # step 4: copy server logic into the module function (only need to do this ONCE, not 6x); update inputIds (now 'year', rather than 'all_year' etc.) & sub in 'data' parameter for hard-coded data subsets\n    \n    # creactive df to collect one year of data ----\n    ydata &lt;- reactive({\n      filter(data, year == input$year)\n    }) # END reactive df\n    \n    # set slider range ----\n    xrange &lt;- range(data$gdpPercap)\n    yrange &lt;- range(data$lifeExp)\n    \n    # render plot (NOTE: plotting with base R, so this looks a bit different than you may be used to) -----\n    output$plot &lt;- renderPlot({\n      \n      # draw background plot with legend\n      plot(data$gdpPercap, data$lifeExp, type = \"n\", \n           xlab = \"GDP per capita\", ylab = \"Life Expectancy\", \n           panel.first = {\n             grid()\n             text(mean(xrange), mean(yrange), input$year, \n                  col = \"grey90\", cex = 5)\n           })\n      \n      # build legend\n      legend(\"bottomright\", legend = levels(data$continent), \n             cex = 1.3, inset = 0.01, text.width = diff(xrange)/5,\n             fill = c(\"#E41A1C99\", \"#377EB899\", \"#4DAF4A99\", \n                                 \"#984EA399\", \"#FF7F0099\"))\n                                 \n      # determine bubble colors\n      cols &lt;- c(\"Africa\" = \"#E41A1C99\",\n                \"Americas\" = \"#377EB899\",\n                \"Asia\" = \"#4DAF4A99\",\n                \"Europe\" = \"#984EA399\",\n                \"Oceania\" = \"#FF7F0099\")[ydata()$continent]\n      \n      # add bubbles\n      symbols(ydata()$gdpPercap, ydata()$lifeExp, circles = sqrt(ydata()$pop),\n              bg = cols, inches = 0.5, fg = \"white\", add = TRUE)\n      \n    }) # END renderPlot\n    \n  }) # END moduleServer\n  \n} # END server function"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#using-module-1",
    "href": "course-materials/slides/part6.2-modules-slides.html#using-module-1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Now let’s use our module:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, let’s use our module’s UI function. We’ll need to define / name each of our tabPanels (one for each of our six regions), but rather than building a plotOutput and sliderInput inside each tabPanel (each with unique Ids), we can instead call our gapModuleUI() function, and ensure that each time we call it to supply a unique character string for our id parameter.\n\n\n\n\n~/modularized-app/app.R\n\n#..............................setup.............................\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(gapminder) \n\n# Note: This code creates data sets to use in each tab.\n# It removes Kuwait since Kuwait distorts the gdp scale\nall_data &lt;- filter(gapminder, country != \"Kuwait\")\nafrica_data &lt;- filter(gapminder, continent == \"Africa\")\namericas_data &lt;- filter(gapminder, continent == \"Americas\")\nasia_data &lt;- filter(gapminder, continent == \"Asia\", country != \"Kuwait\")\neurope_data &lt;- filter(gapminder, continent == \"Europe\")\noceania_data &lt;- filter(gapminder, continent == \"Oceania\")\n\n#...............................ui...............................\nui &lt;- fluidPage(\n  \n  # app title ----\n  titlePanel(\"Gapminder\"),\n  \n  # continent tabsetPanel ----\n  tabsetPanel(id = \"continent\", \n              \n              tabPanel(title = \"All\", gapModuleUI(id = \"all\")),\n              tabPanel(title = \"Africa\", gapModuleUI(id = \"africa\")),\n              tabPanel(title = \"Americas\", gapModuleUI(id = \"americas\")),\n              tabPanel(title = \"Asia\", gapModuleUI(id = \"asia\")),\n              tabPanel(title = \"Europe\", gapModuleUI(id = \"europe\")),\n              tabPanel(title = \"Oceania\", gapModuleUI(id = \"oceania\"))\n              \n  ) # END continent tabsetPanel\n  \n) # END fluidPage"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#using-module-3",
    "href": "course-materials/slides/part6.2-modules-slides.html#using-module-3",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Now let’s use our module:\n\n\nFinally, we can re-write our server. Rather than writing out the lengthy code required to make each plot six times over, we can instead call our gapModuleServer() function, supplying each call with ids that match those used in gapModuleUI(), along with the appropriate data subset. Now, run your app! If written correctly, your app should run exactly the same as your initial version.\n\n\n\n\n~/modularized-app/app.R\n\n#..............................setup.............................\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(gapminder) \n\n# Note: This code creates data sets to use in each tab.\n# It removes Kuwait since Kuwait distorts the gdp scale\nall_data &lt;- filter(gapminder, country != \"Kuwait\")\nafrica_data &lt;- filter(gapminder, continent == \"Africa\")\namericas_data &lt;- filter(gapminder, continent == \"Americas\")\nasia_data &lt;- filter(gapminder, continent == \"Asia\", country != \"Kuwait\")\neurope_data &lt;- filter(gapminder, continent == \"Europe\")\noceania_data &lt;- filter(gapminder, continent == \"Oceania\")\n\n#...............................ui...............................\nui &lt;- fluidPage(\n  \n  # app title ----\n  titlePanel(\"Gapminder\"),\n  \n  # continent tabsetPanel ----\n  tabsetPanel(id = \"continent\", \n              \n              tabPanel(title = \"All\", gapModuleUI(id = \"all\")),\n              tabPanel(title = \"Africa\", gapModuleUI(id = \"africa\")),\n              tabPanel(title = \"Americas\", gapModuleUI(id = \"americas\")),\n              tabPanel(title = \"Asia\", gapModuleUI(id = \"asia\")),\n              tabPanel(title = \"Europe\", gapModuleUI(id = \"europe\")),\n              tabPanel(title = \"Oceania\", gapModuleUI(id = \"oceania\"))\n              \n  ) # END continent tabsetPanel\n  \n) # END fluidPage\n\n#.............................server.............................\nserver &lt;- function(input, output) {\n  \n  gapModuleServer(id = \"all\", data = all_data)\n  gapModuleServer(id = \"africa\", data = africa_data)\n  gapModuleServer(id = \"americas\", data = americas_data)\n  gapModuleServer(id = \"asia\", data = asia_data)\n  gapModuleServer(id = \"europe\", data = europe_data)\n  gapModuleServer(id = \"oceania\", data = oceania_data)\n\n} # END server\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#module-resources",
    "href": "course-materials/slides/part6.2-modules-slides.html#module-resources",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Additional module resources\n\n  \n\nWe’ve barely scratched the surface of modules!\n\n\n\nContinue your learning journey’s with suggested readings and videos on the resources page."
  },
  {
    "objectID": "course-materials/slides/part6.2-modules-slides.html#end",
    "href": "course-materials/slides/part6.2-modules-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 6.2\n\n\nUp next: wrap up\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#title-slide",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 2.3\nDeploying apps + improving UX"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploying-apps",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploying-apps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Deploying apps with shinyapps.io\n\n\nSharing your Shiny app with others isn’t so easy when it just lives on your computer (and your R session has to act as the server that powers it). We’ll now learn how to host your app using shinyapps.io, a free service for sharing your Shiny apps online."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-account",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-account",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Connect your shinyapps.io account to RStudio\n\n\nGo to shinyapps.io and login or create an account (if you don’t already have one) – I recommend creating your account and logging in using GitHub. To use shinyapps.io, you first need to link your account with RStudio on your computer. Follow the instructions on shinyapps.io when you first create your account to install the {rsconnect} package and authorize your account:"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploy-app",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploy-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Deploy your app to shinyapps.io\n\n\nOnce your account has been authorized, run rsconnect::deployApp(\"&lt;app_directory_name&gt;\") in your console to deploy your app to shinyapps.io. Here, we’ll run rsconnect::deployApp(\"two-file-app\") to deploy the app we’ve been working on.\n\n\nOnce deployed, a browser will open to your application. The URL will take the form: https://username.shinyapps.io/your_app_directory_name. You should also now see an /rsconnect folder within your app’s directory – this is generated when an application bundle is successfully deployed and contains a DCF file with information on the deployed content (i.e. the name, title, server address, account, URL, and time). This /rsconnect folder should be added and committed into version control (i.e. push it to GitHub!) so that future re-deployments target the same endpoint (i.e. your app’s URL)."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-dashboard",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-dashboard",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The shinyapps.io dashboard\n\n\nYour shinyapps.io dashboard provides tons of information about your application metrics, instance (the virtualized server that your app is hosted on) and worker (a special type of R process that an Application Instance runs to service requests to an application) settings, plan management, and more. The free plan (the plan we’re using here today) allows you to deploy five Shiny apps. You are able to archive and / or delete once-deployed apps to make space for new ones.\n\n\n\nCheck out the shinyapps.io user guide for more information on hosting your apps on shinyapps.io."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#other-hosting-options",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#other-hosting-options",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Other ways to host your Shiny apps\n\n\nshinyapps.io is not the only Shiny app hosting service (though it’s the easiest to get started with and the only one we’ll be covering in detail in this workshop).\n\nPosit also offers the following:\n\n Shiny server is an open source server platform which you can deploy for free on your own hardware. It requires more setup and configuration, but can be used without a fee. The Bren and NCEAS servers are configured with Shiny Server for hosting for some in-house apps.\n\n\n Posit connect is a paid product that provides an advanced suite of services for hosting Shiny apps, Quarto and R Markdown reports, APIs, and more."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#hosting-recommendations",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#hosting-recommendations",
    "title": "EDS 296-1W",
    "section": "",
    "text": "So how should I host my app?\n\n\nThe Bren compute team will work with groups to deploy and maintain apps on in-house servers for up to 6 months after capstone / GP presentations or until they break.\n\n\n\nIf you and / or your client wish to continue using your app after this time, we recommend one of the following two options:\n\n\n\n\n Preferred: Stick with the free tier of shinyapps.io, if you can! This is by far the most straightforward option that requires no server maintenance for you or your client. If your app exceeds the limitations set by the free tier (e.g. requires more active hours, needs more RAM or instances to support high traffic usage, etc.), you / your client have the option to upgrade to a paid tier – there are 5 paid plan types. Check out the shinyapps.io user guide for more information. Consider setting aside your allocated capstone / GP funds to help support a paid shinyapps.io plan.\n\n\n If you have a server-savvy client, they may want to deploy / host your app using their own infrastructure. If your client plans to pursue this option, but does not yet have a their own server configured to do so, we recommend directing them to the online instructions for getting started with Shiny Server. PLEASE NOTE that Bren staff (including the compute team) are unable to provide technical support for clients in server configuration and app deployment / maintenance.\n\n\n\n\nIMPORTANT: Hosting on a server means that shiny applications will be prone to breaking as updates to server software are made. It is important to have an application maintenance plan in place. This may mean identifying who is responsible for maintaining code, or even deciding to decommission applications and archive the code repository when appropriate."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#failed-deployments",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#failed-deployments",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A quick note on failed deployments\n\n\nIt’s not uncommon to encounter a failed deployment or even a successful deployment with broken features. The shinyapps.io log should be the first place you turn to for troubleshooting."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#motivating-ex",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#motivating-ex",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A (recent) motivating example:\n\nI was recently walking through these workshop materials and following my own instructions for building App #2 (two-file-app). While the app seemed to working just fine locally, the deployment wasn’t so happy. . . rather than seeing a trout scatterplot and penguin histogram, a red error message which read, Error: An error has occurred. Check your logs or contact the app author for clarification, appeared instead:"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#check-log",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#check-log",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Check the deployment log!\n\nHeed the error message! After heading over to shinyapps.io deployment log, we (pretty quickly) see the source of the error: Warning: Error in myCustomTheme: could not find function \"myCustomTheme\":"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#missing-theme",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#missing-theme",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Sure enough. . . myCustomTheme() is missing\n\nWhile I’m not sure exactly how myCustomTheme() disappeared from global.R – it’s possible I accidentally deleted it, but had it stored in my global environment so that my app still ran fine locally – adding it back in, then redeploying lead to a fully functioning, deployed application:"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#improving-app2",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#improving-app2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Improving user experience\n\n\nOur two-file-app is looking pretty good! It’s functional and deployed via shinyapps.io. Next, we’ll focus on making some minor tweaks that can help to improve usability"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#LO-app2v2",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#LO-app2v2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app, updated)\n\n\nBy the end of this section, you should:\n\n\n\n understand how to provide users with helpful error messages using validate()\n\n\n\n\n know how to add customizable loading animations to alert users when reactive objects are re-rendering\n\n\n\n\n know how to add alternate (alt) text to rendered plots\n\n\n\n\n understand how to republish an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\nBox Open {shinycssloaders}: add loading animations to shiny outputs"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#roadmap-app2v2",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#roadmap-app2v2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Roadmap for App #2 (v2)\n\nWe’ll be refining our two-file app with a focus on creating a more user-friendly experience. When finished with v2, we’ll have added:\n\n\n\n\n(a) user-friendly validation error messages that appear when widgets are used to deselect all data\n(b) loading animations for both two reactive plots\n(c) alternate (alt) text for all data visualizations"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#no-guesswork",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#no-guesswork",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Take out any guesswork for your app’s users\n\nIt’s important to remove any possible points of confusion for successfully using your app.\n\nIn version 1 of our published app, you’ll notice that users are able to (1) Deselect All data using the pickerInputs for both the trout and penguin plots, and (2) “uncheck” both clear cut forest and old growth forest sampling section buttons using the checkboxGroupInput. When any of these actions are taken by the user, all data are removed from the plot, leaving a completely blank box behind.\n\n\n \nWhile this response is expected (and normal), we can generate a user-friendly validation error message to provide clear guidance to our users on what is expected by the app in order to display data."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#using-validate",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#using-validate",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Writing validation tests\n\n\nvalidate() tests a condition and returns an error if that conditions fails. It’s used in conjunction with need(), which takes an expression that returns TRUE or FALSE, along with a character string to return if the condition is FALSE.\n\n\nPlace your validation test(s) at the start of any reactive() or render*() expression that calls input$data.\n\n\nFor example, we can add two validation tests inside the reactive that generates our trout_filtered_df – we’ll need two separate validation tests, one for each of our inputs where users can deselect all data.\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\"),\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n  \n    # ~ additional code omitted for brevity ~\n}"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-prompt-tips",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-prompt-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "&  Exercise 4: Add a validation test for your penguin histogram\n\n\nTo Do:\n Construct a validation test that displays a clear but succinct message when a user deselects all islands using the pickerWidget\n\nTips:\n Despite having two inputs, we only need one validation test for our Penguins plot. Why is this?\n \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-solution",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 4: A solution\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\"),\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    validate(\n      need(length(input$penguin_island_input) &gt; 0, \"Please select at least one island to visualize data for.\")\n    )\n\n    penguins %&gt;%\n      filter(island %in% input$penguin_island_input)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram_output &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num) +\n      scale_fill_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme()\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#loading-animations",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#loading-animations",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add loading animations to re-rendering outputs\n\n\nThe {shinycssloaders} package makes it easy to add visual indicators to outputs as they’re loading or re-rendering. This can be particularly helpful if you have outputs that take more than a second or so to render – it alerts users that their updated inputs were recognized and that the app is working to re-render outputs.\n\n\nCheck out the demo app to start designing your own “spinner” (choose style, color, size).\n\n\nWe can pipe the withSpinner() function directly into our plotOutputs in ui.R (be sure to load the package in global.R first) – here, we define the spinner color and style (there are 8 different spinner types to choose from) and adjust the size of the penguin plot spinner.\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\nplotOutput(outputId = \"trout_scatterplot\") |&gt; \n  shinycssloaders::withSpinner(color = \"#006792\", type = 1)\n\nplotOutput(outputId = \"flipperLength_histogram\") |&gt; \n  shinycssloaders::withSpinner(color = \"#4BA4A4\", type = 4, size = 2)"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#include-alt-text",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#include-alt-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Include alt text for all data visualizations\n\n\nAlt text are written descriptions added to images, and importantly, to data visualizations, to help more users understand the content. Assistive technologies (e.g. screen readers) read alt text out loud for users to hear. When alt text is successfully added, the alt tag (along with your text) should appear in the HTML (right click on your app’s data viz to Inspect and ensure that it was added).\n\n\n\n  \n\nWe’ll talk a bit more about alt text later on, but for now we can add alt text easily to our data visuzliations using the alt argument. Place this outside of the {} but inside the () of renderPlot{()}. For example, we can add alt text to our trout and penguin plots in server.R:\n\n\n\n\n\n~/two-file-app/server.R\n\n# render trout scatterplot ----\noutput$trout_scatterplot &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n\n },\n  \n  alt = \"A scatterplot of the relationship between cutthroat trout lengths (mm) and weights (g). Trout tend to be longer, but weigh less in waterways within the old growth forest. Trout tend to be shorter, but weigh more in waterways within the clear cut forest.\"\n  \n) # END render trout scatterplot\n\n\n# render flipperLength hisogram ----\noutput$flipperLength_histogram_output &lt;- renderPlot({\n\n  ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n    geom_histogram(alpha = 0.6, bins = input$bin_num) +\n    scale_fill_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n    labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n         fill = \"Penguin species\") +\n    myCustomTheme()\n    \n },\n  \n  alt = \"A histogram of penguin flipper lengths (mm). Flipper lengths tend to be smallest on Adélie penguins tend to have the smallest flipper lengths and Gentoo have the largest.\"\n  \n) # END render flipperLength histogram"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#see-alt-text",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#see-alt-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Make sure your alt text was successfully added\n\nRight click on your plot &gt; choose Inspect Element &gt; you should see your alt tag and text appear in the developer pane beside your plot."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#redeploying-apps",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#redeploying-apps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Redeploying apps with shinyapps.io\n\n\nNow that we’ve added some updates to our app, it’s time to redeploy our newest version."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#howto-redeploy",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#howto-redeploy",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Redeploying is similar to deploying for the first time\n\n\nJust a few quick steps before your updates are live at your URL from earlier:\n\n\n(1) double check to make sure any required packages are being imported in global.R\n\n\n(2) Rerun rsconnect::deployApp(\"&lt;app-directory-nam\")&gt; in your console and type Y when you see the prompt Update application currently deployed at https://githubUserName.shinyapps.io/yourAppName? [Y/n]\n\n\n(3) Give it a minute (or few) to deploy. Your deployed app will open in a browser window once processed\n\n\n(4) Push all your files (including the /rsconnect directory) to GitHub"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#end-section",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#end-section",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 2.3\n\n\nUp next: building shiny dashboards\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#title-slide",
    "href": "course-materials/slides/part6.1-functions-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 6.1\nFunctions"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#functions",
    "href": "course-materials/slides/part6.1-functions-slides.html#functions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Writing functions\n\n\nFunctions have many benefits and can improve your code base, particularly as your app grows in complexity"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#LO-functions",
    "href": "course-materials/slides/part6.1-functions-slides.html#LO-functions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - Functions\n\n\nBy the end of this section, you should:\n\n\n\n understand the benefits of turning UI elements and server logic into functions\n\n\n\n\n know where to write / save your functions\n\n\n\n\n successfully turn a repeated input into a function\n\n\n\n\n successfully turn a piece of server logic into a function"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#why-functions",
    "href": "course-materials/slides/part6.1-functions-slides.html#why-functions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Why write functions?\n\n\nFunctions are useful for a wide variety of reasons. Most notably:\n\n\n reducing redundancy\n\n\n reducing complexity\n\n\n increasing code comprehension\n\n\n increasing testability"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#storing-functions",
    "href": "course-materials/slides/part6.1-functions-slides.html#storing-functions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Where do I store my function(s)?\n\n\nImportantly, functions can live outside of your app file(s) (i.e. app.R or ui.R / server.R / global.R), helping you to break up / streamline your code. Hadley Wickham recommends creating a folder called /R inside your app’s directory (e.g. ~/&lt;app-directory&gt;/R/...) and:\n\n\n(a) storing larger functions in their own files (e.g. ~/&lt;app-directory&gt;/R/function-name.R) and / or\n\n\n(b) creating a utils.R file (e.g ~/&lt;app-directory&gt;/R/utils.R) to store smaller, simpler functions all in one script.\n\n\n\nYou can source your function files into global.R so that your functions are made available for use throughout your app.\nNOTE: As of Shiny version 1.5.0, any scripts stored in ~/&lt;app-directory&gt;/R/ will be automatically sourced when your application is loaded (meaning you don’t need to source() them into global.R, if you’re running at least Shiny v1.5.0)."
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#app-for-practicing-fxns",
    "href": "course-materials/slides/part6.1-functions-slides.html#app-for-practicing-fxns",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Create a small app for function practice\n\n\nApp previewglobal.Rui.Rserver.R\n\n\n\nAdd the following files (+ code) to a new subdirectory called ~/functions-app/, and check out the resulting app:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~/functions-app/global.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\n\n\n\n\n\n~/functions-app/ui.R\n\nui &lt;- fluidPage(\n  \n  tags$h1(\"Demoing Functions\"),\n  \n  # tabsetPanel ----\n  tabsetPanel(\n    \n    # scatterplot tab ----\n    tabPanel(title = \"Scatterplot\",\n             \n             # species (scatterplot) pickerInput ----\n             pickerInput(inputId = \"penguinSpp_scatterplot_input\", label = \"Select a species:\",\n                         choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         options = pickerOptions(actionsBox = TRUE),\n                         multiple = TRUE),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_scatterplot_output\")\n             \n             ), # END scatterplot tab\n    \n    \n    # histogram tab ----\n    tabPanel(title = \"Histogram\",\n             \n             # species (histogram) pickerInput ----\n             pickerInput(inputId = \"penguinSpp_histogram_input\", label = \"Select a species:\",\n                         choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         options = pickerOptions(actionsBox = TRUE),\n                         multiple = TRUE),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_histogram_output\")\n             \n             ) # END histogram tab\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage\n\n\n\n\n\n\n\n~/functions-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  \n  # filter penguin species (scatterplot) ----\n  filtered_spp_scatterplot_df &lt;- reactive ({\n\n    penguins |&gt;\n      filter(species %in% input$penguinSpp_scatterplot_input)\n\n  })\n\n  \n  # render the scatterplot output ----\n  output$penguin_scatterplot_output &lt;- renderPlot({\n    \n    ggplot(na.omit(filtered_spp_scatterplot_df()),\n           aes(x = bill_length_mm, y = bill_depth_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) + \n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\")\n    \n  })\n  \n  \n  # filter penguin species (histogram) ----\n  filtered_spp_histogram_df &lt;- reactive ({\n    \n    penguins |&gt;\n      filter(species %in% input$penguinSpp_histogram_input)\n    \n  })\n  \n  # render the histogram output ----\n  output$penguin_histogram_output &lt;- renderPlot({\n    \n    ggplot(na.omit(filtered_spp_histogram_df()),\n           aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.5, position = \"identity\") +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\")\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#id-ui-duplication",
    "href": "course-materials/slides/part6.1-functions-slides.html#id-ui-duplication",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Identify code duplication in ui.R\n\nLet’s first focus on the UI – where do we have nearly identically duplicated code?\n\n\n\n\n~/functions-app/ui.R\n\nui &lt;- fluidPage(\n  \n  tags$h1(\"Demoing Functions\"),\n  \n  # tabsetPanel ----\n  tabsetPanel(\n    \n    # scatterplot tab ----\n    tabPanel(title = \"Scatterplot\",\n             \n             # species (scatterplot) pickerInput ----\n             pickerInput(inputId = \"penguinSpp_scatterplot_input\", label = \"Select a species:\",\n                         choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         options = pickerOptions(actionsBox = TRUE),\n                         multiple = TRUE),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_scatterplot_output\")\n             \n             ), # END scatterplot tab\n    \n    \n    # histogram tab ----\n    tabPanel(title = \"Histogram\",\n             \n             # species (histogram) pickerInput ----\n             pickerInput(inputId = \"penguinSpp_histogram_input\", label = \"Select a species:\",\n                         choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                         options = pickerOptions(actionsBox = TRUE),\n                         multiple = TRUE),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_histogram_output\")\n             \n             ) # END histogram tab\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#ui-functions",
    "href": "course-materials/slides/part6.1-functions-slides.html#ui-functions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We can turn these pickerInputs into a function\n\nThis app includes two pickerInputs, both of which allow users to select which penguin species to display data for. The only difference between both pickerInputs is the inputId.\n\n\n# Scatterplot pickerInput for selecting penguin species:\npickerInput(inputId = \"penguinSpp_scatterplot_input\", label = \"Select a species:\",\n            choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n            selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n            options = pickerOptions(actionsBox = TRUE),\n            multiple = TRUE)\n\n# Histogram pickerInput for selecting penguin species:\npickerInput(inputId = \"penguinSpp_histogram_input\", label = \"Select a species:\",\n            choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n            selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n            options = pickerOptions(actionsBox = TRUE),\n            multiple = TRUE)\n\n\n\n\nLet’s write a function for our penguin species pickerInput that we can use in place of these two, rather long, chunks of code."
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#write-ui-function",
    "href": "course-materials/slides/part6.1-functions-slides.html#write-ui-function",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Write a function for adding a pickerInput to select for penguin species\n\n\nFirst, create an R/ folder inside your functions-app/ directory, then add a new script to this folder. I’m calling mine penguinSpp-pickerInput.R.\n\n\nSince the only difference between our original two pickerInputs are their inputIds, we can write a function that takes inputId as an argument (Recall that inputIds must be unique within an app, so it makes sense that both of our pickerInputs have different inputIds).\n\n\nOnce written, source() your function script into global.R (if necessary) to make your function available for use in your app.\n\n\npenguinSpp-pickerInput.Rglobal.R\n\n\n\n\n\n~/functions-app/R/penguinSpp-pickerInput.R\n\npenguinSpp_pickerInput &lt;- function(inputId) {\n  pickerInput(inputId = inputId, label = \"Select a species:\",\n              choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n              selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n              options = pickerOptions(actionsBox = TRUE),\n              multiple = TRUE)\n}\n\n\n\n\n\n\n\n~/functions-app/global.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n# IMPORT FUNCTIONS (ONLY IF NECESSARY) ----\nsource(\"R/penguinSpp-pickerInput.R\") # will source automatically with Shiny v1.5.0"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#apply-ui-fxn",
    "href": "course-materials/slides/part6.1-functions-slides.html#apply-ui-fxn",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Apply your function in ui.R\n\n\nFinally, replace your original UI code for building both pickerInputs with our penguinSpp_pickerInput() function, save, and run your app. It should look exactly the same as before!\n\n\n\n\n~/functions-app/ui.R\n\nui &lt;- fluidPage(\n  \n  tags$h1(\"Demoing Functions\"),\n  \n  # tabsetPanel ----\n  tabsetPanel(\n    \n    # scatterplot tab ----\n    tabPanel(title = \"Scatterplot\",\n             \n             # species (scatterplot) pickerInput ---- \n             penguinSpp_pickerInput(inputId = \"penguinSpp_scatterplot_input\"),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_scatterplot_output\")\n             \n             ), # END scatterplot tab\n    \n    \n    # histogram tab ----\n    tabPanel(title = \"Histogram\",\n             \n             # species (histogram) pickerInput ----\n             penguinSpp_pickerInput(inputId = \"penguinSpp_histogram_input\"),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_histogram_output\")\n             \n             ) # END histogram tab\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#ui-fxn-benefits",
    "href": "course-materials/slides/part6.1-functions-slides.html#ui-fxn-benefits",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We reduced code redundancy and increased readability!\n\nSo…what’s the big deal with this??\n\nBy turning our pickerInput code into a function, we:\n(1) reduced ten lines of UI code into two (not only does this make ui.R a bit more manageable to navigate, it also means we can more easily isolate R/penguinSpp-pickerInput.R when troubleshooting)\n(2) made our UI code a bit easier to read (penguinSpp_pickerInput() tells a reader / collaborator / future you exactly what that line of code is meant to do, which is to create a pickerInput that allows users to select penguin species. Even without code comments or additional context, one may deduce what that line of code does)"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#server-fxns",
    "href": "course-materials/slides/part6.1-functions-slides.html#server-fxns",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Identify where we can streamline our server\n\n\nNext, let’s see where we can streamline our server code using functions. We have two discrete sections of code – (1) a reactive data frame and scatterplot output and (2) a reactive data frame and histogram output.\n\n\n\n\n~/functions-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  \n  # filter penguin species (scatterplot) ----\n  filtered_spp_scatterplot_df &lt;- reactive ({\n\n    penguins |&gt;\n      filter(species %in% input$penguinSpp_scatterplot_input)\n\n  })\n\n  \n  # render the scatterplot output ----\n  output$penguin_scatterplot_output &lt;- renderPlot({\n    \n    ggplot(na.omit(filtered_spp_scatterplot_df()),\n           aes(x = bill_length_mm, y = bill_depth_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) + \n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\")\n    \n  })\n  \n  \n  # filter penguin species (histogram) ----\n  filtered_spp_histogram_df &lt;- reactive ({\n    \n    penguins |&gt;\n      filter(species %in% input$penguinSpp_histogram_input)\n    \n  })\n  \n  # render the histogram output ----\n  output$penguin_histogram_output &lt;- renderPlot({\n    \n    ggplot(na.omit(filtered_spp_histogram_df()),\n           aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.5, position = \"identity\") +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\")\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#build-penguin-scatterplot-fxn",
    "href": "course-materials/slides/part6.1-functions-slides.html#build-penguin-scatterplot-fxn",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Create a function to build our scatterplot\n\nThe goal of this function is to filter the penguins data based on the user input and render our ggplot scatterplot. To start, I’m going to cut / paste both the code to generate the reactive filtered_spp_scatterplot_df data frame and the renderPlot() code from server.R into our build_penguin_scatterplot() function.\n\n\n\n~/functions-app/R/build-penguin-scatterplot.R\n\nbuild_penguin_scatterplot &lt;- function(input) {\n  \n  # filter penguin species (scatterplot) ----\n  filtered_spp_scatterplot_df &lt;- reactive ({\n\n    penguins |&gt;\n      filter(species %in% input$penguinSpp_scatterplot_input)\n\n  })\n\n  \n  # render the scatterplot output ----\n  renderPlot({\n    \n    ggplot(na.omit(filtered_spp_scatterplot_df()),\n           aes(x = bill_length_mm, y = bill_depth_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) + \n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\")\n    \n  })\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#input-server",
    "href": "course-materials/slides/part6.1-functions-slides.html#input-server",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A note on the function argument, input\n\nImportant: In isolation, our function does not know about the user input (input is not in our global environment, it’s only known within the server() function). Therefore, we must pass input as an argument to our function. This makes any user-supplied inputs from the UI available to our function, build_penguin_scatterplot(), so that we can successfully filter the penguins data.\n\n\n\n\n~/functions-app/R/build-penguin-scatterplot.R\n\nbuild_penguin_scatterplot &lt;- function(input) {\n  \n  # ~ body of function omitted for brevity ~\n  \n}\n\n\n\nAlso note that in R, functions return the last executed line – therefore build_penguin_scatterplot() will return the object created by renderPlot() (i.e. our rendered scatterplot)."
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#use-build-penguin-scatterplot-fxn",
    "href": "course-materials/slides/part6.1-functions-slides.html#use-build-penguin-scatterplot-fxn",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Now use your function inside the server\n\n\nRemember, the output of build_penguin_scatterplot() is renderPlot(), which is used to build our reactive scatterplot. Following our rules for creating reactivity, we need to save our function’s output to output$penguin_scatterplot. In doing so, we reduced 23 lines of code to 1 inside our server function.\n\n\n\n\n~/functions-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  \n  # filter data & create penguin scatterplot ----\n  output$penguin_scatterplot_output &lt;- build_penguin_scatterplot(input)\n  \n  \n  # filter penguin species (histogram) ----\n  filtered_spp_histogram_df &lt;- reactive ({\n    \n    penguins |&gt;\n      filter(species %in% input$penguinSpp_histogram_input)\n    \n  })\n  \n  # render the histogram output ----\n  output$penguin_histogram_output &lt;- renderPlot({\n    \n    ggplot(na.omit(filtered_spp_histogram_df()),\n           aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.5, position = \"identity\") +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\")\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#build-penguin-histogram_fxn",
    "href": "course-materials/slides/part6.1-functions-slides.html#build-penguin-histogram_fxn",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Build a function to create our histogram\n\n\nWe can repeat a similar process to create a function for building our histogram:\n\n\nbuild-penguin-histogram.Rserver.R\n\n\n\n\n\n~/functions-app/R/build-penguin-histogram.R\n\nbuild_penguin_histogram &lt;- function(input) {\n  \n  # filter penguin spp ----\n  filtered_spp_histogram_df &lt;- reactive ({\n    \n    penguins |&gt;\n      filter(species %in% input$penguinSpp_histogram_input)\n    \n  })\n  \n  # render histogram ----\n  renderPlot({\n   \n    ggplot(na.omit(filtered_spp_histogram_df()), \n           aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.5, position = \"identity\") +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\")\n    \n  })\n  \n}\n\n\n\n\n\n\n\n~/functions-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter data & create penguin scatterplot ----\n  output$penguin_scatterplot_output &lt;- build_penguin_scatterplot(input)\n  \n  # filter data & create penguin histogram ----\n  output$penguin_histogram_output &lt;- build_penguin_histogram(input)\n\n} # END server"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#final-code1",
    "href": "course-materials/slides/part6.1-functions-slides.html#final-code1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Final code (1/3)\n\nRun your updated app to ensure it works as expected. Your final code should look like this:\n\nglobal.Rui.Rserver.R\n\n\n\n\n\n~/functions-app/global.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\n\n\n\n\n\n~/functions-app/ui.R\n\nui &lt;- fluidPage(\n  \n  tags$h1(\"Demoing Functions\"),\n  \n  # tabsetPanel ----\n  tabsetPanel(\n    \n    # scatterplot tab ----\n    tabPanel(title = \"Scatterplot\",\n             \n             # species (scatterplot) pickerInput ---- \n             penguinSpp_pickerInput(inputId = \"penguinSpp_scatterplot_input\"),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_scatterplot_output\")\n             \n             ), # END scatterplot tab\n    \n    \n    # histogram tab ----\n    tabPanel(title = \"Histogram\",\n             \n             # species (histogram) pickerInput ----\n             penguinSpp_pickerInput(inputId = \"penguinSpp_histogram_input\"),\n             \n             # scatterplot output ----\n             plotOutput(outputId = \"penguin_histogram_output\")\n             \n             ) # END histogram tab\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage\n\n\n\n\n\n\n\n~/functions-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter data & create penguin scatterplot ----\n  output$penguin_scatterplot_output &lt;- build_penguin_scatterplot(input)\n  \n  # filter data & create penguin histogram ----\n  output$penguin_histogram_output &lt;- build_penguin_histogram(input)\n\n} # END server"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#final-code2",
    "href": "course-materials/slides/part6.1-functions-slides.html#final-code2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Final code (2/3)\n\npenguinSpp-pickerInput.R\n\n\n\n~/functions-app/R/penguinSpp-pickerInput.R\n\npenguinSpp_pickerInput &lt;- function(inputId) {\n  pickerInput(inputId = inputId, label = \"Select a species:\",\n              choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n              selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n              options = pickerOptions(actionsBox = TRUE),\n              multiple = TRUE)\n}"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#final-code3",
    "href": "course-materials/slides/part6.1-functions-slides.html#final-code3",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Final code (3/3)\n\n\nbuild-penguin-scatterplot.Rbuild-penguin-histogram.R\n\n\n\n\n\n~/functions-app/R/build-penguin-scatterplot.R\n\nbuild_penguin_scatterplot &lt;- function(input) {\n  \n  # filter penguin species (scatterplot) ----\n  filtered_spp_scatterplot_df &lt;- reactive ({\n\n    penguins |&gt;\n      filter(species %in% input$penguinSpp_scatterplot_input)\n\n  })\n\n  \n  # render the scatterplot output ----\n  renderPlot({\n    \n    ggplot(na.omit(filtered_spp_scatterplot_df()),\n           aes(x = bill_length_mm, y = bill_depth_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) + \n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\")\n    \n  })\n  \n}\n\n\n\n\n\n\n\n~/functions-app/R/build-penguin-histogram.R\n\nbuild_penguin_histogram &lt;- function(input) {\n  \n  # filter penguin spp ----\n  filtered_spp_histogram_df &lt;- reactive ({\n    \n    penguins |&gt;\n      filter(species %in% input$penguinSpp_histogram_input)\n    \n  })\n  \n  # render histogram ----\n  renderPlot({\n   \n    ggplot(na.omit(filtered_spp_histogram_df()), \n           aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.5, position = \"identity\") +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\")\n    \n  })\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part6.1-functions-slides.html#end",
    "href": "course-materials/slides/part6.1-functions-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 6.1\n\n\nUp next: modules\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#improving-app2",
    "href": "course-materials/slides/part2.3B.html#improving-app2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Improving user experience\n\n\nOur two-file-app is looking pretty good! It’s functional and deployed via shinyapps.io. Next, we’ll focus on making some minor tweaks that can help to improve usability"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#LO-app2v2",
    "href": "course-materials/slides/part2.3B.html#LO-app2v2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app, updated)\n\n\nBy the end of this section, you should:\n\n\n\n understand how to provide users with helpful error messages using validate()\n\n\n\n\n know how to add customizable loading animations to alert users when reactive objects are re-rendering\n\n\n\n\n know how to add alternate (alt) text to rendered plots\n\n\n\n\n understand how to republish an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\nBox Open {shinycssloaders}: add loading animations to shiny outputs"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#roadmap-app2v2",
    "href": "course-materials/slides/part2.3B.html#roadmap-app2v2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Roadmap for App #2 (v2)\n\nWe’ll be refining our two-file app with a focus on creating a more user-friendly experience. When finished with v2, we’ll have added:\n\n\n\n\n(a) user-friendly validation error messages that appear when widgets are used to deselect all data\n(b) loading animations for both two reactive plots\n(c) alternate (alt) text for all data visualizations"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#no-guesswork",
    "href": "course-materials/slides/part2.3B.html#no-guesswork",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Take out any guesswork for your app’s users\n\nIt’s important to remove any possible points of confusion for successfully using your app.\n\nIn version 1 of our published app, you’ll notice that users are able to (1) Deselect All data using the pickerInputs for both the trout and penguin plots, and (2) “uncheck” both clear cut forest and old growth forest sampling section buttons using the checkboxGroupInput. When any of these actions are taken by the user, all data are removed from the plot, leaving a completely blank box behind.\n\n\n \nWhile this response is expected (and normal), we can generate a user-friendly validation error message to provide clear guidance to our users on what is expected by the app in order to display data."
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#using-validate",
    "href": "course-materials/slides/part2.3B.html#using-validate",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Writing validation tests\n\n\nvalidate() tests a condition and returns an error if that conditions fails. It’s used in conjunction with need(), which takes an expression that returns TRUE or FALSE, along with a character string to return if the condition is FALSE.\n\n\nPlace your validation test(s) at the start of any reactive() or render*() expression that calls input$data.\n\n\nFor example, we can add two validation tests inside the reactive that generates our trout_filtered_df – we’ll need two separate validation tests, one for each of our inputs where users can deselect all data.\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\"),\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n  \n    # ~ additional code omitted for brevity ~\n}"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#exercise4-prompt-tips",
    "href": "course-materials/slides/part2.3B.html#exercise4-prompt-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "&  Exercise 4: Add a validation test for your penguin histogram\n\n\nTo Do:\n Construct a validation test that displays a clear but succinct message when a user deselects all islands using the pickerWidget\n\nTips:\n Despite having two inputs, we only need one validation test for our Penguins plot. Why is this?\n \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#exercise4-solution",
    "href": "course-materials/slides/part2.3B.html#exercise4-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 4: A solution\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\"),\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    validate(\n      need(length(input$penguin_island_input) &gt; 0, \"Please select at least one island to visualize data for.\")\n    )\n\n    penguins %&gt;%\n      filter(island %in% input$penguin_island_input)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram_output &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num) +\n      scale_fill_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme()\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#loading-animations",
    "href": "course-materials/slides/part2.3B.html#loading-animations",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add loading animations to re-rendering outputs\n\n\nThe {shinycssloaders} package makes it easy to add visual indicators to outputs as they’re loading or re-rendering. This can be particularly helpful if you have outputs that take more than a second or so to render – it alerts users that their updated inputs were recognized and that the app is working to re-render outputs.\n\n\nCheck out the demo app to start designing your own “spinner” (choose style, color, size).\n\n\nWe can pipe the withSpinner() function directly into our plotOutputs in ui.R (be sure to load the package in global.R first) – here, we define the spinner color and style (there are 8 different spinner types to choose from) and adjust the size of the penguin plot spinner.\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\nplotOutput(outputId = \"trout_scatterplot\") |&gt; \n  shinycssloaders::withSpinner(color = \"#006792\", type = 1)\n\nplotOutput(outputId = \"flipperLength_histogram\") |&gt; \n  shinycssloaders::withSpinner(color = \"#4BA4A4\", type = 4, size = 2)"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#include-alt-text",
    "href": "course-materials/slides/part2.3B.html#include-alt-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Include alt text for all data visualizations\n\n\nAlt text are written descriptions added to images, and importantly, to data visualizations, to help more users understand the content. Assistive technologies (e.g. screen readers) read alt text out loud for users to hear. When alt text is successfully added, the alt tag (along with your text) should appear in the HTML (right click on your app’s data viz to Inspect and ensure that it was added).\n\n\n\n  \n\nWe’ll talk a bit more about alt text later on, but for now we can add alt text easily to our data visuzliations using the alt argument. Place this outside of the {} but inside the () of renderPlot{()}. For example, we can add alt text to our trout and penguin plots in server.R:\n\n\n\n\n\n~/two-file-app/server.R\n\n# render trout scatterplot ----\noutput$trout_scatterplot &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n\n },\n  \n  alt = \"A scatterplot of the relationship between cutthroat trout lengths (mm) and weights (g). Trout tend to be longer, but weigh less in waterways within the old growth forest. Trout tend to be shorter, but weigh more in waterways within the clear cut forest.\"\n  \n) # END render trout scatterplot\n\n\n# render flipperLength hisogram ----\noutput$flipperLength_histogram_output &lt;- renderPlot({\n\n  ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n    geom_histogram(alpha = 0.6, bins = input$bin_num) +\n    scale_fill_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n    labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n         fill = \"Penguin species\") +\n    myCustomTheme()\n    \n },\n  \n  alt = \"A histogram of penguin flipper lengths (mm). Flipper lengths tend to be smallest on Adélie penguins tend to have the smallest flipper lengths and Gentoo have the largest.\"\n  \n) # END render flipperLength histogram"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#see-alt-text",
    "href": "course-materials/slides/part2.3B.html#see-alt-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Make sure your alt text was successfully added\n\nRight click on your plot &gt; choose Inspect Element &gt; you should see your alt tag and text appear in the developer pane beside your plot."
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#title-slide",
    "href": "course-materials/slides/part5-ux-ui-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 5\nUser-centered design"
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#UX-UI",
    "href": "course-materials/slides/part5-ux-ui-slides.html#UX-UI",
    "title": "EDS 296-1W",
    "section": "",
    "text": "UX/UI matters\n\n\nWhen designing your app, it’s critically important that you consider your user’s needs and how they will interact with your app – it doesn’t matter how innovative you back-end computations are if people don’t understand how to use your app!"
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#LO-ux-design",
    "href": "course-materials/slides/part5-ux-ui-slides.html#LO-ux-design",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - UX/UI Design\n\n\nBy the end of this section, you should:\n\n\n have a checklist of considerations to reference each time you build an app\n\n\n have a general understanding of what web accessibility means and who it can benefit (spoiler alert: it benefits us all!)\n\n\n know how to make a few small tweaks / updates to your application to make it more accessible for all users"
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#UX-UI-design-tips",
    "href": "course-materials/slides/part5-ux-ui-slides.html#UX-UI-design-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Tips for designing your Shiny apps\n\n\nChapters 6 and 7 of Engineering Production-Grade Shiny Apps, by Colin Fay, Sébastien Rochette, Vincent Guyader, and Cervan Girard provide a list of considerations as you embark on your app-building journey. Some of their suggestions are summarized below, but check out the book for greater detail, examples, and additional considerations:\n\n\n\n Simplicity is gold: using the application shouldn’t require reading a manual, and interfaces should be as self-explanatory as possible.\n\n\n\n\n Adapt a defensive programming mindset: your app should always fail gracefully and informatively (e.g. provide users with a helpful error message)\n\n\n\n\n Build a self-explanatory app: consider the following three suggestions for doing so – (a) remember the rule of least surprise (in UI design, always do the least surprising thing e.g. we often assume that underlined text is clickable, so if you include underlined text in your UI, there’s a good chance a user will try clicking on it). (b) think about progression (design a clear pattern of moving forward for your user), and (c) related to b, make sure that if an input is necessary, it is made clear to your user. Check out the {shinyjs} package for implementing nifty ways to improve the user experience of your shiny apps.\n\n\n\n\n Avoid feature-creep: feature-creep is the process of adding features to an app that complicates its usage and maintenance – this includes adding too much reactivity and too much interactivity (e.g. plotly) – interactivity adds visual noise, so it’s best to not make elements interactive if there is no value is gained."
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#UX-UI-resources",
    "href": "course-materials/slides/part5-ux-ui-slides.html#UX-UI-resources",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Looking for more resources?\n\n     \n\nCheck out the resources page on the course website for some additional books, videos, and articles on designing effective UIs."
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#accessibility",
    "href": "course-materials/slides/part5-ux-ui-slides.html#accessibility",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Building accessible apps\n\n\nConsider web accessibilty guidelines to ensure that your app is usable by all"
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#what-is-accessibility",
    "href": "course-materials/slides/part5-ux-ui-slides.html#what-is-accessibility",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What is web accessibility?\n\n\nFrom the World Wide Web Consortium (W3C)’s Introduction to Web Accessibility:\n\n\n\nWeb accessibility means that websites, tools, and technologies are designed and developed so that people with disabilities can use them. More specifically, people can:\n\n\n perceive, understand, navigate, and interact with the Web\n\n\n contribute to the Web\n\n\n Web accessibility encompasses all disabilities that affect access to the Web, including: auditory, cognitive, neurological, physical, speech, and visual\n\n\n Web accessibility also benefits people without disabilities, for example:\n\n\n people using mobile phones, smart watches, smart TVs, and other devices with small screens, different input modes, etc.\n\n\n older people with changing abilities due to ageing\n\n\n people with “temporary disabilities” such as a broken arm or lost glasses\n\n\n people with “situational limitations” such as in bright sunlight or in an environment where they cannot listen to audio\n\n\n people using a slow Internet connection, or who have limited or expensive bandwidth\n\n\n\nCheck out the A11Y Project for lots of great tutorials and information about web accessibility."
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#small-steps",
    "href": "course-materials/slides/part5-ux-ui-slides.html#small-steps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Small changes can lead to tangible increases in functionality for all users\n\n\nEnsuring that your shiny apps are accessible can feel overwhelming – but considering even a few small changes can have a large impact on user experience.\n\n\nThe following suggestions have been borrowed and adapted from Ch. 6.3 - Web Accessibility from Engineering Production-Grade Shiny Apps, by Colin Fay, Sèbastien Rochette, Vincent Guyader, & Cervan Girard:\n\n\n\n \n\n Use HTML elements appropriately (e.g. consider hierarchy)\n\n\n Include alt text for graphical elements\n\n\n Consider navigation from a mobility perspective\n\n\n Use colorblind-friendly palettes\n\n\n\n\n\n\n\n\n\n\n\n\nImage Source: Accessibility Stack"
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#hierarchy",
    "href": "course-materials/slides/part5-ux-ui-slides.html#hierarchy",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Use HTML elements appropriately\n\n\nScreen readers use HTML elements to understand web page organization. Header elements create hierarchy within a webpage and are used by screen readers (i.e. devices used by those with visual impairments) to understand a page’s organizational structure. An &lt;h1&gt; element is more important (hierarchically speaking) than an &lt;h2&gt;, which is more important than an &lt;h3&gt;, and so on.\n\n\n\n\n\n# load packages ----\nlibrary(shiny)\n\n# user interface ----\nui &lt;- fluidPage(\n  tags$h1(\"This is my app's title\"),\n  \n  tags$h2(\"Section 1\"),\n  \n  tags$h3(\"Sub-section a\"),\n  \n  tags$h3(\"Sub-section b\"),\n  \n  tags$h3(\"Sub-section c\"),\n  \n  tags$h2(\"Section 2\"),\n)\n\n# server instructions ----\nserver &lt;- function(input, output) {}\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)\n\n\nIdeally, you would only have one &lt;h1&gt; element (e.g. your app’s title), a small number of &lt;h2&gt; elements, more &lt;h3&gt; elements, and so on. See the minimal example, to the left.\n\nYou should not rely on headers for styling purposes – for example, you should not use a level-one header elsewhere in your app just because you want larger text. Instead, use CSS to increase text size (refer to the Customizing Quarto Websites workshop for instruction on how to construct CSS selectors for styling HTML elements)."
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#alt-text",
    "href": "course-materials/slides/part5-ux-ui-slides.html#alt-text",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Include alt text with all graphical elements\n\n\nAll images and graphical elements should include alternative (alt) text that describe the image and / or information being represented. This text won’t appear in the UI, but is detected and read by screen readers.\n\n\n\nInclude the alt argument (similar to adding the alt attribute to an HTML element) when using renderPlot() to add alt text to your reactive plots – the alt argument lives outside of the {} but inside the (). For example:\n\n\n# in your server\nrenderPlot({\n\n    ggplot(data(), aes(x = var1, y = var2)) + \n      geom_point() \n    \n  }, alt = \"Alt text description\"\n  \n  )\n\n\n\n\nSimilarly, use the alt argument within tags$img when adding static images to your app. For example:\n\n\n# in your UI\ntags$img(src = \"file/path/to/img\",\n         width = \"100px\", height = \"100px\",\n         alt = \"Alt text for image\")"
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#alt-text-tips",
    "href": "course-materials/slides/part5-ux-ui-slides.html#alt-text-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Tips on writing alt text for data visualizations\n\n\nA good rule of thumb for writing alt text for data visualizations is alt=“Chart type of type of data where reason for including chart” (see this post by Amy Cesal for more). One example:\n\n\n\nalt=“Bar chart of gun murders per 100,000 people where America’s murder rate is 6 times worse than Canada, and 30 times Australia”\n\n\nFor more great tips on how and when to use alt text, check out this article by the A11Y Project. For examples of how to construct good alt text, take a peek at this resource by Datawrapper."
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#mobility",
    "href": "course-materials/slides/part5-ux-ui-slides.html#mobility",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Consider UI navigation for those with mobility impairments\n\n\nFor users with mobility impairments, using a mouse to navigate a UI packed with widgets may be challenging – some users may even be exclusively using a keyboard to navigate the web.\n\n\nIdeally, actions required of your user can be done using a keyboard (e.g. pressing a button in the UI) – however from a new shiny developer standpoint, this may be technically challenging to implement (the authors of Engineering Production-Grade Shiny Apps suggest the {nter} package for building shiny action buttons that can be triggered by pressing enter, however, at the time of building this workshop, the package source code hadn’t been updated since 2019).\n\n\n\n\n\nAt a minimum, consider spacing out and / or limiting the number of widgets on any given page to make navigation with a mouse as easy as possible."
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#color-palettes",
    "href": "course-materials/slides/part5-ux-ui-slides.html#color-palettes",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Use colorblind-friendly palettes\n\n\nAbout 1 in 12 males and 1 in 200 females have some form of colorblindness (Wikipedia). Ensuring that your color choices are distinguishable from one another and / or providing an additional non-color-based way (e.g. patterns, shapes) of distinguishing between groups is critical.\n\n\n\nThere are lots of great colorblind-accessible palettes and resources (check out this one by Alex Phillips, as well as the {paletteer} package, a near comprehensive collection of all R color palette packages). Using the Let’s get color blind Google Chrome extension can help you quickly assess the accessibility of you visualizations / apps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFour different forms of colorblindness. Image Source: Venngage\n\n\n\n\n\n\n\n\n\n\n\n\nUsing Google Chrome’s Let’s get color blind extension to simulate different types of color blindness"
  },
  {
    "objectID": "course-materials/slides/part5-ux-ui-slides.html#end",
    "href": "course-materials/slides/part5-ux-ui-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 5\n\n\nUp next: debugging & testing\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#title-slide",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 4.2\nStyling apps with CSS & Sass"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#themeing-css-sass",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#themeing-css-sass",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Styling apps with CSS & Sass\n\n\n{bslib} & {fresh} are great ways to get started on your app customization journeys, but knowing some CSS & Sass can help you really fine-tune the appearance of your apps"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#sass-css",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#sass-css",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Using Sass & CSS to style Shiny apps & dashboards\n\n\nYou can write your own stylesheets using CSS and Sass to fully customize your apps, from background colors, to font styles, to size and shape of elements, and more. Unlike {bslib} and {fresh}, these are languages, meaning they can be a bit more challenging to get started with (but the payoff it big!).\n\n\n\n\n\nPros:\n\n\n\n applies to any web page (not just shiny apps / dashboards)\n\n\n allows you to customize pretty much any aspect of your app\n\n\n can be combined with themes generated using {bslib} or {fresh} to fine-tune your app’s styling\n\n\n\n\nCons:\n\n\n\n a steeper learning curve / generally more complex than packages like {bslib} and {fresh}\n\n\n\n\n\n\n\nWe’ll review a little bit about CSS & Sass, then practice writing and applying custom styling to apps and dashboards."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#css-review",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#css-review",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Resources for a deeper dive\n\n\nWe’ll be doing a rather high-level and quick overview of Sass & CSS today, though I encourage you to check out the Customizing Quarto Websites workshop materials, which takes a much deeper dive (the information in that workshop is largely applicable here).\n\n\n\nW3Schools is my favorite online resource for all-things CSS – in addition to really digestible descriptions and examples, they also offer interactive tutorials to get your hands on updating (and breaking) code (in a safe space, of course)."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#what-are-sass-css",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#what-are-sass-css",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What even is CSS? Sass?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCSS (Cascading Style Sheets) is a programming language that allows you to control how HTML elements look (e.g. colors, font styles, etc.) on a webpage.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSass (Syntactically Awesome Stylesheets) is a CSS extension language and CSS preprocessor – meaning Sass needs to be converted (aka compiled) to CSS before it can be interpreted by your web browser."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#css-rule-based",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#css-rule-based",
    "title": "EDS 296-1W",
    "section": "",
    "text": "CSS is a rule-based language\n\n\nCSS is a rule-based language, meaning that it allows you to define groups of styles that should be applied to particular elements or groups of elements on a web page. For example, “I want all level one headings (&lt;h1&gt; or tags$h1(), as written in Shiny) in my app to be green with a bit of extra space between each letter” could be coded as:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Selectors select the HTML element(s) you want to style (e.g. level one headings, &lt;h1&gt;)\n\n\n Declarations sit inside curly brackets, {}, and are made up of property and value pairs. Each pair specifies the property of the HTML element(s) you’re selecting (e.g. the color property of the element &lt;h1&gt;), and a value you’d like to assign to that property (e.g. green)\n\n\n A property and it’s corresponding value are separated by a colon, :. Declarations end with a semicolon, ;\n\n\n\n\nThere are a variety of CSS selectors – check out some of the basics that will take you far in styling your apps, starting on this slide of the Customizing Quarto Websites workshop."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#css-3ways",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#css-3ways",
    "title": "EDS 296-1W",
    "section": "",
    "text": "3 ways to add CSS styling to your apps\n\n\n\n1. tags2. header3. stylesheets (preferred)\n\n\n\nAdd styling directly to tags. It’s best not to use a lot of these! It’s easy to lose track of your “in-line” styling in large projects, you can’t reuse rules easily, it’s hard to keep styling consistent, and it’s difficult to implement large stylistic changes.\n\n\n\n\n#..............................setup.............................\nlibrary(shiny)\n\n#...............................ui...............................\nui &lt;- fluidPage(\n  \n  # text color = purple\n  tags$h1(\"My app title\",\n          style = \"color: #711EBA;\"),\n  \n  # text color = blue; increase space between letters\n  tags$h3(\"Section 1\",\n          style = \"color: #1E4DBA; letter-spacing: 4px;\"),\n  \n  # no styling\n  tags$h3(\"Section 2\"),\n  \n  # increase border thickness and color green; round corners \n  tags$button(\"This is a button\",\n              style = \"border: 2px solid #1EBA38; border-radius: 5px\")\n  \n)\n\n#.............................server.............................\nserver &lt;- function(input, output) {}\n\n#......................combine ui & server.......................\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd CSS rules to your app’s header (tags$head). This is a little bit better than option 1 since it allows for the reuse of rules, however, styles can’t be cached (i.e. saved for future usage when you reopen your app). Note: explore Google fonts and check out this slide for instructions on selecting a font.\n\n\n\n\n#..............................setup.............................\nlibrary(shiny)\n\n#...............................ui...............................\nui &lt;- fluidPage(\n  \n  tags$head(\n    tags$style(\"\n    \n      @import url('https://fonts.googleapis.com/css2?family=Lobster&display=swap');\n    \n      h1 {font-family: 'Lobster', cursive;}\n      \n      h3 {color: blue;}\n      \n      .wide-letters {letter-spacing: 4px;}\n      \n    \"\n    ) # END styles\n  ), # END head\n  \n  tags$h1(\"My app title\"),\n  \n  tags$h3(\"Section 1\"),\n  \n  tags$h3(class = \"wide-letters\", \"Section 2\"),\n  \n  tags$button(\"This is a button\")\n  \n)\n\n#.............................server.............................\nserver &lt;- function(input, output) {}\n\n#......................combine ui & server.......................\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild a stylesheet (a .css file) inside your app’s www/ directory and apply your styles to your app’s header (for shinydashboards, include your header inside dashboardBody(). This is the most ideal approach – it allows for style reuse, caching, and keeps styling contained in one spot. Tip: use touch styles.css in the terminal to create a new .css file.\n\n\n\n\n\n\n~/myApp/app.R\n\n#..............................setup.............................\nlibrary(shiny)\n\n#...............................ui...............................\nui &lt;- fluidPage(\n  \n  tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\")\n  ),\n  \n  tags$h1(\"My app title\"),\n  \n  tags$h3(\"Section 1\"),\n  \n  tags$h3(class = \"wide-letters\", \"Section 2\"),\n  \n  tags$button(\"This is a button\")\n  \n)\n\n#.............................server.............................\nserver &lt;- function(input, output) {}\n\n#......................combine ui & server.......................\nshinyApp(ui, server)\n\n\n\n\n\n\n~/myApp/www/styles.css\n\n/*import google fonts (Josephine Slab (serif) & Heebo (sans serfi))*/\n@import url('https://fonts.googleapis.com/css2?family=Heebo:wght@300&family=Josefin+Slab:wght@300&display=swap');\n\n/* element selectors */\nh1 {\n  font-family: 'Heebo', sans-serif;\n  color: #179A1F; /* green */\n}\n\nh3 {\n  font-family: 'Josefin Slab', serif;\n  color: #CA781C; /* orange */\n}\n\nbutton {\n  background-color: #FCF982; /* yellow */\n}\n\n\n/* class selectors */\n.wide-letters {\n  letter-spacing: 4px;\n}"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#dashboard-practice-css",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#dashboard-practice-css",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Let’s practice on a small dashboard first:\n\n\ndashboardui.Rserver.Rglobal.R\n\n\nCreate a new subdirectory called css-dashboard/, and add the following ui.R, server.R, and global.R files.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~/css-dashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Penguin Dashboard\"\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            # fluidRow ----\n            fluidRow(\n              \n              # input box ----\n              box(width = 4,\n                  \n                  checkboxGroupInput(\n                    inputId = \"penguin_species\",\n                    label = \"Filter by species: \",\n                    choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                    selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n                    \n                  ) # END checkboxGroupInput\n                  \n              ), # END input box\n              \n              # output box ----\n              box(width = 8,\n                  \n                  plotOutput(outputId = \"penguin_plot\")\n                  \n              ) # END output box\n              \n            ), # END fluidRow\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\n~/css-dashboard/server.R\n\nserver &lt;- function(input, output) {\n  \n  # penguin spp reactive df----\n  penguin_spp &lt;- reactive({\n    \n    na.omit(penguins) |&gt; \n      filter(species %in% input$penguin_species) |&gt; \n      select(species, island, bill_length_mm, bill_depth_mm)\n    \n  }) # END penguin spp reactive df\n  \n  \n  # plot ----\n  output$penguin_plot &lt;- renderPlot({\n    \n    ggplot(penguin_spp(), aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n      geom_point() + \n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\"))\n    \n  }) # END plot \n  \n}\n\n\n\n\n\n\n\n~/css-dashboard/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#inspect-webpages",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#inspect-webpages",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What if I want to style an element, but don’t know how to target it?\n\n\nOftentimes, you’ll have to do a bit of exploration to determine how to target specific elements for styling. In either your app viewer or web browser, right click on an element of interest &gt; choose Inspect (or Inspect Element) to open up the underlying HTML and CSS. You can make temporary edits to your app (e.g. adding a background color, changing font sizes, etc.) to see how they look first, then copy the appropriate CSS rule into your stylesheet to apply to your app."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#inspect-dashboard1",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#inspect-dashboard1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Inspect & identify how to update box styling\n\n\nFor example, let’s say I want to change the color of this shinydashboard’s boxes and the color of the box text (find a gif of these steps on the next slide).\n\n\n\nDetermine which type of HTML element creates our box\n\n\nright click on the box &gt; choose Inspect Element to pull up the HTML and CSS files underlying the app\nhover over different parts of the HTML to highlight different elements in the UI\n\n\n\nThe box is highlighted when I hover over &lt;div class=\"box-body\"&gt; – this tells me that boxes are formed using the &lt;div&gt; HTML element and they’re assigned a class called box-body.\n\n\n\n(Temporarily) adjust the CSS rules that style these boxes to see how they work\n\n\nin the CSS file (for me, that’s located in the bottom half of the developer pane), find the .body-body class selector\nadd property / value pairs and / or update existing property values to adjust the appearance of the box\n\nnote: changing the .box-body class selector updates both boxes (if you inspect the box containing the plot, you’ll notice that it also has the class .box-body, so any changes will apply to both)\n\n\n\n\nThis process is purely for testing purposes – refreshing your app will remove any of these changes."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#inspect-dashboard2",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#inspect-dashboard2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Inspect & identify how to update box styling"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#write-box-css",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#write-box-css",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Finally, apply box styling to our dashboard\n\n\nNow that we know that we can use the .box-body class to customize the appearance of our boxes, let’s create a stylesheet inside our www/ folder and add our new CSS rule. The shinydashboard framework already provides the “standard” styling for boxes, contained in the .box-body class. Anything we specify in our own stylesheet will build upon or modify existing styling.\n\n\nRemember to create a header and link your stylesheet within dashboardBody() to apply our styles.\n\n\nOur updated shinydashboardstyles.cssui.R\n\n\n\n\n \n\nCheck out the complete code for this small example dashboard.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~/css-dashboard/www/styles.css\n\n.box-body {\n  background-color: #FCAE82; /* light orange */\n  color: #6368C6; /* purple-blue */\n}\n\n\n\n\n\n\n\n~/css-dashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Penguin Dashboard\"\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # link stylesheet\n  tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\"),\n  ),\n  \n  # tabItems ----\n  tabItems(\n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            # fluidRow ----\n            fluidRow(\n              \n              # input box ----\n              box(width = 4,\n                  \n                  checkboxGroupInput(\n                    inputId = \"penguin_species\",\n                    label = \"Filter by species: \",\n                    choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                    selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n                    \n                  ) # END checkboxGroupInput\n                  \n              ), # END input box\n              \n              # output box ----\n              box(width = 8,\n                  \n                  plotOutput(outputId = \"penguin_plot\")\n                  \n              ) # END output box\n              \n            ), # END fluidRow\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#what-about-sass",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#what-about-sass",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What about Sass?\n\n\nOkay, we wrote and applied some CSS styling to our apps, but what about Sass? You don’t need to write any Sass at all, however, it provides a number of benefits, including helping to reduce repetition.\n\n\nFor example, let’s say you’re working on an app that uses three primary colors throughout:\n\n\n\nYou might imagine how often you’ll need to type those HEX codes out as you developing your stylesheet…it can get annoying rather quickly."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#sass-vars",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#sass-vars",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We can define and reference Sass variables throughout our stylesheet\n\n\nSass allows us to define variables (in the form $var-name: value;) for our colors to reference instead of writing out their HEX codes each time:\n\n\n\n\nexample-stylesheet.scss\n\n// define Sass vars \n\n$darkblue: #053660;\n$teal: #147C91;\n$darkgray: #333333;\n\n// use vars in CSS rules\n\nh1 {\n  color: $darkblue;\n}\n\n.button-styling {\n  background: $teal;\n  color: $darkblue; \n  border-color: $darkgray;\n}\n\n\n\nIf you decide that you actually like a different shade of teal better, you’ll only need to update the hex code where you first define the $teal Sass variable, saving lots of time."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#sass-workflow",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#sass-workflow",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Sass for Shiny workflow\n\n\nTo style apps using both Sass and CSS, you’ll follow this general workflow:\n\n\n(1) Create a .scss file inside ~/myApp/www/ (either through the terminal using the touch command, or using RStudio’s New File &gt; Text File button). Write both your Sass variables and CSS rules in your .scss file (Note: you can write both Sass & CSS in a .scss file, but only CSS in a .css file)\n\n\n(2) Compile (i.e. convert) Sass to CSS in global.R (or, if using a one-file app, at the top of your script before you define your UI) using the the sass() function from the {sass} package – this will generate a .css file that our shiny app can actually use. Be sure to save your .css file to your app’s /www directory.\n\n\n(3) Apply your styles to your app by linking to to your .css file in your app’s header."
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#write-sass",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#write-sass",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Let’s build our Sass file\n\n\nWe’ll practice on our two-file-app – first, remove (or comment out) any reference to your {bslib} or {fresh} themes that we practiced applying earlier so that we’re starting off with just the default shiny styling.\n\n\n\nNext, create a .scss file inside ~/two-file-app/www using either the touch command or New Blank File &gt; Text File (I’m calling mine sass-styles.scss). Finally, add Sass variables and CSS rules to sass-styles.scss:\n\n\n\n\n~/two-file-app/www/sass-styles.scss\n\n// import & define fonts vars\n@import url('https://fonts.googleapis.com/css2?family=Karma&family=Prompt:wght@200&display=swap');\n$font-family-serif: 'Karma', serif;\n$font-family-sans-serif: 'Prompt', sans-serif;\n\n// colors vars\n$green: #8ca376;\n$blue: #525cd1; \n$orange: #E59C5E;\n$yellow: #f0eaa5;\n$white: #f1f7eb;\n\n// css\n\nbody {\n  background-color: $green; \n  color: $white; \n}\n\nh2 {\n  letter-spacing: 5px;\n  font-family: $font-family-serif;\n}\n\nh4 {\n  color: $blue;\n  font-family: $font-family-serif;\n}\n\np {\n  font-family: $font-family-sans-serif;\n}\n\na {\n  color: $orange;\n}\n\n.navbar-default {\n  background-color: $yellow;\n}\n\n.btn.default.active {\n  background-color: $green;\n}"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#convert-sass",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#convert-sass",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Then, compile Sass to CSS\n\n\nBecause web browsers can only interpret CSS (not Sass), we need to compile our Sass to CSS. To do this, we can use the sass() function from the {sass} package. We can do this in global.R. The sass() function requires two arguments: a sass file input and a file path + named .css file output.\n\n\nWe also need to apply our styles to our app by linking this newly-generated .css file in our app’s header.\n\n\nNote: After running your app, you should see a sass-styles.css file appear in www/ – it should look quite familiar, except all of our Sass variables have been converted to CSS.\n\n\nour updated appglobal.Rui.Rsass-styles.css\n\n\n\n\n \n\nCheck out the complete code for App #2 (NOTE: applied themes are commented out).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(sass)\n# ~ additional libraries omitted for brevity ~\n\n# COMPILE CSS ----\nsass(\n  input = sass_file(\"www/sass-styles.scss\"),\n  output = \"www/sass-styles.css\",\n  options = sass_options(output_style = \"compressed\") # OPTIONAL, but speeds up page load time by removing white-space & line-breaks that make css files more human-readable\n)\n\n# ~ additional global.R objects omitted for brevity ~\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\n# navbar page ----\nui &lt;- navbarPage(\n  \n  # add css file ----\n  header = tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"sass-styles.css\")\n  )\n  \n  # ~ additional UI elements omitted for brevity ~\n)\n\n\n\n\n\n\n\n~/two-file-app/www/sass-styles.css\n\n@import url(\"https://fonts.googleapis.com/css2?family=Karma&family=Prompt:wght@200&display=swap\");\nbody {\n  background-color: #8ca376;\n  color: #f1f7eb;\n}\n\nh2 {\n  letter-spacing: 5px;\n  font-family: \"Karma\", serif;\n}\n\nh4 {\n  color: #525cd1;\n  font-family: \"Karma\", serif;\n}\n\np {\n  font-family: \"Prompt\", sans-serif;\n}\n\na {\n  color: #E59C5E;\n}\n\n.navbar-default {\n  background-color: #f0eaa5;\n}\n\n.btn.default.active {\n  background-color: #8ca376;\n}"
  },
  {
    "objectID": "course-materials/slides/part4.2-css-sass-slides.html#end",
    "href": "course-materials/slides/part4.2-css-sass-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 4.2\n\n\nUp next: Improving UX / UI\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#title-slide",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 4.1\nTheming and styling apps with {bslib} & {fresh}"
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#themeing-pkgs",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#themeing-pkgs",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Creating custom themes\n\n\nWe’ve built some really cool apps so far, but they all have a pretty standard and similar appearance. In this section, we’ll explore two packages for creating custom themes for your apps."
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#LO-themeing",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#LO-themeing",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - Themeing/Styling Apps\n\n\nBy the end of this section, you should be equipped with:\n\n\n\n an understanding of how to use packaged-based tooling for themeing and styling your shiny apps and dashboards\n\n\n\n\n\nPackages introduced:\n\n\n\n\n {bslib}: provides tools for customizing Bootstrap themes directly from R for shiny apps and RMarkdowns\n\n\n\n\n {fresh}: provides tools for creating custom themes for use with shiny, shinydashboard, and bs4Dash apps"
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#bslib",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#bslib",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Using the {bslib} package to theme Shiny apps\n\n\nThe {bslib} package provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap, making custom themeing for Shiny apps (and R Markdown docs!) quite easy.\n\n\n\n\n\n\nPros:\n\n\n\n easy to use\n\n\n includes a real-time themeing widget to try out themes before applying them to your own app\n\n\n plays well with the {thematic} package for matching plot styling to app\n\n\n {bslib} does more than just themeing! Read more on their pkgdown site\n\n\n\n\nCons:\n\n\n\n does not work with shinydashboard ({bslib} is only intended for use with shiny apps), though one of the latest releases includes tooling to create and customize dashboard-style shiny apps – check out their vignette for more\n\n\n styling is constrained by the arguments available to bs_theme()\n\n\n\n\n\n\nLet’s practice applying new themes using bslib to our one-file-app (i.e. App #1)"
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#bslib-prebuilt-themes",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#bslib-prebuilt-themes",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Apply a pre-built theme with {bslib}\n\n\nBy default, Shiny uses the Bootstrap v3 theme (which is not so exciting). Change the theme to a slightly more modern Bootstrap v5 theme by setting the theme argument of fluidPage() to bslib::bs_theme(version = 5), or supply bs_theme() with a pre-built bootswatch theme, as shown below (for a list of theme names, run bootswatch_themes() in your console):\n\n\n\n\n\n\n\n~/single-file-app/ui.R\n\nlibrary(shiny)\nlibrary(bslib)\n# ~ additional libraries omitted for brevity ~\n\nui &lt;- fluidPage(\n  \n  theme = bs_theme(bootswatch = \"solar\"),\n  \n  # ~ additional UI code omitted for brevity ~\n  \n)\n\n\n\nCheck out the complete source code for App #1 (NOTE: applied themes are commented out)."
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#bslib-custom-themes",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#bslib-custom-themes",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Create a custom theme with {bslib}\n\n\nAlternatively, you can fully customize your own theme. Explore the bslib pkgdown site for detailed instructions. A small example here:\n\n\n\n\n\n\n~/single-file-app/ui.R\n\nlibrary(shiny)\nlibrary(bslib)\n# ~ additional libraries omitted for brevity ~\n\nui &lt;- fluidPage(\n  \n  theme = bs_theme(\n    bg = \"#A36F6F\", # background color\n    fg = \"#FDF7F7\", # foreground color\n    primary = \"#483132\", # primary accent color\n    base_font = font_google(\"Pacifico\")),\n  \n  # ~ additional UI code omitted for brevity ~\n  \n)\n\n\n\nCheck out the complete source code for App #1 (NOTE: applied themes are commented out).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe sure to check out the interactive themeing widget to test custom color / font / etc. combos by running bs_theme_preview() in your console, or visit the hosted version. You can also call bs_themer() within your server function to open the theme customization UI alongside your own app."
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#thematic",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#thematic",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Use {thematic} to extend your theme to plots\n\n\nYou probably noticed that our scatterplot looks a little silly against the darker background of our themed app. Enter the {thematic} package, which is built to help simplify plot themeing. Call thematic_shiny() before launching your app to generate plots that reflect your application’s bs_theme(). For example:\n\n\n\n\n\n\n~/single-file-app/ui.R\n\nlibrary(shiny)\nlibrary(bslib)\n# ~ additional libraries omitted for brevity ~\n\nthematic::thematic_shiny()\n\nui &lt;- fluidPage(\n  \n  theme = bs_theme(\n    bg = \"#A36F6F\", # background color\n    fg = \"#FDF7F7\", # foreground color\n    primary = \"#483132\", # primary accent color\n    base_font = font_google(\"Pacifico\")),\n  \n  # ~ additional UI code omitted for brevity ~\n  \n)\n\n\n\nCheck out the complete source code for App #1 (NOTE: applied themes are commented out).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out the pkgdown site to learn more about using {thematic} to match plot fonts to the fonts applied across your app."
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#fresh",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#fresh",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Using the {fresh} package to theme Shiny apps & dashboards\n\n\nThe {fresh} package provides tools for creating custom themes to use in Shiny apps and dashboards – set parameters of your theme using create_theme(), generate a stylesheet based off your specifications, and apply your stylesheet to your app.\n\n\n\n\n\n\nPros:\n\n\n\n easy to use\n\n\n supports theme creation for both shiny apps and dashboards (and also {flexdashboard}s and {b4dash} applications)\n\n\n\n\n\n\nCons:\n\n\n\n styling is constrained by the variables available to create_theme()\n\n\n\n\n\n\n\nLet’s practice applying new themes using {fresh} to our two-file-app (i.e. App #2) and our shinydashbaord (i.e. App #3)"
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#fresh-workflow",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#fresh-workflow",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A general workflow for using fresh themes\n\n\nWhether you’re working on a shiny app or a shiny dashboard, you’ll need the following:\n\n\n(1) a www/ folder within your app’s directory – this is where we’ll save the stylesheet (a .css file) that {fresh} will generate for us\n\n\n(2) a separate script for building our theme using the create_theme() function – I recommend saving this to scratch/ (it seemed to cause issues when saved anywhere within my app directory)\n\n\n\n\nImportantly, create_theme() takes different variables to set the parameters of your theme, depending on what type of app you’re building: for shiny apps, you’ll need to use bs_vars_* variables, and for shiny dashboards you’ll use adminlte_* variables (examples on the following slides).\n\n\nThere are also a couple ways to apply your finished theme to your app, but we’ll use the method of generating a .css file, then calling that file in our app."
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#create-fresh-app-theme",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#create-fresh-app-theme",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Creating a fresh theme for two-file-app\n\n\nIn this example, we update the colors of our app’s body, navbar, and tabPanels using the appropriate {fresh} variables for shiny apps. We specify a file path, two-file-app/www (you’ll need to create the www/ directory, since we don’t have one yet), where our stylesheet (e.g. shiny-fresh-theme.css, as shown here) file will be saved to. Of course, these color combos are not recommended, but chosen purely for demonstration purposes .\n\n\n\n\n~/R/create-fresh-theme-shiny.R\n\n# load library ----\nlibrary(fresh)\n\n# create theme -----\ncreate_theme(\n  \n  theme = \"default\", # you can supply a bootstrap theme to begin with\n  \n  bs_vars_global( # global styling\n    body_bg = \"#D2D0CA\", # beige\n    text_color = \"#F23ACB\", # hot pink\n    link_color = \"#0E4BE3\" # royal blue\n  ),\n  \n  bs_vars_navbar( # navbar styling\n    default_bg = \"#13CC13\", # lime green\n    default_color = \"#66656C\" # gray\n  ),\n  \n  bs_vars_tabs( # tab styling\n    border_color = \"#F90909\" # red\n  ),\n  \n  output_file = \"two-file-app/www/shiny-fresh-theme.css\" # generate css file & save to www/\n)"
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#apply-fresh-apps-theme",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#apply-fresh-apps-theme",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Apply a fresh theme to our app\n\n\nTo apply our theme, provide the theme argument of your fluidPage() or navbarPage() with the name of our stylesheet. Note: shiny knows to look in the /www directory, so you can omit that from your file path, as shown below:\n\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\n# navbar page ----\nui &lt;- navbarPage(\n\n  theme = \"shiny-fresh-theme.css\",\n  \n  # ~ additional UI code omitted for brevity ~\n  \n) # END navbarPage\n\n\n\nCheck out the complete source code for App #2 (NOTE: applied themes are commented out)."
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#fresh-shinydashboard",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#fresh-shinydashboard",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Creating a fresh theme for our shinydashboard\n\n\nIn this example, we update the colors of our app’s header, body, and sidebar using the appropriate fresh variables for shiny dashboards. We specify a file path, shinydashboard/www/ where our stylesheet (e.g. shinydashboard-fresh-theme.css, as shown here) file will be saved to. Again, these color combos are not recommended, but chosen purely for demonstration purposes.\n\n\n\n\n~/R/create-fresh-theme-shinydashboard.R\n\n# load libraries ----\nlibrary(fresh)\n\n# create theme ----\ncreate_theme(\n  \n  # change \"light-blue\"/\"primary\" color\n  adminlte_color(\n    light_blue = \"#150B5A\" # dark blue\n  ),\n  \n  # dashboardBody styling (includes boxes)\n  adminlte_global(\n    content_bg = \"#E7B5B5\" # blush pink\n  ),\n  \n  # dashboardSidebar styling\n  adminlte_sidebar(\n    width = \"400px\", \n    dark_bg = \"#57F8F3\", # light blue\n    dark_hover_bg = \"#BF21E6\", # magenta\n    dark_color = \"#F90000\" # red\n  ),\n  output_file = \"shinydashboard/www/shinydashboard-fresh-theme.css\" # generate css file & save to www/\n)"
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#apply-fresh-dashboard-theme",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#apply-fresh-dashboard-theme",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Apply a fresh theme to our dashboard\n\n\nTo apply our theme, use the fresh::use_theme() function inside your dashboardBody, providing it with the name of your stylesheet. Note: shiny knows to look in the www/ directory, so you can omit that from your file path, as shown below:\n\n\n\n\n\n\n\n\n~/shinydashboard/ui.R\n\nbody &lt;- dashboardBody(\n  \n  # set theme\n  fresh::use_theme(\"shinydashboard-fresh-theme.css\"),\n  \n  # ~ additional dashboardBody code omitted for brevity ~\n  \n)\n\n\n\nCheck out the complete source code for the shinydashboard (NOTE: applied themes are commented out)."
  },
  {
    "objectID": "course-materials/slides/part4.1-bslib-fresh-slides.html#end",
    "href": "course-materials/slides/part4.1-bslib-fresh-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 4.1\n\n\nUp next: fully custom themes using CSS & Sass\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/part4-styling-apps.html#required-packages",
    "href": "course-materials/part4-styling-apps.html#required-packages",
    "title": "Styling apps",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be using the following R packages:\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(bslib)\nlibrary(fresh)\nlibrary(sass)"
  },
  {
    "objectID": "course-materials/part4-styling-apps.html#required-data",
    "href": "course-materials/part4-styling-apps.html#required-data",
    "title": "Styling apps",
    "section": "Required Data",
    "text": "Required Data\n\nlibrary(palmerpenguins)\nlibrary(lterdatasampler)"
  },
  {
    "objectID": "course-materials/part4-styling-apps.html#lecture-materials",
    "href": "course-materials/part4-styling-apps.html#lecture-materials",
    "title": "Styling apps",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 4 is broken down into two lessons:\n\n\n\n{bslib} & {fresh}\n lecture 4.1 slides\n\n\n\n\nStyling with CSS & Sass\n lecture 4.2 slides"
  },
  {
    "objectID": "course-materials/part1-intro.html#required-packages",
    "href": "course-materials/part1-intro.html#required-packages",
    "title": "Setup & Intro",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be loading the following R packages:\n\nlibrary(shiny)"
  },
  {
    "objectID": "course-materials/part1-intro.html#required-data",
    "href": "course-materials/part1-intro.html#required-data",
    "title": "Setup & Intro",
    "section": "Required Data",
    "text": "Required Data\nNo data downloads required for this section"
  },
  {
    "objectID": "course-materials/part1-intro.html#lecture-materials",
    "href": "course-materials/part1-intro.html#lecture-materials",
    "title": "Setup & Intro",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 1 is broken down into two lessons:\n\n\n\nWhat is Shiny?\n lecture 1.1 slides\n\n\n\n\nSetting up your app\n lecture 1.2 slides"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Intro to Shiny - Building reactive apps and dashboards",
    "section": "Course Description",
    "text": "Course Description\nThis website houses materials which accompany the 1-unit, 2-day, hands-on coding workshop, EDS 296-1W - Intro to Shiny, offered through the Bren School of Environmental Science & Management, in partnership with the National Center for Ecological Analysis & Synthesis.\nIn this workshop, students will learn how to build and deploy Shiny applications. The {shiny} package provides a framework that allows R users to build interactive web applications and dashboards, and has become a popular tool for sharing data analyses and data-derived outputs with broad audiences. In this two-part short course, students will learn the fundamentals of reactivity, how to customize an application user interface (UI), best practices and workflows for developing shiny apps, and how to deploy their apps online via RStudio’s hosting service, shinyapps.io."
  },
  {
    "objectID": "index.html#teaching-team",
    "href": "index.html#teaching-team",
    "title": "Intro to Shiny - Building reactive apps and dashboards",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\n\nInstructor\n\n\n\n\n\n\n\n\n\n\n\nSam Csik\nEmail: scsik@ucsb.edu\nLearn more: samanthacsik.github.io"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Intro to Shiny - Building reactive apps and dashboards",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nBuilding this short course would not have been possible without the incredibly talented members of the R / Shiny / data science community who so willingly share tutorials, examples, and code for others (like myself!) to learn from. Attribution will be included on any slides / materials where content is adapted from other educators."
  },
  {
    "objectID": "course-materials/part2-building-shiny-apps.html#required-packages",
    "href": "course-materials/part2-building-shiny-apps.html#required-packages",
    "title": "Building Shiny apps",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be using the following R packages:\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(shinyWidgets)\nlibrary(shinycssloaders)\nlibrary(markdown)\nlibrary(rsconnect)"
  },
  {
    "objectID": "course-materials/part2-building-shiny-apps.html#required-data",
    "href": "course-materials/part2-building-shiny-apps.html#required-data",
    "title": "Building Shiny apps",
    "section": "Required Data",
    "text": "Required Data\n\nlibrary(palmerpenguins)\nlibrary(lterdatasampler)"
  },
  {
    "objectID": "course-materials/part2-building-shiny-apps.html#lecture-materials",
    "href": "course-materials/part2-building-shiny-apps.html#lecture-materials",
    "title": "Building Shiny apps",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 2 is broken down into three lessons:\n\n\n\n\nSingle-file app\n lecture 2.1 slides\n\n\n\n\nTwo-file app\n lecture 2.2 slides\n\n\n\n\nDeploying & Improving UX\n lecture 2.3 slides"
  },
  {
    "objectID": "course-materials/part5-improving-ux-ui.html#required-packages",
    "href": "course-materials/part5-improving-ux-ui.html#required-packages",
    "title": "Improving your app’s UX / UI",
    "section": "Required Packages",
    "text": "Required Packages\nNo coding required in this section!"
  },
  {
    "objectID": "course-materials/part5-improving-ux-ui.html#required-data",
    "href": "course-materials/part5-improving-ux-ui.html#required-data",
    "title": "Improving your app’s UX / UI",
    "section": "Required Data",
    "text": "Required Data\nNo data downloads required for this section"
  },
  {
    "objectID": "course-materials/part5-improving-ux-ui.html#lecture-materials",
    "href": "course-materials/part5-improving-ux-ui.html#lecture-materials",
    "title": "Improving your app’s UX / UI",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 5 is contained in one lesson:\n\nUX / UI\n lecture 5 slides"
  },
  {
    "objectID": "course-materials/part3-building-shiny-dashboards.html#required-packages",
    "href": "course-materials/part3-building-shiny-dashboards.html#required-packages",
    "title": "Building Shiny dashboards",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be using the following R packages:\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(shinycssloaders)\nlibrary(leaflet)\nlibrary(markdown)"
  },
  {
    "objectID": "course-materials/part3-building-shiny-dashboards.html#required-data",
    "href": "course-materials/part3-building-shiny-dashboards.html#required-data",
    "title": "Building Shiny dashboards",
    "section": "Required Data",
    "text": "Required Data\nWe’ll be using publicly-available data via the Arctic Data Center for our shiny dashboard.\n\n\n\n\n\n\nData citation\n\n\n\nChristopher Arp, Matthew Whitman, Katie Drew, and Allen Bondurant. 2022. Water depth, surface elevation, and water temperature of lakes in the Fish Creek Watershed in northern Alaska, USA, 2011-2022. Arctic Data Center. doi:10.18739/A2JH3D41P.\n\n\nTake a few moments to review the metadata record and download FCWO_lakemonitoringdata_2011_2022_daily.csv."
  },
  {
    "objectID": "course-materials/part3-building-shiny-dashboards.html#lecture-materials",
    "href": "course-materials/part3-building-shiny-dashboards.html#lecture-materials",
    "title": "Building Shiny dashboards",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 3 is contained in one lesson:\n\nShiny dashboard\n lecture 3 slides"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#title-slide",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 3\nBuilding Shiny dashboards"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#building-dashboards",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#building-dashboards",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Building dashboards with {shinydashboard}\n\n\nShiny alone is powerful and flexible, however it can take a lot of work to create a sleek / modern UI. {shinydashboard} provides a “template” for quickly building visually appealing dashboard apps."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#LO-app3",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#LO-app3",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - App #3 (shinydashboard)\n\n\nAfter this section, you should:\n\n\n\n understand the general workflow for pre-processing, saving & reading data into an app\n\n\n\n\n be comfortable building out a dashboard UI using {shinydashboard} layout functions\n\n\n\n\n understand how to add static images to your app\n\n\n\n\n feel comfortable creating a basic reactive leaflet map\n\n\n\n\nPackages introduced:\n\n\n\n\n {shinydashboard}: provides an alternative UI framework for easily building dashboard-style shiny applications\n\n\n\n\n {leaflet}: for building interactive maps"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#roadmap-dashboard",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#roadmap-dashboard",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Roadmap for App #3\n\n\nIn this section, we’ll be building a shinydashboard using data downloaded from the Arctic Data Center. We’ll be building out the following features:\n\n\n\n\n \n\n(a) a dashboardHeader with the name of your app\n\n\n(b) a dashboardSidebar with two menuItems\n\n\n(c) a landing page with background information about your app\n\n\n(d) an interactive and reactive leaflet map"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#what-is-a-dashboard",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#what-is-a-dashboard",
    "title": "EDS 296-1W",
    "section": "",
    "text": "But first, what do we mean by a shiny “dashboard”?\n\nThe {shinydashboard} package provides additional UI layout functions that make building apps with a more classic “dashboard” feel a bit easier. You’ll always need to import {shiny} alongside {shinydashboard} (i.e. it’s not a full replacement for {shiny})."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#dashboardPage",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#dashboardPage",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The most basic shinydashboard is made up of a header, a sidebar, and a body\n\n\nThe main difference between a shiny app and a shinydashboard are the UI elements. Rather than a fluidPage() (as used in our previous shiny apps), we’ll create a dashboardPage(), which expects three main parts: a header, a sidebar, and a body. Below is the most minimal possible UI for a {shinydashboard} page (you can run this code in an app.R file, if you wish).\n\n\n\n\n#..............................setup.............................\nlibrary(shiny)\nlibrary(shinydashboard)\n\n#...............................ui...............................\nui &lt;- dashboardPage(\n  \n  dashboardHeader(), \n  dashboardSidebar(), \n  dashboardBody() \n  \n) \n\n#.............................server.............................\nserver &lt;- function(input, output) {}\n\n#......................combine ui & server.......................\nshinyApp(ui, server)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#shinydashboard-examples",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#shinydashboard-examples",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Example shiny dashboards built by some familiar folks\n\nLive dashboards:\n\n Bren Student Data Explorer (source code), by MEDS 2022 alum, Halina Do-Linh, during her Bren Summer Fellowship (and continued by future MEDS students!) – explore Bren school student demographics and career outcomes\n\n\n Sam’s Strava Stats (source code), by yours truly, Sam Csik – a new and ongoing side project exploring my Strava hiking/biking/walking data\n\n\n Visualizing human impacts on at-risk marine biodiversity (source code, developed by MESM 2022 alum, Ian Brunjes & Dr. Casey O’Hara) – explore how human activities and climate change impact marine biodiversity worldwide\n\nDashboards which are no longer deployed:\n\n Channel Islands National Park’s Kelp Forest Monitoring Program (source code), by MEDS 2022 alum, Cullen Molitor – explore subtidal monitoring data collected from our closest National Park\n\n\n The Outdoor Equity App (source code), developed by MEDS 2022 alumni Halina Do-Linh & Clarissa Boyajian as part of their MEDS capstone project – analyze patterns in the access and demand of visitors at reservable overnight sites"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#setup-dashboard-directory",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#setup-dashboard-directory",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Setup your shiny dashboard\n\n\nFirst, create a subdirectory called shinydashboard/ and add a ui.R, server.R, and global.R file.\n\n\nAdd the server function to server.R and the three main UI components (header, sidebar, and body) to our dashboard page – I typically recommend splitting the UI into separate pieces, then combining them into a dashboardPage the end of ui.R (as shown below) – this can help with organization as you app grows in complexity.\n\n\nWe’ll set our dashboard aside for now while we work on downloading and pre-processing our data, as well as practice creating our data visualization outside of our app.\n\n\nui.Rserver.Rglobal.R\n\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader()\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar()\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody()\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\n~/shinydashboard/server.R\n\nserver &lt;- function(input, output) {}\n\n\n\n\n\n\n\n~/shinydashboard/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#run-app-a-lot",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#run-app-a-lot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Be sure to run your app after each new addition!\n\n\nFrom here on out, you should be running your app after each new addition to check that things work as expected – aim to do so after each slide where code is added.\n\n\nI don’t explicitly call to do so on each slide, but this is a super important practice to get into!\n\n\n\nRemember to give yourself proper space between lines and add annotations at the start and end of each parentheses – I highly recommend following along with the formatting I use throughout these materials."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#begin-with-data",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#begin-with-data",
    "title": "EDS 296-1W",
    "section": "",
    "text": "As always, let’s start with the data\n\n\nBuilding an app doesn’t make much sense if we don’t know what we’re going to put in it. So, just like the last two apps, we’ll start with some data wrangling and practice data visualization.\n\n\nUnlike our last two apps, however, we’ll be working with tabular data from the Arctic Data Center, which we’ll download, process, save, then finally, read into our application. This process will likely be more similar to what you’ll encounter when working on your own applications moving forward. Take a few minutes to review the metadata record for the following data set, and download FCWO_lakemonitoringdata_2011_2022_daily.csv:\n\n\n\n\n\n\nChristopher Arp, Matthew Whitman, Katie Drew, and Allen Bondurant. 2022. Water depth, surface elevation, and water temperature of lakes in the Fish Creek Watershed in northern Alaska, USA, 2011-2022. Arctic Data Center. doi:10.18739/A2JH3D41P."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#processing-storing-data",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#processing-storing-data",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Pre-processing data is critical\n\n\nWhere you choose to store the data used by your Shiny app will depend largely on the type and size of the file(s) and who “owns” those data. It is likely that you’ll be working with data stored in a database or on a server. This is outside the scope of this workshop, but I suggest reading Nathan Stephens’ article, Where to store your Shiny application data to start. Because we are going to be working with a relatively small data set today, we’ll bundle our data file with our dashboard inside our repository.\n\n\nRegardless of where you choose to store your data, you can help your application more quickly process inputs / outputs by providing it only as much data as needed to run. This means pre-processing your data.\n\n\n\n\n\nFCWO_lakemonitoringdata_2011_2022_daily.csv contains 8 attributes (variables) and 18,994 observations collected from a set of 11 lakes located in the Fish Creek Watershed in northern Alaska between 2011-2022. We’ll download and save the file to a raw_data/ folder in the root directory of our repository. We’ll then pre-process the data in a separate script(s) saved to scratch/ and save a cleaned / processed version of the data to our app’s directory, /shinydashboard/data/lake_data_processed.csv. Your repository structure should look similar to example on the right:"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#lake-data-goal",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#lake-data-goal",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The goal:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOur goal is to create a leaflet map with makers placed on each of the 11 unique lakes where data were collected. When clicked, a marker should reveal the lake name, elevation (in meters, above sea level), average depth of the lake (in meters), and average lake bed temperature (in degrees Celsius). To do so, we’ll need a data frame that looks like the example below:"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#process-lake-data",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#process-lake-data",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Process lake data & save new file\n\n\n\n\n~/scratch/data_processing_app3_shinydashboard.R\n\n#...............................................................................\n#                                                                              .\n#  For simplicity, I've removed all rows with missing values (i.e. `NaN`s      .\n#  in the `Depth` column & `NA`s in the `BedTemperature` column) before        .\n#  calculating averages. However, exploring and  thinking critically about     .\n#  missing data is an important part of data analysis, and in a real-life      .\n#  scenario, you should consider the most appropriate method for handling them .\n#                                                                              .\n#...............................................................................\n\n#....................SETUP & DATA PROCESSING.....................\n\n# load packages ----\nlibrary(tidyverse)\n\n# read in raw data ----\nlake_raw &lt;- read_csv(here::here(\"raw_data\", \"FCWO_lakemonitoringdata_2011_2022_daily.csv\"))\n\n# calculate avg depth & temp ----\navg_depth_temp &lt;- lake_raw |&gt; \n  select(Site, Depth, BedTemperature) |&gt; \n  filter(Depth != \"NaN\") |&gt;  # remove NaN (\"not a number\") from Depth\n  drop_na(BedTemperature) |&gt; # remove NAs (missing data) from BedTemperature\n  group_by(Site) |&gt; \n  summarize(\n    AvgDepth = round(mean(Depth), 1),\n    AvgTemp = round(mean(BedTemperature), 1)\n    )\n\n# join avg depth & temp to original data (match rows based on 'Site') ---\njoined_dfs &lt;- full_join(lake_raw, avg_depth_temp)\n\n# get unique lakes observations (with corresponding lat, lon, elev, avgDepth, avgTemp) for mapping ----\nunique_lakes &lt;- joined_dfs |&gt; \n  select(Site, Latitude, Longitude, Elevation, AvgDepth, AvgTemp) |&gt; \n  distinct()\n\n# save processed data to your app's data directory ----\nwrite_csv(x = unique_lakes, file = here::here(\"shinydashboard\", \"data\", \"lake_data_processed.csv\"))"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#file-types",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#file-types",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A note on file types\n\n\nOftentimes, you may choose to save your processed data frame as a .rds file (a data file format, native to R, which stores a single R object). .rds file are relatively small (and therefore take up little storage space), take less time to import / export, and preserve data types and classes (e.g. factors and dates), eliminating the need to redefine data types after loading the file. Bear in mind that this increased speed and space-saving may come at the cost of generality – you can’t open a .rds file outside of R or read it in with another programming language (e.g. Python).\n\n\nWhile we’ll be sticking to .csv files in this workshop, it’s worth experimenting with .rds when you begin working with your own (likely larger) data. You can read in (readRDS()) and write out to (saveRDS()) .rds files as easily as .csv files."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#draft-leaflet",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#draft-leaflet",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Draft leaflet map\n\n\nleaflet mapcode\n\n\n\nThere are lots of ways to customize leaflet maps. We’ll be keeping ours relatively simple, but check out the Leaflet for R documentation for more ways to get creative with your maps.\n\n\n\n\n\n\n\n\n\n\n\n\n~/scratch/practice_script_app3_shinydashboard.R\n\n#..............................SETUP.............................\n\n# load packages ----\nlibrary(tidyverse)\nlibrary(leaflet)\n\n# read in data ----\nlake_data &lt;- read_csv(here::here(\"shinydashboard\", \"data\", \"lake_data_processed.csv\"))\n\n#..........................PRACTICE VIZ..........................\n\nleaflet() |&gt; \n  \n  # add tiles\n  addProviderTiles(providers$Esri.WorldImagery) |&gt; \n  \n  # set view over AK\n  setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt; \n  \n  # add mini map\n  addMiniMap(toggleDisplay = TRUE, minimized = FALSE) |&gt; \n  \n  # add markers\n  addMarkers(data = lake_data, \n             lng = lake_data$Longitude, lat = lake_data$Latitude,\n             popup = paste0(\"Site Name: \", lake_data$Site, \"&lt;br&gt;\",\n                           \"Elevation: \", lake_data$Elevation, \" meters (above SL)\", \"&lt;br&gt;\",\n                           \"Avg Depth: \", lake_data$AvgDepth, \" meters\", \"&lt;br&gt;\",\n                           \"Avg Lake Bed Temperature: \", lake_data$AvgTemp, \"\\u00B0C\")) # NOTE: Unicode for degree symbol icon"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#filter-leaflet",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#filter-leaflet",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Practice filtering leaflet observations\n\n\nleaflet map (filtered)code\n\n\n\nWe’ll eventually build three sliderInputs to filter lake makers by Elevation, AvgDepth, and AvgTemp. Practice filtering here first (and be sure to update the data frame name in your leaflet code!):\n\n\n\n\n\n\n\n\n\n\n\n\n~/scratch/practice_script_app3_shinydashboard.R\n\n#..............................SETUP.............................\n\n# load packages ----\nlibrary(tidyverse)\nlibrary(leaflet)\n\n# read in data ----\nlake_data &lt;- read_csv(here::here(\"shinydashboard\", \"data\", \"lake_data_processed.csv\"))\n\n#.......................PRACTICE FILTERING.......................\n\nfiltered_lakes &lt;- lake_data |&gt; \n  filter(Elevation &gt;= 8 & Elevation &lt;= 20) |&gt; \n  filter(AvgDepth &gt;= 2 & AvgDepth &lt;= 3) |&gt; \n  filter(AvgTemp &gt;= 4 & AvgTemp &lt;= 6)\n\n#..........................PRACTICE VIZ..........................\n\nleaflet() |&gt; \n  \n  # add tiles\n  addProviderTiles(providers$Esri.WorldImagery, # make note of using appropriate tiles\n                   options = providerTileOptions(maxNativeZoom = 19, maxZoom = 100)) |&gt; \n  \n  # add mini map\n  addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt; \n  \n  # set view over AK\n  setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt; \n  \n  # add markers\n  addMarkers(data = filtered_lakes,\n             lng = filtered_lakes$Longitude, lat = filtered_lakes$Latitude,\n             popup = paste0(\"Site Name: \", filtered_lakes$Site, \"&lt;br&gt;\",\n                           \"Elevation: \", filtered_lakes$Elevation, \" meters (above SL)\", \"&lt;br&gt;\",\n                           \"Avg Depth: \", filtered_lakes$AvgDepth, \" meters\", \"&lt;br&gt;\",\n                           \"Avg Lake Bed Temperature: \", filtered_lakes$AvgTemp, \"\\u00B0C\")) # NOTE: Unicode for degree symbol icon"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#sketch-ui",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#sketch-ui",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Sketch out our dashboard UI\n\n\nI want my dashboard to have two menu items: a welcome page with some background information, and a dashboard page with my reactive map. All elements will be placed inside boxes, the primary building blocks of shinydashboards (more on that soon)."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#title-menuItems",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#title-menuItems",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a title & menuItems\n\n\nFirst, add a title to dashboardHeader() and make more space using titleWidth, if necessary.\n\n\nNext, we’ll build our dashboardSidebar(). Add a sidebarMenu() that contains two menuItems. Be sure to provide each menuItem() with text as you’d like it to appear in your app (for me, that’s Welcome and Dashboard), and a tabName which will be used to place dashboardBody() content in the appropriate menuItem(). Optionally, you can provide an icon. By default, icon() uses icons from FontAwesome.\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody()\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#tabItems",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#tabItems",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add tabItems to your dashboardBody\n\n\nNext, we’ll create tabItems in our dashboardBody – we’ll make a tabItem (singular) for each menuItem in our dashboardSidebar. In order to match a menuItem and a tabItem, ensure that they have matching a tabName (e.g. any content added to the dashboard tabItem will appear under the dashboard menuItem).\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n    \n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n            \n            \"background info here\"\n            \n    ), # END welcome tabItem\n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            \"dashboard content here\"\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#boxes",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#boxes",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add boxes to contain UI content (part 1)\n\n\nBoxes are the primary building blocks of shinydashboards and can contain almost any Shiny UI element (e.g. text, inputs, outputs). Start by adding two side-by-side boxes to our dashboard tab inside a fluidRow(). Together, their widths will add up to 12 (the total width of a browser page). These boxes will eventually contain our sliderInputs and our leafletOutput.\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n    \n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n            \n            \"background info here\"\n            \n    ), # END welcome tabItem \n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            # fluidRow ----\n            fluidRow(\n              \n              # input box ----\n              box(width = 4,\n                  \n                  \"sliderInputs here\"\n                  \n              ), # END input box\n              \n              # leaflet box ----\n              box(width = 8, \n                  \n                  \"leafletOutput here\"\n                  \n              ) # END leaflet box\n              \n            ) # END fluidRow\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#columns",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#columns",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add boxes to contain UI content (part 2)\n\n\nLastly, add boxes to our welcome tab We’ll use columns to place one box on the left-hand side of our page, and two stacked boxes on the right-hand side. Each column will take up half the page (Note: For column-based layouts, use NULL for the box width, as the width is set by the column that contains the box). We can create two fluidRows within the right-hand column to stack two boxes vertically.\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n    \n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n            \n            # left-hand column ----\n            column(width = 6,\n                   \n                   # background info box ----\n                   box(width = NULL,\n                       \n                       \"background info here\"\n                       \n                   ), # END background info box\n                   \n            ), # END left-hand column\n            \n            # right-hand column ----\n            column(width = 6,\n                   \n                   # first fluidRow ----\n                   fluidRow(\n                     \n                     # data source box ----\n                     box(width = NULL,\n                         \n                         \"data citation here\"\n                         \n                     ) # END data source box\n                     \n                   ), # END first fluidRow\n                   \n                   # second fluidRow ----\n                   fluidRow(\n                     \n                     # disclaimer box ----\n                     box(width = NULL,\n                         \n                         \"disclaimer here\"\n                         \n                     ) # END disclaimer box\n                     \n                   ) # END second fluidRow\n                   \n            ) # END right-hand column\n            \n    ), # END welcome tabItem\n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            # fluidRow ----\n            fluidRow(\n              \n              # input box ----\n              box(width = 4,\n                  \n                  \"sliderInputs here\"\n                  \n              ), # END input box\n              \n              # leaflet box ----\n              box(width = 8,\n                  \n                  \"leaflet output here\"\n                  \n              ) # END leaflet box\n              \n            ) # END fluidRow\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#import-data",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#import-data",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Read data into global.R & add necessary packages\n\n\nRemember to load your pre-processed data, which should live in the data/ folder within your app’s directory.\n\n\n\n\n~/shinydashboard/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(shinycssloaders)\n\n# READ IN DATA ----\nlake_data &lt;- read_csv(\"data/lake_data_processed.csv\")\n\n\n\n\nSome important notes:\n\nAvoid using here::here() in your shiny apps, as it can cause some unexpected issues (read more about it in this discussion)\nThe file path specified for reading in our data is relative to the app files (ui.R, server.R). It’s important to note, however, that you won’t be able to run your code line-by-line (like in a typical script; the file path won’t be recognized) – this is expected!."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#add-sliderInput-leafletMap",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#add-sliderInput-leafletMap",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a sliderInput & leafletOutput to the UI\n\n\nStart by adding just one sliderInput (for selecting a range of lake Elevations) to the left-hand box in the dashboard tab. Then, add a leafletOutput to create a placeholder space for our map, along with a Spinner animation (from the {shinycssloaders} package). While we’re here, we can also add titles to each box.\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # background box ----\n                   box(width = NULL,\n                       \n                       \"background info here\"\n\n                   ) # END background box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         \"data citation here\"\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluidRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n                         \n                         \"disclaimer here\"\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider_input\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map_output\") |&gt; \n                    withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#build-map-server",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#build-map-server",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Assemble inputs & outputs in server.R\n\n\nRemember to reference your practice data viz script and to follow our three steps for creating reactive outputs. And don’t forget to add () following each reactive data frame called in your leaflet map!\n\n\n\n\n~/shinydashboard/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter lake data ----\n  filtered_lakes_df &lt;- reactive ({\n    \n    lake_data |&gt;\n      filter(Elevation &gt;= input$elevation_slider_input[1] & Elevation &lt;= input$elevation_slider_input[2])\n    \n  })\n  \n  \n  \n  # build leaflet map ----\n  output$lake_map_output &lt;- renderLeaflet({\n    \n    leaflet() |&gt;\n      \n      # add tiles\n      addProviderTiles(providers$Esri.WorldImagery) |&gt;\n      \n      # set view over AK\n      setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt;\n      \n      # add mini map\n      addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt;\n      \n      # add markers\n      addMarkers(data =  filtered_lakes_df(),\n                 lng = filtered_lakes_df()$Longitude, lat = filtered_lakes_df()$Latitude,\n                 popup = paste(\"Site Name:\", filtered_lakes_df()$Site, \"&lt;br&gt;\",\n                               \"Elevation:\", filtered_lakes_df()$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                               \"Avg Depth:\", filtered_lakes_df()$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                               \"Avg Lake Bed Temperature:\", filtered_lakes_df()$AvgTemp, \"deg Celsius\"))\n    \n  })\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#working-elev-widget",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#working-elev-widget",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app & test out your first widget\n\nIf all is good, you should see something similar to this:"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise5-prompt",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise5-prompt",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 5: Add two more sliderInputs to filter for AvgDepth & AvgTemp\n\n\nTo Do:\n\n Add two more sliderInputs, one for AvgDepth and one for AvgTemp beneath our first Elevation sliderInput in the UI\n Update our reactive data frame so that all three widgets filter the leaflet map\n     \n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise5-solution",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise5-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 5: A solution\n\n\nui.Rserver.R\n\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # background box ----\n                   box(width = NULL,\n                       \n                       \"background info here\"\n\n                   ) # END background box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         \"data citation here\"\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluidRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n                         \n                         \"disclaimer here\"\n                         \n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider_input\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider_input\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider_input\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map_output\") |&gt; \n                    withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\n~/shinydashboard/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter lake data ----\n  filtered_lakes_df &lt;- reactive ({\n    \n    lake_data |&gt;\n      filter(Elevation &gt;= input$elevation_slider_input[1] & Elevation &lt;= input$elevation_slider_input[2])  |&gt;\n      filter(AvgDepth &gt;= input$depth_slider_input[1] & AvgDepth &lt;= input$depth_slider_input[2]) |&gt;\n      filter(AvgTemp &gt;= input$temp_slider_input[1] & AvgTemp &lt;= input$temp_slider_input[2])\n    \n  })\n  \n  \n  \n  # build leaflet map ----\n  output$lake_map_output &lt;- renderLeaflet({\n    \n    leaflet() |&gt;\n      \n      # add tiles\n      addProviderTiles(providers$Esri.WorldImagery) |&gt;\n      \n      # set view over AK\n      setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt;\n      \n      # add mini map\n      addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt;\n      \n      # add markers\n      addMarkers(data =  filtered_lakes_df(),\n                 lng = filtered_lakes_df()$Longitude, lat = filtered_lakes_df()$Latitude,\n                 popup = paste(\"Site Name:\", filtered_lakes_df()$Site, \"&lt;br&gt;\",\n                               \"Elevation:\", filtered_lakes_df()$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                               \"Avg Depth:\", filtered_lakes_df()$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                               \"Avg Lake Bed Temperature:\", filtered_lakes_df()$AvgTemp, \"deg Celsius\"))\n    \n  })\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise6-prompt-tips",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise6-prompt-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "&  Exercise 6: Add titles & text to Welcome page boxes\n\nTo Do:\n\n Add titles to each box on the Welcome page\n\n\n Create a text/ folder within your app’s directory and add three markdown (.md) files. Write / format text for the background info (left), data citation (top-right), and disclaimer (bottom-right) boxes. Example text below:\n\n\nintro.mdcitation.mddisclaimer.md\n\n\n\n\n\n~/shinydashboard/text/intro.md\n\nThe [Fish Creek Watershed Observatory (FCWO)](http://www.fishcreekwatershed.org/) is a focal watershed within the [National Petroleum Reserve in Alaska (NPR-A)](https://www.blm.gov/programs/energy-and-minerals/oil-and-gas/about/alaska/NPR-A). Targeted lake and stream monitoring within the watershed provide site-specific data prior to and after the establishment of new petroleum development, as well as insight into dynamics related to climate change and variability. Eleven lakes of interest (Harry Potter, Hipbone, Iceshove, L9817, L9819, L9820, Little Alaska, Lower Snowman, M9925, Middle Snowman, and Serenity) are featured in this dashboard.\n\n\n\n\n\n\n\n~/shinydashboard/text/citation.md\n\nData presented in this dashboard were collected as part of the [Fish Creek Watershed Observatory](http://www.fishcreekwatershed.org/) are archived and publicly accessible on the NSF [Arctic Data Center](https://arcticdata.io/). **Citation:** \n\n*Christopher Arp, Matthew Whitman, Katie Drew, and Allen Bondurant. 2022. Water depth, surface elevation, and water temperature of lakes in the Fish Creek Watershed in northern Alaska, USA, 2011-2022. Arctic Data Center [doi:10.18739/A2JH3D41P](https://arcticdata.io/catalog/view/doi%3A10.18739%2FA2JH3D41P).*\n\n\n\n\n\n\n\n~/shinydashboard/text/disclaimer.md\n\nThis app is build for demonstration/teaching purposes only and is not paid for or endorsed by the Fish Creek Watershed Observatory or affiliates in any way. The data as presented here are not intended for publication nor scientific interpretation. \n\n\n\n\n\n\nTips:\n\n Titles can include icons! For example: title = tagList(icon(\"icon-name\"), strong(\"title text here\"))"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise6-solution",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#exercise6-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 6: A solution\n\n\nPress the right arrow key to advance through the newly added lines of code.\n\n\nglobal.Rui.R\n\n\n\n\n\n~/shinydashboard/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(shinycssloaders)\nlibrary(markdown)\n\n# READ IN DATA ----\nlake_data &lt;- read_csv(\"data/lake_data_processed.csv\")\n\n\n\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # background box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\")\n\n                   ) # END background box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluidRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#add-image",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#add-image",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a static image\n\n\nAs a final touch, let’s add an image to the Welcome page, inside the left-hand box beneath our intro text. First, create a www/ folder inside your app’s directory (refer back to lecture 1.2 for a description of this special directory). Download the map of the Fish Creek Watershed from FCWO’s website here and save it to your www/ directory.\n\n\nNext, use the img tag to add your image. Supply a file path, relative to your www/ directory, using the src argument, and add alt text using the alt argument.\n\n\n\n\n~/shinydashboard/ui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # background box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\"),\n                       tags$img(src = \"FishCreekWatershedSiteMap_2020.jpeg\", \n                                alt = \"A map of Northern Alaska, showing Fish Creek Watershed located within the National Petroleum Reserve.\") \n\n                   ) # END background box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluidRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#large-image",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#large-image",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Our image doesn’t look so great as-is…"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#adjust-image-size",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#adjust-image-size",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Use in-line CSS to adjust the image size\n\n\nWe can use in-line CSS to style our image element, as shown below (see style argument). It’s okay if you don’t fully understand what’s going on here for now – we’ll talk in greater detail about how CSS (and Sass) can be used to customize the appearance of your apps in just a bit.\n\n\nI’ve also added a caption below our image that links to the image source, and used in-line CSS to center my text within the box.\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # background box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\"),\n                       tags$img(src = \"FishCreekWatershedSiteMap_2020.jpeg\", \n                                alt = \"A map of Northern Alaska, showing Fish Creek Watershed located within the National Petroleum Reserve.\",\n                                style = \"max-width: 100%;\"),\n                       tags$h6(tags$em(\"Map Source:\", tags$a(href = \"http://www.fishcreekwatershed.org/\", \"FCWO\")),\n                               style = \"text-align: center;\")\n\n                   ) # END background box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluidRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#final-dashboard",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#final-dashboard",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Check out your finished dashboard!\n\n\n\nThere’s a ton more to learn about building shinydashboards. Check out the documentation to find instructions on adding components like infoBoxes and valueBoxes, building inputs in the sidebar, easy ways to update the color theme using skins, and more."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#final-dashboard-code",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#final-dashboard-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Complete code for our dashboard thus far:\n\n\nglobal.Rui.Rserver.R\n\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(shinycssloaders)\nlibrary(leaflet)\nlibrary(markdown)\n\n# READ IN DATA ----\nlake_data &lt;- read_csv(\"data/lake_data_processed.csv\")\n\n\n\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # background box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\"),\n                       tags$img(src = \"FishCreekWatershedSiteMap_2020.jpeg\", \n                                alt = \"A map of Northern Alaska, showing Fish Creek Watershed located within the National Petroleum Reserve.\",\n                                style = \"max-width: 100%;\"),\n                       tags$h6(tags$em(\"Map Source:\", tags$a(href = \"http://www.fishcreekwatershed.org/\", \"FCWO\")),\n                               style = \"text-align: center;\")\n\n                   ) # END background box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluidRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider_input\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider_input\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider_input\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map_output\") |&gt; \n                    withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter lake data ----\n  filtered_lakes_df &lt;- reactive ({\n    \n    lake_data |&gt;\n      filter(Elevation &gt;= input$elevation_slider_input[1] & Elevation &lt;= input$elevation_slider_input[2])  |&gt;\n      filter(AvgDepth &gt;= input$depth_slider_input[1] & AvgDepth &lt;= input$depth_slider_input[2]) |&gt;\n      filter(AvgTemp &gt;= input$temp_slider_input[1] & AvgTemp &lt;= input$temp_slider_input[2])\n    \n  })\n  \n  \n  \n  # build leaflet map ----\n  output$lake_map_output &lt;- renderLeaflet({\n    \n    leaflet() |&gt;\n      \n      # add tiles\n      addProviderTiles(providers$Esri.WorldImagery) |&gt;\n      \n      # set view over AK\n      setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt;\n      \n      # add mini map\n      addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt;\n      \n      # add markers\n      addMarkers(data =  filtered_lakes_df(),\n                 lng = filtered_lakes_df()$Longitude, lat = filtered_lakes_df()$Latitude,\n                 popup = paste(\"Site Name:\", filtered_lakes_df()$Site, \"&lt;br&gt;\",\n                               \"Elevation:\", filtered_lakes_df()$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                               \"Avg Depth:\", filtered_lakes_df()$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                               \"Avg Lake Bed Temperature:\", filtered_lakes_df()$AvgTemp, \"deg Celsius\"))\n    \n  })\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboard-slides.html#end",
    "href": "course-materials/slides/part3-shiny-dashboard-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 3\n\n\nUp next: styling apps\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#title-slide",
    "href": "course-materials/slides/part8-wrap-up-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 8\nWrap up"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#do-you-need-shiny",
    "href": "course-materials/slides/part8-wrap-up-slides.html#do-you-need-shiny",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Consider if you need Shiny at all\n\n\nWhile a well-developed shiny app is fun, appealing, and an effective way for users to explore data, it’s worth having a conversation about whether shiny is truly necessary. . . or if taking an alternative approach to sharing your data might be better."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#shiny-not-bad",
    "href": "course-materials/slides/part8-wrap-up-slides.html#shiny-not-bad",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Shiny isn’t bad – in fact, it’s a really powerful tool\n\n\nFirst, we don’t think shiny apps are inherently bad. They’re popular (particularly as Capstone deliverables) for a good reason – they can:\n\n\n(1) effectively expose data / analytics to those who don’t have the technical or computational skills or the time to process data\n\n\n(2) they can streamline otherwise obtuse workflows (Improving Monitoring and Evaluation of Enforcement in Coastal Marine Protected Areas and Fisheries (MEDS Capstone, 2023) is an excellent example of this)\n\n\n(3) allow users to derive greater insights as they interact with the data"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#considerations",
    "href": "course-materials/slides/part8-wrap-up-slides.html#considerations",
    "title": "EDS 296-1W",
    "section": "",
    "text": "But there are some important considerations\n\n\n\n\nA dashboard is only as good as the data pipeline that feeds it! You should focus most of your energy on your analytics / crafting effective data visualizations.\nRelated to the point above, remember that it’s easiest if we do all our data wrangling / visualization outside of the shiny framework first, before making it reactive. I recommend you continue to adopt this approach as you embark on your Capstones / GPs / projects. Ultimately, those parts are the most difficult / time-consuming / challenging to get right.\nShiny apps are difficult to maintain – they often require skilled IT personnel to deploy them onto servers, and are prone to breaking with updates to server infrastructure. Have a maintenance plan in place (including a plan for who will maintain / update the code base).\nConsider if reactivity allows for insights that you can’t provide using alternative tools / formats, which may be easier to maintain.\n\n\n \n\n\n\n\n\n\n\n\n\n\nImage Source: Reddit"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#htmlwidgets",
    "href": "course-materials/slides/part8-wrap-up-slides.html#htmlwidgets",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Embed htmlwidgets into your reports / websites\n\nhtmlwidgets allow you to create interactive data visualizations using JavaScript libraries in R. They can be embedded into Shiny apps (recall we used both the {DT} package to create an interactive datatable and the {leaflet} package to create an interactive map), or into RMarkdown and Quarto Markdown reports. A well-designed reproducible report with interactive widgets is powerful, easier to maintain, and can be deployed on the web (for free) using tools like GitHub pages. Explore 130 registered widgets on the htmlwidget gallery.\n\n\n\n\n\n\n\n\n\n\n\n\nAn example leaflet map embedded in an RMarkdown report. Image Source: htmlwidgets for R\n\n\n\n\n\n\n\n\n\n\n\n\nAn example leaflet map embedded in a Quarto website. Image Source: my website"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#widget-dashboards",
    "href": "course-materials/slides/part8-wrap-up-slides.html#widget-dashboards",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Compose multiple widgets into a dashboard\n\nHave lots of interactive htmlwidgets to present? Consider composing multiple widgets into a dashboard using {flexdashboard} (based in RMarkdown) or Quarto dashboard. Both frameworks support UI layouts similar to those achieved using {shiny} / {shinydashboard} (columns, rows, tabsets, navbars, value boxes etc.). You can also optionally use Shiny to embed reactive outputs. Check out the {flexdashboard} gallery and Quarto dashboard gallery for examples and source code.\n\n\n\n\n\n\n\n\n\n\n\n\nWaste Lands - America’s Forgotten Nuclear Legacy, (built using {flexdashboard})\n\n\n\n\n\n\n\n\n\n\n\n\nRecent Earthquakes in Aotearoa New Zealand (built using Quarto)"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#shiny-quarto",
    "href": "course-materials/slides/part8-wrap-up-slides.html#shiny-quarto",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Embed shiny components in Quarto docs\n\nEmbed reactive shiny components (e.g. a plot with sliders that control its inputs) in Quarto documents. By using some fun new code chunk options, you can instruct Quarto to spin up it’s own self-contained shiny server to run your reactives. Read the Quarto documentation to learn more and check out some teaching examples.\n\n\n\n\n\n\n\n\n\n\n\n\nOld Faithful, which demonstrates incorporating an interactive plot into the main flow of a document. Source code\n\n\n\n\n\n\n\n\n\n\n\n\nIris K-Means Clustering, which demonstrates using a more “application-like” page layout (sidebar and main panel). Source code"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#shinylive",
    "href": "course-materials/slides/part8-wrap-up-slides.html#shinylive",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run serverless shiny apps using Shinylive\n\nShinylive is a serverless version of Shiny, which was recently annoucned at posit::conf(2023) by Joe Cheng (rewatch his talk!). It supports Shiny for both R and Python (that’s right, you can build shiny apps using Python too! See Shiny for Python for more info). You have a few options:\n\n\n \n\nConvert shiny apps to static websites using this {shinylive} package for R or {shinylive} package for Python\nWrite, run, and share Shiny apps right in the browser at https://shinylive.io/r/examples/ (R) or https://shinylive.io/py/examples/ (Python)\nInclude Shiny apps in Quarto docs using the Shinylive Quarto extension\n\n\n\n\n\n\n\n\n\n\n\n\nImage Source: Run a Shiny app in the browser with shinylive for R, by Veerle van Leemput"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#recap",
    "href": "course-materials/slides/part8-wrap-up-slides.html#recap",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Recap\n\n\nWe covered a lot over the past two days! Let’s quickly review some of the topics that we discussed."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#what-is-shiny",
    "href": "course-materials/slides/part8-wrap-up-slides.html#what-is-shiny",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Shiny apps are made up of a UI & a server\n\n\nShiny is an open source R package that provides a framework for building interactive web apps without having to know HTML / CSS/ JavaScript.\n\n\n\nApps made up of a UI (which controls the layout / appearance; the part a user sees / interacts with) and a Server (which handles the logic)\n\n\n\n\n\n\n\n\n\n\nReactivity = a user updates values via widgets in the UI  server performs some logic to return an updated output  output is rendered in the UI"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#file-org",
    "href": "course-materials/slides/part8-wrap-up-slides.html#file-org",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Choose a single-file or two-file setup\n\nWe can create apps using either a single-file, (app.R) or two files (ui.R + server.R). A single-file setup are great for building small apps, and especially great for building reprexes. A two-file setup is best for larger apps (and likely what you’ll want to opt for).\n\n\n\nYou can optionally use a global.R file to store objects that are used across your app (libraries, data, etc.)."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#reactivity-rules",
    "href": "course-materials/slides/part8-wrap-up-slides.html#reactivity-rules",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Follow three rules for creating reactivity:\n\n\n(1) Add an input (e.g. sliderInput) to the UI  that users can interact with\n\n(2) Add an output (e.g. plotOutput) to the UI that creates a placeholder space to fill with our eventual reactive output\n\n(3) Tell the server how to assemble inputs into outputs:\n\nsave objects you want to display to output$&lt;id&gt;\nBuild reactive objects using a render*() function\nAccess input values with input$&lt;id&gt;\n\n\nAnd remember to always build your data filtering pipelines & visualizations outside of shiny before trying to make them reactive."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#layout-fxns",
    "href": "course-materials/slides/part8-wrap-up-slides.html#layout-fxns",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Use layout functions to organize your UI\n\nHow you organize the visual structure of your app’s UI can affect not only how aesthetically-pleasing it is, but also how users will interact with it. {shiny} includes a number of layout functions, or use {shinydashboard} to access additional functions for creating classic “dashboard-style” layouts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n  It’s easy to lose track of parentheses when using lots of layout functions. Remember to use rainbow parentheses, code comments, and appropriate spacing between lines to stay organized."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#deploying",
    "href": "course-materials/slides/part8-wrap-up-slides.html#deploying",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Deploy with shinyapps.io, if possible\n\nThere are a number of ways to deploy a shiny app, but stick with shinyapps.io whenever possible – it’s the quickest and fastest way to securely host your app. The free tier allows you to host 5 apps with up to 25 active hours a month, however it’s easily scalable with a number of paid plan options.\n\n\n\n\n\n\n\n\n\n\n\n\nThe shinyapps.io dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nA deployment log on shinyapps.io\n\n\n\nThe shinyapps.io dashboard provides lots of helpful information, particularly the deployment log – remember to check here for information about failed deployments."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#style-apps",
    "href": "course-materials/slides/part8-wrap-up-slides.html#style-apps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "There are a number of tools for styling apps\n\n{bslib} and {fresh} provide user-friendly functions for automatically generating and applying CSS styles to update update colors & fonts across your app.\nAlternatively, write your own Sass (.scss) file to fully customize your app’s appearance. Use the {sass} package to compile it to CSS and link the resulting .css file in your app’s header."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#ux-ui",
    "href": "course-materials/slides/part8-wrap-up-slides.html#ux-ui",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Design for your users\n\nTake out any guesswork:\n\nuse validation tests that return (non-intimidating) error messages that provide clear guidance on how to proceed\nuse {shinycssloaders} to add loading animations to shiny outputs\n\n\nKeep in mind some fundamental UX / UI rules:\n\nkeep things simple\nyour app shouldn’t need a manual to understand how to use it\nyour app should always do the least surprising thing\navoid feature-creep\n\n\n\nBuild accessible apps:\n\nadd alt text\ndon’t overcrowd widgets\nuse colorblind-friendly color palettes"
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#debusing-testing",
    "href": "course-materials/slides/part8-wrap-up-slides.html#debusing-testing",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Debugging is tricky, but there are tools / strategies\n\n\n Debugging shiny apps can be tricky, since code execution isn’t linear and because code runs behind a web server and the shiny framework. When you encounter errors, remember to try the following:\n\nisolate errors in the UI by commenting out code from the outside in\nreduce your app to just problematic code by commenting out as much correctly-functioning code as possible\nadd diagnostic messages to reactives\nuse {reactlog} to visualize reactivity errors\n\n\n\n Creating automated checks that your app is working as expected (using frameworks like {shinytest2}) can also save you lots of time and headache in the future."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#streamline-code",
    "href": "course-materials/slides/part8-wrap-up-slides.html#streamline-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Streamline code with functions & modules\n\nTurning portions of your app into functions or modules is not necessary(!), but it can help you better organize your code base, reduce redundancy and complexity, increase code comprehension, and increase testability. Create functions for code that are either completely on the UI side or completely on the server side. Create modules for code that spans both.\n\n\n\nIt can be a lot to get comfortable with the shiny framework and work on your analyses / visualizations and write functions / modules. Consider writing parts (or even all) of your application first, then go back to refactor (restructure / rewrite) your code to improve it’s structure / organization."
  },
  {
    "objectID": "course-materials/slides/part8-wrap-up-slides.html#TheEnd",
    "href": "course-materials/slides/part8-wrap-up-slides.html#TheEnd",
    "title": "EDS 296-1W",
    "section": "",
    "text": "I’m excited to see what Shiny new apps you all create!\n\n\n\n\nThis is a Quarto Presentation. To learn more, visit https://quarto.org.\n\n\nIf you see mistakes or want to suggest changes, please create an issue on the source repository."
  },
  {
    "objectID": "course-materials/slides/part2.3C.html#redeploying-apps",
    "href": "course-materials/slides/part2.3C.html#redeploying-apps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Redeploying apps with shinyapps.io\n\n\nNow that we’ve added some updates to our app, it’s time to redeploy our newest version."
  },
  {
    "objectID": "course-materials/slides/part2.3C.html#howto-redeploy",
    "href": "course-materials/slides/part2.3C.html#howto-redeploy",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Redeploying is similar to deploying for the first time\n\n\nJust a few quick steps before your updates are live at your URL from earlier:\n\n\n(1) double check to make sure any required packages are being imported in global.R\n\n\n(2) Rerun rsconnect::deployApp(\"&lt;app-directory-nam\")&gt; in your console and type Y when you see the prompt Update application currently deployed at https://githubUserName.shinyapps.io/yourAppName? [Y/n]\n\n\n(3) Give it a minute (or few) to deploy. Your deployed app will open in a browser window once processed\n\n\n(4) Push all your files (including the /rsconnect directory) to GitHub"
  },
  {
    "objectID": "course-materials/slides/part2.3C.html#end-section",
    "href": "course-materials/slides/part2.3C.html#end-section",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 2.3\n\n\nUp next: building shiny dashboards\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#deploying-apps",
    "href": "course-materials/slides/part2.3A.html#deploying-apps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Deploying apps with shinyapps.io\n\n\nSharing your Shiny app with others isn’t so easy when it just lives on your computer (and your R session has to act as the server that powers it). We’ll now learn how to host your app using shinyapps.io, a free service for sharing your Shiny apps online."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#shinyapps-account",
    "href": "course-materials/slides/part2.3A.html#shinyapps-account",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Connect your shinyapps.io account to RStudio\n\n\nGo to shinyapps.io and login or create an account (if you don’t already have one) – I recommend creating your account and logging in using GitHub. To use shinyapps.io, you first need to link your account with RStudio on your computer. Follow the instructions on shinyapps.io when you first create your account to install the {rsconnect} package and authorize your account:"
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#deploy-app",
    "href": "course-materials/slides/part2.3A.html#deploy-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Deploy your app to shinyapps.io\n\n\nOnce your account has been authorized, run rsconnect::deployApp(\"&lt;app_directory_name&gt;\") in your console to deploy your app to shinyapps.io. Here, we’ll run rsconnect::deployApp(\"two-file-app\") to deploy the app we’ve been working on.\n\n\nOnce deployed, a browser will open to your application. The URL will take the form: https://username.shinyapps.io/your_app_directory_name. You should also now see an /rsconnect folder within your app’s directory – this is generated when an application bundle is successfully deployed and contains a DCF file with information on the deployed content (i.e. the name, title, server address, account, URL, and time). This /rsconnect folder should be added and committed into version control (i.e. push it to GitHub!) so that future re-deployments target the same endpoint (i.e. your app’s URL)."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#shinyapps-dashboard",
    "href": "course-materials/slides/part2.3A.html#shinyapps-dashboard",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The shinyapps.io dashboard\n\n\nYour shinyapps.io dashboard provides tons of information about your application metrics, instance (the virtualized server that your app is hosted on) and worker (a special type of R process that an Application Instance runs to service requests to an application) settings, plan management, and more. The free plan (the plan we’re using here today) allows you to deploy five Shiny apps. You are able to archive and / or delete once-deployed apps to make space for new ones.\n\n\n\nCheck out the shinyapps.io user guide for more information on hosting your apps on shinyapps.io."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#other-hosting-options",
    "href": "course-materials/slides/part2.3A.html#other-hosting-options",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Other ways to host your Shiny apps\n\n\nshinyapps.io is not the only Shiny app hosting service (though it’s the easiest to get started with and the only one we’ll be covering in detail in this workshop).\n\nPosit also offers the following:\n\n Shiny server is an open source server platform which you can deploy for free on your own hardware. It requires more setup and configuration, but can be used without a fee. The Bren and NCEAS servers are configured with Shiny Server for hosting for some in-house apps.\n\n\n Posit connect is a paid product that provides an advanced suite of services for hosting Shiny apps, Quarto and R Markdown reports, APIs, and more."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#hosting-recommendations",
    "href": "course-materials/slides/part2.3A.html#hosting-recommendations",
    "title": "EDS 296-1W",
    "section": "",
    "text": "So how should I host my app?\n\n\nThe Bren compute team will work with groups to deploy and maintain apps on in-house servers for up to 6 months after capstone / GP presentations or until they break.\n\n\n\nIf you and / or your client wish to continue using your app after this time, we recommend one of the following two options:\n\n\n\n\n Preferred: Stick with the free tier of shinyapps.io, if you can! This is by far the most straightforward option that requires no server maintenance for you or your client. If your app exceeds the limitations set by the free tier (e.g. requires more active hours, needs more RAM or instances to support high traffic usage, etc.), you / your client have the option to upgrade to a paid tier – there are 5 paid plan types. Check out the shinyapps.io user guide for more information. Consider setting aside your allocated capstone / GP funds to help support a paid shinyapps.io plan.\n\n\n If you have a server-savvy client, they may want to deploy / host your app using their own infrastructure. If your client plans to pursue this option, but does not yet have a their own server configured to do so, we recommend directing them to the online instructions for getting started with Shiny Server. PLEASE NOTE that Bren staff (including the compute team) are unable to provide technical support for clients in server configuration and app deployment / maintenance.\n\n\n\n\nIMPORTANT: Hosting on a server means that shiny applications will be prone to breaking as updates to server software are made. It is important to have an application maintenance plan in place. This may mean identifying who is responsible for maintaining code, or even deciding to decommission applications and archive the code repository when appropriate."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#failed-deployments",
    "href": "course-materials/slides/part2.3A.html#failed-deployments",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A quick note on failed deployments\n\n\nIt’s not uncommon to encounter a failed deployment or even a successful deployment with broken features. The shinyapps.io log should be the first place you turn to for troubleshooting."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#motivating-ex",
    "href": "course-materials/slides/part2.3A.html#motivating-ex",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A (recent) motivating example:\n\nI was recently walking through these workshop materials and following my own instructions for building App #2 (two-file-app). While the app seemed to working just fine locally, the deployment wasn’t so happy. . . rather than seeing a trout scatterplot and penguin histogram, a red error message which read, Error: An error has occurred. Check your logs or contact the app author for clarification, appeared instead:"
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#check-log",
    "href": "course-materials/slides/part2.3A.html#check-log",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Check the deployment log!\n\nHeed the error message! After heading over to shinyapps.io deployment log, we (pretty quickly) see the source of the error: Warning: Error in myCustomTheme: could not find function \"myCustomTheme\":"
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#missing-theme",
    "href": "course-materials/slides/part2.3A.html#missing-theme",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Sure enough. . . myCustomTheme() is missing\n\nWhile I’m not sure exactly how myCustomTheme() disappeared from global.R – it’s possible I accidentally deleted it, but had it stored in my global environment so that my app still ran fine locally – adding it back in, then redeploying lead to a fully functioning, deployed application:"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#title-slide",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 7.2\nUnit Testing"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#testing",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#testing",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Unit Testing\n\n\nCreating automated tests for your apps can save time and effort, ensuring that they continue working as expected."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#LO-testing",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#LO-testing",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives\n\n\nAfter this section, you should:\n\n\n understand some of the reasons why apps break and the benefit of having automated tests\n\n\n have a basic understanding of how to use the {shinytest2} package to write appropriately scoped unit tests\n\n\n know how to rerun and update tests as necessary\n\n\n\nPackages introduced:\n\n\n\n {shinytest2}: provides tools for creating and running automated tests on Shiny applications"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#what-is-testing",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#what-is-testing",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What exactly does “testing” mean?\n\nGenerally speaking, testing refers to the act of evaluating / verifying if a software product or application does what we expect it to do.\n\n\nThere are lots of different types of testing. To name just a few:\n\nUnit testing, where isolated source code is tested to validate expected behavior\nIntegration testing, where various software units or modules are tested as a combined unit (e.g. testing if your app and an API can communicate as intended)\nPerformance testing (which includes things like load testing, stress testing, etc.), where software is tested for its responsiveness and stability under a particular workload\n\n\n\n\nTest can be:\n\nPerformed manually, where a person interacts with different app features to identify bugs, errors, anomalies, etc.\nAutomated, where a person uses test scripts and programs to automate user interactions and validate assumed behavior"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#automated-unit-testing",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#automated-unit-testing",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Here, we’ll focus on automated unit testing\n\nGenerally speaking, testing refers to the act of evaluating / verifying if a software product or application does what we expect it to do.\n\nThere are lots of different types of testing. To name just a few:\n\nUnit testing, where isolated source code is tested to validate expected behavior\nIntegration testing, where various software units or modules are tested as a combined unit (e.g. testing if your app and an API can communicate as intended)\nPerformance testing (which includes things like load testing, stress testing, etc.), where software is tested for its responsiveness and stability under a particular workload\n\n\nTest can be:\n\nPerformed manually, where a person interacts with different app features to identify bugs, errors, anomalies, etc.\nAutomated, where a person uses test scripts and programs to automate user interactions and validate assumed behavior"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#shiny-workflow",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#shiny-workflow",
    "title": "EDS 296-1W",
    "section": "",
    "text": "This workflow should look a bit familiar . . .\n\n\nAdd / adjust some reactivity\nClick “Run App”\nManually experiment with the new feature to see if it works\nRinse & repeat\n\n\n\nBut what if you have 20 apps?\n\n\n\nOr many team members?\n\n\n\nIt becomes increasingly challenging to remember all the features you need to test, or how each works. Things can also get lost in translation with manual testing (e.g. can you explain to your coworker(s) all of your app’s features and make sure that they manually test it properly?).\n\nSlide adapted from Barret Schloerke’s rstudio::conf(2022) talk, {shinytest2}: Unit testing for Shiny applications"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#why-test",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#why-test",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Why test our Shiny apps?\n\nIt’s almost inevitable that our app(s) will (at some point) break – there are lots of reasons why this happens, but to name a few:\n\n\n an upgraded R package(s) has a different behavior (this includes {shiny}) – this is especially relevant for those apps hosted on servers, where server software (including packages) may be updated by system administrators\n\n\n\n\n you make changes to your app (e.g. add new features, refactor code)\n\n\n\n\n an external data source stops working or returns data in a different format than that expected by your app\n\n\n\n\nManually testing Shiny apps is takes a lot of time and effort, is often inconsistent, and doesn’t scale well (e.g. for larger apps, many apps, or for larger teams of collaborators).\n\n\n\n\nIt can save a lot of time and headache to have an automated system that checks if your app is working as expected."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#shinytest2",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#shinytest2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Enter the {shinytest2} package\n\nThe {shinytest2} package provides useful tools for unit testing Shiny apps. We’ll use these unit tests to ensure that desired app behavior remains consistent, even after changes to the app’s code (the documentation refers to this type of unit testing as regression testing – we’ll use these tests to verify that app behavior does not regress).\n\n\n \n\nFrom the {shinytest2} documentation:\n\n\n“{shinytest2} uses {testthat}’s snapshot-based testing strategy. The first time it runs a set of tests for an application, it performs some scripted interactions with the app and takes one or more snapshots of the application’s state. These snapshots are saved to disk so that future runs of the tests can compare their results to them.”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{shinytest2} uses {chromote} to render your app in a headless Chromium browser – by default, it uses Google Chrome, so make sure you have that installed on your OS"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#setting-stage",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#setting-stage",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Let’s imagine . . .\n\nYour boss has tasked you with building a Shiny app, and asks that you begin with a feature that greets users by name. Create a new folder, testing-app/, in your GitHub repo and add the following files:\n\n\n\n\n\nglobal.Rui.Rserver.R\n\n\n\n\n\n~/testing-app/global.R\n\n# load libraries ----\nlibrary(shiny)\n\n\n\n\n\n\n\n~/testing-app/ui.R\n\nui &lt;- fluidPage(\n\n  # Feature 1 ------------------------------------------------------------------\n\n  h3(\"Feature 1\"),\n\n  # fluidRow (Feature 1: greeting) ----\n  fluidRow(\n\n    # greeting sidebarLayout ----\n    sidebarLayout(\n\n      # greeting sidebarPanel ----\n      sidebarPanel(\n\n        textInput(inputId = \"name_input\",\n                  label = \"What is your name?\"),\n\n        actionButton(inputId = \"greeting_button_input\",\n                     label = \"Greet\"),\n\n      ), # END greeting sidebarPanel\n\n      # greeting mainPanel ----\n      mainPanel(\n\n        textOutput(outputId = \"greeting_output\"),\n\n      ) # END greeting mainPanel\n\n    ) # END greeting sidebarLayout\n\n  ), # END fluidRow (Feature 1: greeting)\n  \n) # END fluidPage \n\n\n\n\n\n\n\n~/testing-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # Feature 1 ------------------------------------------------------------------\n\n  output$greeting_output &lt;- renderText({\n\n    req(input$greeting_button_input) # req(): textOutput doesn't appear until button is first pressed\n    paste0(\"Hello \", isolate(input$name_input), \"!\") # isolate(): prevents textOutput from updating until button is pressed again\n\n  }) \n}"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#run-ft1-app",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#run-ft1-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Manually test your app and make note of how it works\n\n\n\n\nLet’s say that you are satisfied with your work (yay!) and are now ready to write some automated tests to ensure consistent behavior as you continue to build out additional features."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#ft1-assertions",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#ft1-assertions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Write down your assertions\n\nBefore we dive into writing any tests, it’s super helpful to inspect your app and importantly, jot down (in your own words) the expected behaviors of your application. These will form the basis of the assertions made in your tests.\n\n\nI find it helpful to make a table that outlines both (a) what actions can be taken by a user? and (b) what are the expected outputs / behaviors that result from those actions?\n\n\n\nFor example:\n\n\n\n\n\n\n\nAction(s)\nExpectation(s)\n\n\n\n\nType [some text value] in text box &gt; click Greet button\nGreeting output is “Hello [some text value]!”\n\n\nType [some text value] in text box &gt; click Greet button &gt; type [some other text value] in text box &gt; click Greet button\nGreeting output is “Hello [some text value]!”, then updates to “Hello [some other text value]!”\n\n\nClick Greet button\nGreeting output is “Hello !”"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#assertions-note",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#assertions-note",
    "title": "EDS 296-1W",
    "section": "",
    "text": "One more important note (actually, a few)\n\n\n\nAs much as you try, testing will never be exhaustive. You can only test for scenarios that you think of.\n\n\n\n\nThe goal is to put yourself in the shoes of a user, and test scenarios that you think your users will encounter. If you test those use-cases, you’ll cover the majority of expectations.\n\n\n\n\n\nAs users interact with your app, they’ll stumble upon and reveal use-cases / scenarios that you hadn’t tested for…and you can update your app / write tests accordingly.\n\n\n\n\n\nOver time, your ability to identify both how users will interact with your app and what to test will improve."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#testing-procedure",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#testing-procedure",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Turn “plain language” assertions into actual tests using the {shinytest2} workflow\n\n\nGenerally speaking, that workflow looks something like this:\n\n\n(1) Run shinytest2::record_test(&lt;app-directory&gt;) in your Console to launch the app recorder in a browser window\n\n\n\n(2) Interact with your application and tell the recorder to make an expectation of the app’s state\n\n\n\n(3) Give your test a unique name and quit the recorder to save and execute your tests\n\n\n\n\nWe’ll repeat this workflow to write tests for each of our three assertions."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#chromote-timeout",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#chromote-timeout",
    "title": "EDS 296-1W",
    "section": "",
    "text": "FYI (a warning about chromote time outs)\n\n  \nIf you receive the following error message after running, shinytest2::record_test(\"testing-app\"), you’ll need to restart R:\n\n\nCaused by error:\n! Chromote: timed out waiting for response to command Target.createTarget\n\n\nIt’s a pretty annoying error, which seems to be an ongoing issue with {chromote}. R may be slow to restart (and I’ve had to restart numerous times )."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#ft1-test1",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#ft1-test1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Let’s test our first assertion . . .\n\n…which is that when a user types [some text value] into the text box and clicks the Greet button (i.e. the actions), the greeting output will return Hello [some text value]! (i.e. the expectation). We’ll substitute a known value (e.g. “Sam”) for [some text value] in our test.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSteps:\n(1) Run shinytest2::record_test(\"testing-app\") in the Console\n(2) Type Sam into the text box &gt; click the Greet button &gt; click Expect Shiny Values\n(3) Give the test a unique name (e.g. one-name-greeting) &gt; click Save test and exit\n(4) The test recorder will quit, and your test will automatically execute (it should pass!)\n\n\n\nNotice that your actions (e.g. typing text, clicking the button) are recorded as code in the right-hand panel – this is your test code, and it’ll be saved when you quit the recorder."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#test-auto-executes",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#test-auto-executes",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Your test should automatically run (and pass!)\n\nAfter quitting the test recorder, the following will happen:\n\na test script will be saved in testing-app/tests/testthat/test-shinytest2.R\nif you’re running in the RStudio IDE, test-shinytest2.R will automatically open in the editor\nshinytest2::test_app() is run behind the scenes to execute the test script\n\nYou should see the following in your RStudio Console:\n\n• Saving test runner: tests/testthat.R\n• Saving test file: tests/testthat/test-shinytest2.R\n✔ Adding 'shinytest2::load_app_env()' to 'tests/testthat/setup-shinytest2.R'\n• Running recorded test: tests/testthat/test-shinytest2.R\n✔ | F W  S  OK | Context\n✔ |   2      1 | shinytest2 [1.4s]                                                         \n───────────────────────────────────────────────────────────────────────────────────────────\nWarning (test-shinytest2.R:7:3): {shinytest2} recording: one-name-greeting\nAdding new file snapshot: 'tests/testthat/_snaps/one-name-greeting-001_.png'\n\nWarning (test-shinytest2.R:7:3): {shinytest2} recording: one-name-greeting\nAdding new file snapshot: 'tests/testthat/_snaps/one-name-greeting-001.json'\n───────────────────────────────────────────────────────────────────────────────────────────\n\n══ Results ════════════════════════════════════════════════════════════════════════════════\nDuration: 1.5 s\n\n[ FAIL 0 | WARN 2 | SKIP 0 | PASS 1 ]"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#test-folder",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#test-folder",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Understanding the contents of tests/\n\nThe first time you record a test, {shinytest2} generates number of directories / subdirectories, along with a bunch of files. The next few slides explain these in more detail.\n\nAfter creating your first test, your repo structure should look something like this:\n\n.\n├── testing-app/                                  \n│   └── global.R                     \n│   └── ui.R                         \n│   └── server.R                      \n│   └── tests/                    # generated the first time you record and save a test    \n│      └── testthat.R             # see note below\n│      └── testthat/     \n│         └── setup-shinytest2.R  # see note below\n│         └── test-shinytest2.R   # see slide 18\n│         └── snaps/               \n│            └── shinytest2/      \n│               └── *001.json     # see slide 19\n│               └── *001_.png     # see slide 19 \n\n\ntestthat.R: includes the code, shinytest2::test_app(), which is executed when you click the Run Tests button in RStudio\nsetup-shinytest2.R: includes the code, shinytest2::load_app_env(), which loads any application support files (e.g. global.R and / or anything inside R/) into the testing environment"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#test-shinytest2",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#test-shinytest2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "test-shinytest2.R (test code)\n\nAll tests will be saved to tests/testthat/test-shinytest2.R. Yours should look similar to the code below (sans annotations). You may have a different viewport height / width (depending on the size of your viewport when you recorded your test), and if you mistyped / deleted any characters in the textInput, you’ll see multiple app$set_inputs() statements, reflecting these actions:\n\n\n\n\n~/testing-app/tests/testthat/test-shinytest2.R\n\nlibrary(shinytest2)\n\n# runs our test\ntest_that(\"{shinytest2} recording: one-name-greeting\", {\n  \n  # start Shiny app in a new R session along with chromote's headless browser that's used to simulate user actions\n  app &lt;- AppDriver$new(name = \"one-name-greeting\", height = 838, width = 1298)\n  \n  # set the textInput (with Id `name_input`) to the value `Sam`\n  app$set_inputs(name_input = \"Sam\")\n  \n  # click the actionButton (with Id `greeting_button_input`)\n  app$click(\"greeting_button_input\")\n  \n  # save the expected input, output, and export values to a JSON snapshot and generates a screenshot of the app\n  app$expect_values()\n})"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#snaps",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#snaps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The snaps/ folder\n\nWhen shinytest2::test_app() runs your test code, it plays back the specified actions (e.g. setting the textInput to Sam, then clicking the Greet button), and records your application’s resulting state as a snapshot. Snapshots are saved to the tests/testthat/shinytest2/_snaps/ folder. You should see two different snapshot files:\n\n\n\n\none-name-greeting-001_.png, a screenshot of the app when app$expect_values() was called:\n\n\n\n\n\n\n\n\n\n\n\n\none-name-greeting-001.json, a JSON representation of the state of the app when app$expect_values() was called:\n\n\n{\n  \"input\": {\n    \"greeting_input\": 1,\n    \"name_input\": \"Sam\"\n  },\n  \"output\": {\n    \"greeting_output\": \"Hello Sam!\"\n  },\n  \"export\": {\n\n  }\n}\n\n\n\n\nWe don’t have any exported values in our app, and we won’t be covering those here. Read more about exported values in the {shinytest2} documentation."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#test-recap",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#test-recap",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A quick recap of our test files\n\n\nYou can think of your test as a recipe for {shinytest2} to follow to simulate user actions (i.e. inputs).\n\nThese simulations are performed programmatically whenever you click Run Test.\n\n\n\n\nThe JSON file defines your test’s expected outputs given known inputs.\n\nWhen you rerun your test, the same user actions (inputs) are simulated and the resulting outputs are compared against prior snapshots. We expect the resulting outputs to be the same each time. If the resulting outputs differ from our expectations, the test will fail.\n\n\n\n\n\nThe screenshot (*_.png file) can be used to visually inspect your app’s state at the time of your test.\n\nThe *_.png file differs from a *.png file (which we did not capture). *.png files are screenshots of the application from app$expect_screenshot() (i.e. by clicking Expect screenshot in the app recorder), which you can use to ensure that the visual state of the application does not change. If subsequent screenshots differ (even by just a pixel!), your test will fail. This type of testing is quite brittle, and we won’t be covering it further.\n\n\n\n\n\nAll of the above files should be tracked with git."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#rerun-tests",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#rerun-tests",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Rerun your test\n\nRerun your test by clicking on the Run Tests button, which is visible when test-shinytest2.R is open. They should all still pass (we haven’t changed anything since our first test run)!"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#test-other-assertions",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#test-other-assertions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Test our remaining assertions\n\n  \n\n\n\n\n\n\n\nAction(s)\nExpectation(s)\n\n\n\n\n Type [some text value] in text box &gt; click Greet button\nGreeting output is “Hello [some text value]!”\n\n\n Type [some text value] in text box &gt; click Greet button &gt; type [some other text value] in text box &gt; click Greet button\nGreeting output is “Hello [some text value]!”, then updates to “Hello [some other text value]!”\n\n\n Click Greet button\nGreeting output is “Hello !”\n\n\n\n\n\n\n−+\n03:00"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#feature1-complete-tests",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#feature1-complete-tests",
    "title": "EDS 296-1W",
    "section": "",
    "text": "test-shinytest2.R should now look like this:\n\nOr at least fairly close to this (maybe you chose different names to test with or had a different viewport size):\n\n\n\n~/testing-app/tests/testthat/test-shinytest2.R\n\nlibrary(shinytest2)\n\ntest_that(\"{shinytest2} recording: one-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"one-name-greeting\", height = 1335, width = 1126)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values()\n})\n\n\ntest_that(\"{shinytest2} recording: consecutive-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"consecutive-name-greeting\", height = 961, width = 1322)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values()\n  app$set_inputs(name_input = \"Kat\")\n  app$click(\"greeting_button_input\")\n  app$expect_values()\n})\n\n\ntest_that(\"{shinytest2} recording: no-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"no-name-greeting\", height = 837, width = 1294)\n  app$click(\"greeting_button_input\")\n  app$expect_values()\n})\n\n\n\nYou can rerun all your tests at once by clicking the Run Tests button again (they should all pass!)."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#improve-feature1",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#improve-feature1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Your boss requests an improvement on feature 1\n\nYour boss is excited to see your progress, but would love to see an informative message pop up when a user clicks the Greet button without first typing in a name (currently, clicking the Greet button without typing a name will return “Hello !”… which is a bit odd). You make the following update to your app:\n\n\n\n~/testing-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # Feature 1 ------------------------------------------------------------------\n  \n  # observe() automatically re-executes when dependencies change (i.e. when `name_input` is updated), but does not return a result ----\n  observe({\n    \n    # if the user does not type anything before clicking the button, return the message, \"Please type a name, then click the Greet button.\" ----\n    if (nchar(input$name_input) == 0) {\n      output$greeting_output &lt;- renderText({\n        \"Please type a name, then click the Greet button.\"\n      })\n      \n      # if the user does type a name before clicking the button, return the greeting, \"Hello [name]!\" ----\n    } else {\n      output$greeting_output &lt;- renderText({\n        paste0(\"Hello \", isolate(input$name_input), \"!\")\n      })\n    }\n  }) |&gt;\n    \n    # Execute the above observer once the button is pressed ----\n    bindEvent(input$greeting_button_input)\n}"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#no-name-greeting-breaks",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#no-name-greeting-breaks",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Rerun your tests after making your update\n\n\nOur first two tests pass, but the third one failed . You’ll see something like this to start:\n\n\n\n\n\n\n\n\n\n\nClick on the Output tab for more information on why the test failed (see next slide)."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#output-tab",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#output-tab",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The Output tab tells us what caused our test to fail\n\nThere’s a lot of helpful information here, but lines 6-7 tell us that our no-name-greeting test failed, while lines 17-27 here tell us exactly what changed:\n\n==&gt; Testing R file using 'testthat'\n\nLoading required package: shiny\n[ FAIL 1 | WARN 1 | SKIP 0 | PASS 3 ]\n\n── Failure (test-shinytest2.R:25:3): {shinytest2} recording: no-name-greeting ──\nSnapshot of `file` to 'shinytest2/no-name-greeting-001.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:25:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\n── Warning (test-shinytest2.R:25:3): {shinytest2} recording: no-name-greeting ──\nDiff in snapshot file `shinytest2no-name-greeting-001.json`\n&lt; before                                                                   \n&gt; after                                                                    \n@@ 5,5 / 5,5 @@                                                            \n    },                                                                     \n    \"output\": {                                                            \n&lt;     \"greeting_output\": \"Hello !\"                                         \n&gt;     \"greeting_output\": \"Please type a name, then click the Greet button.\"\n    },                                                                     \n    \"export\": {                                                            \n[ FAIL 1 | WARN 1 | SKIP 0 | PASS 3 ]\nWarning messages:\n1: package ‘testthat’ was built under R version 4.3.1 \n2: package ‘shiny’ was built under R version 4.3.1 \n\nTest complete"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#update-expectations",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#update-expectations",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We’ll want to update our expected results\n\nOur test correctly failed (the expected output was different)! But we’ll want to update our test’s expected output so that it reflects the changes we made to our app (i.e. that when a user clicks the Greet button without first typing a name, the text “Please type a name before clicking the Greet button.” is printed).\n\n\nWe can use use testthat::snapshot_review(), which opens a Shiny app for visually comparing differences (aka diffs) between snapshots and accepting (or rejecting) updates.\n\n\n\nSteps:\n\nInstall the {diffviewer} package\n\n\ninstall.packages(\"diffviewer\")\n\n\nRun the following in your Console to launch the app:\n\n\ntestthat::snapshot_review(path = \"testing-app/tests/testthat/\")\n\n\nhttps://github.com/r-lib/testthat/blob/f060ccec365e1343ae926c53c215a423b295d7a8/R/snapshot-manage.R#L4"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#snapshot-review",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#snapshot-review",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Explore and accept the updated test expectations\n\nThe app allows for a few different ways to view snapshot diffs. Click Accept for both the PNG and JSON files, then close the window:"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#updated-snapshots",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#updated-snapshots",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Check out your updated snapshots\n\nCheck out no-name-greeting-001_.png and no-name-greeting-001.json snapshots, which should be updated to reflect the new test expectations."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#feature2-code",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#feature2-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Your boss requests another feature!\n\nYour boss is jazzed about your latest improvements, and now asks that you add a file uploader which accepts a standardized CSV file (predictable headings / data types) then averages values by column. You update your app:\n\nglobal.Rui.Rserver.R\n\n\n\n\n\n~/testing-app/global.R\n\n# load libraries ----\nlibrary(shiny)\nlibrary(tidyverse)\n\n\n\n\n\n\n\n~/testing-app/ui.R\n\nui &lt;- fluidPage(\n\n  # Feature 1 ------------------------------------------------------------------\n\n  h3(\"Feature 1\"),\n\n  # fluidRow (Feature 1: greeting) ----\n  fluidRow(\n\n    # greeting sidebarLayout ----\n    sidebarLayout(\n\n      # greeting sidebarPanel ----\n      sidebarPanel(\n\n        textInput(inputId = \"name_input\",\n                  label = \"What is your name?\"),\n\n        actionButton(inputId = \"greeting_button_input\",\n                     label = \"Greet\"),\n\n      ), # END greeting sidebarPanel\n\n      # greeting mainPanel ----\n      mainPanel(\n\n        textOutput(outputId = \"greeting_output\"),\n\n      ) # END greeting mainPanel\n\n    ) # END greeting sidebarLayout\n\n  ), # END fluidRow (Feature 1: greeting)\n  \n  tags$hr(),\n\n  # Feature 2 ------------------------------------------------------------------\n\n  h3(\"Feature 2\"),\n\n  # fluidRow (Feature 2: file upload) -----\n  fluidRow(\n\n    # file upload sidebarLayout ----\n    sidebarLayout(\n\n      # file upload sidebarPanel ----\n      sidebarPanel(\n\n        # upload fileInput -----\n        fileInput(inputId = \"csv_input\",\n                  label = \"Upload your CSV file:\",\n                  multiple = FALSE,\n                  accept = c(\".csv\"),\n                  buttonLabel = \"Browse\",\n                  placeholder = \"No file selected\"), # END upload fileInput\n\n      ), # END file upload sidebarPanel\n\n      # fileInput mainPanel ----\n      mainPanel(\n\n        tableOutput(outputId = \"summary_table_output\")\n\n      ) # END file upload mainPanel\n\n    ) # END file upload sidebarLayout\n\n  ), # END fluidRow (Feature 2: file upload)\n  \n) # END fluidPage \n\n\n\n\n\n\n\n~/testing-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # Feature 1 ------------------------------------------------------------------\n  \n  # observe() automatically re-executes when dependencies change (i.e. when `name_input` is updated), but does not return a result ----\n  observe({\n    \n    # if the user does not type anything before clicking the button, return the message, \"Please type a name, then click the Greet button.\" ----\n    if (nchar(input$name_input) == 0) {\n      output$greeting_output &lt;- renderText({\n        \"Please type a name, then click the Greet button.\"\n      })\n      \n      # if the user does type a name before clicking the button, return the greeting, \"Hello [name]!\" ----\n    } else {\n      output$greeting_output &lt;- renderText({\n        paste0(\"Hello \", isolate(input$name_input), \"!\")\n      })\n    }\n  }) |&gt;\n    \n    # Execute the above observer once the button is pressed ----\n    bindEvent(input$greeting_button_input)\n  \n  # Feature 2 ------------------------------------------------------------------\n  \n  # file upload ----\n  output$summary_table_output &lt;- renderTable({\n    \n    # NOTE: `input$csv_input` will be NULL initially\n    # after user selects / uploads a file, it will be a df with 'name', 'size', 'type', 'datapath' cols\n    # 'datapath' col will contain the local filenames where data can be found\n    # see: https://shiny.posit.co/r/reference/shiny/1.4.0/fileinput\n    \n    # save input value to object named `inputFile` ----\n    inputFile &lt;- input$csv_input\n    \n    # if a file has not been uploaded yet, don't return / print anything ----\n    if(is.null(inputFile))\n      return(NULL)\n    \n    # read in file using it's datapath ----\n    df_raw &lt;- read_csv(inputFile$datapath)\n    \n    # validate that the uploaded CSV has the expected column names ----\n    required_cols &lt;- c(\"temp_c\", \"precip_cm\", \"wind_kmhr\", \"pressure_inhg\")\n    column_names &lt;- colnames(df_raw)\n    validate(\n      need(all(required_cols %in% column_names), \"Your CSV does not have the expected column headers.\")\n    )\n    \n    # return summarized data in a table ----\n    df_summary &lt;- df_raw |&gt;\n      summarize(\n        avg_temp = mean(temp_c),\n        avg_precip = mean(precip_cm),\n        avg_wind = mean(wind_kmhr),\n        avg_pressure = mean(pressure_inhg),\n        tot_num_obs = length(temp_c)\n      ) |&gt;\n      rename(\"Mean Temperature (C)\" = \"avg_temp\",\n             \"Mean Precipitation (cm)\" = \"avg_precip\",\n             \"Mean Wind Speed (km/hr)\" = \"avg_wind\",\n             \"Mean Pressure (inHg)\" = \"avg_pressure\",\n             \"Total Number of Observations\" = \"tot_num_obs\")\n    return(df_summary)\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#run-ft2-app",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#run-ft2-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app & play around with the new feature\n\nYou can practice uploading this csv file, real-sample-data.csv, which is representative of the data that your team will want processed.\n\n\n\nYour boss gives you the green light to start writing tests."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#ft2-assertions",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#ft2-assertions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Begin by jotting down any assertions you can think of\n\nChat with the person(s) next to you and try to come up with a few different actions / scenarios a user may encounter.\n\n\n\n−+\n05:00\n\n\n\n\n\n\n\n\n\n\n\nAction(s)\nExpectation(s)\n\n\n\n\nClick Browse &gt; Select CSV file with correct column headers and data\nThe data set is returned as a table with renamed / averaged columns\n\n\nClick Browse &gt; Select CSV with incorrect column headers\nAn error message, “Your CSV does not have the expected column headers” is returned\n\n\nClick Browse &gt; Select empty CSV (no column headers or data)\nAn error message, “Your CSV does not have the expected column headers” is returned\n\n\nClick Browse &gt; Select CSV file with only column headers and no data\nThe data set is returned as a table with renamed columns and NA values\n\n\nClick Browse &gt; Select CSV file with only data and no column headers\nAn error message, “Your CSV does not have the expected column headers” is returned\n\n\nClick Browse &gt; Select CSV file with correct column headers and data &gt; Click Browse again &gt; Select a different CSV with correct column headers and data\nThe first data set is returned as a table with renamed / averaged columns is returned, then the second data set is returned as a table with renamed / averaged columns"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#create-test-data",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#create-test-data",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We’ll also need some test data\n\nWe’ll need CSVs which can be used as representative examples for each of the scenarios we want to test for. This includes:\n\ntwo different CSVs, each with correct column headers / data\none CSV with incorrect column headers\none completely blank CSV\none CSV with column headers but missing data\none CSV with data but missing column headers\n\n\nThe test data do not necessarily need to be “real” (i.e. real measurements collected by instruments or people). They can be simple, short data sets, so long as they cover the scenarios we’ve discussed.\n\n\nDownload these test data CSV files, which we’ll use to create our tests (you can save them to your Desktop for now)."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#storing-test-data",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#storing-test-data",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Store test data in tests/testthat/\n\n\nWhenever you record a file upload event to a fileInput, the test script will include a line similar to this,\n\n\napp$uploadFile(file1 = \"your-data.csv\")\n\n\nwhich indicates the file name, but not the file path. {shinytest2} will look for a test file with that name inside the tests/testthat/ folder.\n\n\nMake copies of all of the test files into tests/testthat/."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#ft2-test1",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#ft2-test1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Okay, let’s finally write our first test!\n\n\nRepeat the steps from earlier:\n(1) Run shinytest2::record_test(\"testing-app\") in the Console\n(2) Click Browse &gt; select cols-and-data1.csv from wherever you have it saved (mine is on my Desktop) &gt; click Expect Shiny Values\n(3) Give the test a unique name (e.g. upload-cols-and-data) &gt; click Save test and exit\n(4) The test recorder will quit, and your test will automatically execute\n\n\n\nWhat happens?\n\n\n\n\nOur last three tests failed??? What???"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#old-tests-fail",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#old-tests-fail",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Explore the diffs in your Console\n\nYour console should look similar to this:\n\nListening on http://127.0.0.1:6179\n{shiny} R stderr ----------- Loading required package: shiny\n{shiny} R stderr ----------- Warning: package ‘shiny’ was built under R version 4.3.1\n{shiny} R stderr ----------- Running application in test mode.\n{shiny} R stderr ----------- Warning: package ‘ggplot2’ was built under R version 4.3.1\n{shiny} R stderr ----------- Warning: package ‘dplyr’ was built under R version 4.3.1\n{shiny} R stderr ----------- Warning: package ‘stringr’ was built under R version 4.3.1\n{shiny} R stderr ----------- \n{shiny} R stderr ----------- Listening on http://127.0.0.1:4693\n{shiny} R stdout ----------- ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n{shiny} R stdout ----------- ✔ dplyr     1.1.4     ✔ readr     2.1.4\n{shiny} R stdout ----------- ✔ forcats   1.0.0     ✔ stringr   1.5.1\n{shiny} R stdout ----------- ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n{shiny} R stdout ----------- ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n{shiny} R stdout ----------- ✔ purrr     1.0.2     \n{shiny} R stdout ----------- ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n{shiny} R stdout ----------- ✖ dplyr::filter() masks stats::filter()\n{shiny} R stdout ----------- ✖ dplyr::lag()    masks stats::lag()\n{shiny} R stdout ----------- ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n{shiny} R stdout ----------- Rows: 4 Columns: 4\n{shiny} R stdout ----------- ── Column specification ────────────────────────────────────────────────────────\n{shiny} R stdout ----------- Delimiter: \",\"\n{shiny} R stdout ----------- dbl (4): temp_c, precip_cm, wind_kmhr, pressure_inhg\n{shiny} R stdout ----------- \n{shiny} R stdout ----------- ℹ Use `spec()` to retrieve the full column specification for this data.\n{shiny} R stdout ----------- ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n• Saving test file: tests/testthat/test-shinytest2.R\n• Modify '/Users/samanthacsik/git/EDS-430/testing-shiny-apps/testing-app/tests/testthat/test-shinytest2.R'\n• Running recorded test: tests/testthat/test-shinytest2.R\nLoading required package: testthat\n── Attaching core tidyverse packages ─────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ───────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::edition_get()   masks testthat::edition_get()\n✖ dplyr::filter()        masks stats::filter()\n✖ purrr::is_null()       masks testthat::is_null()\n✖ dplyr::lag()           masks stats::lag()\n✖ readr::local_edition() masks testthat::local_edition()\n✖ dplyr::matches()       masks tidyr::matches(), testthat::matches()\nℹ Use the conflicted package to force all conflicts to become errors\n✔ | F W  S  OK | Context\n✖ | 4 6      1 | shinytest2 [7.4s]                                                                                             \n───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\nFailure (test-shinytest2.R:7:3): {shinytest2} recording: one-name-greeting\nSnapshot of `file` to 'shinytest2/one-name-greeting-001.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:7:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\nWarning (test-shinytest2.R:7:3): {shinytest2} recording: one-name-greeting\nDiff in snapshot file `shinytest2one-name-greeting-001.json`\n&lt; before                                &gt; after                               \n@@ 1,9 @@                               @@ 1,11 @@                            \n  {                                       {                                   \n    \"input\": {                              \"input\": {                        \n~                                       &gt;     \"csv_input\": null,              \n      \"greeting_button_input\": 1,             \"greeting_button_input\": 1,     \n      \"name_input\": \"Sam\"                     \"name_input\": \"Sam\"             \n    },                                      },                                \n    \"output\": {                             \"output\": {                       \n&lt;     \"greeting_output\": \"Hello Sam!\"   &gt;     \"greeting_output\": \"Hello Sam!\",\n~                                       &gt;     \"summary_table_output\": null    \n    },                                      },                                \n    \"export\": {                             \"export\": {                       \n\nFailure (test-shinytest2.R:15:3): {shinytest2} recording: consecutive-name-greeting\nSnapshot of `file` to 'shinytest2/consecutive-name-greeting-001.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:15:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\nWarning (test-shinytest2.R:15:3): {shinytest2} recording: consecutive-name-greeting\nDiff in snapshot file `shinytest2consecutive-name-greeting-001.json`\n&lt; before                                &gt; after                               \n@@ 1,9 @@                               @@ 1,11 @@                            \n  {                                       {                                   \n    \"input\": {                              \"input\": {                        \n~                                       &gt;     \"csv_input\": null,              \n      \"greeting_button_input\": 1,             \"greeting_button_input\": 1,     \n      \"name_input\": \"Sam\"                     \"name_input\": \"Sam\"             \n    },                                      },                                \n    \"output\": {                             \"output\": {                       \n&lt;     \"greeting_output\": \"Hello Sam!\"   &gt;     \"greeting_output\": \"Hello Sam!\",\n~                                       &gt;     \"summary_table_output\": null    \n    },                                      },                                \n    \"export\": {                             \"export\": {                       \n\nFailure (test-shinytest2.R:18:3): {shinytest2} recording: consecutive-name-greeting\nSnapshot of `file` to 'shinytest2/consecutive-name-greeting-002.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:18:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\nWarning (test-shinytest2.R:18:3): {shinytest2} recording: consecutive-name-greeting\nDiff in snapshot file `shinytest2consecutive-name-greeting-002.json`\n&lt; before                                &gt; after                               \n@@ 1,9 @@                               @@ 1,11 @@                            \n  {                                       {                                   \n    \"input\": {                              \"input\": {                        \n~                                       &gt;     \"csv_input\": null,              \n      \"greeting_button_input\": 2,             \"greeting_button_input\": 2,     \n      \"name_input\": \"Kat\"                     \"name_input\": \"Kat\"             \n    },                                      },                                \n    \"output\": {                             \"output\": {                       \n&lt;     \"greeting_output\": \"Hello Kat!\"   &gt;     \"greeting_output\": \"Hello Kat!\",\n~                                       &gt;     \"summary_table_output\": null    \n    },                                      },                                \n    \"export\": {                             \"export\": {                       \n\nFailure (test-shinytest2.R:25:3): {shinytest2} recording: no-name-greeting\nSnapshot of `file` to 'shinytest2/no-name-greeting-001.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:25:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\nWarning (test-shinytest2.R:25:3): {shinytest2} recording: no-name-greeting\nDiff in snapshot file `shinytest2no-name-greeting-001.json`\n&lt; before                                                                    \n&gt; after                                                                     \n@@ 1,9 / 1,11 @@                                                            \n  {                                                                         \n    \"input\": {                                                              \n&gt;     \"csv_input\": null,                                                    \n      \"greeting_button_input\": 1,                                           \n      \"name_input\": \"\"                                                      \n    },                                                                      \n    \"output\": {                                                             \n&lt;     \"greeting_output\": \"Please type a name, then click the Greet button.\" \n&gt;     \"greeting_output\": \"Please type a name, then click the Greet button.\",\n&gt;     \"summary_table_output\": null                                          \n    },                                                                      \n    \"export\": {                                                             \n\nWarning (test-shinytest2.R:32:3): {shinytest2} recording: upload-cols-and-data\nAdding new file snapshot: 'tests/testthat/_snaps/upload-cols-and-data-001_.png'\n\nWarning (test-shinytest2.R:32:3): {shinytest2} recording: upload-cols-and-data\nAdding new file snapshot: 'tests/testthat/_snaps/upload-cols-and-data-001.json'\n───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n\n══ Results ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nDuration: 7.9 s\n\n── Failed tests ───────────────────────────────────────────────────────────────────────────────────────────────────────────────\nFailure (test-shinytest2.R:7:3): {shinytest2} recording: one-name-greeting\nSnapshot of `file` to 'shinytest2/one-name-greeting-001.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:7:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\nFailure (test-shinytest2.R:15:3): {shinytest2} recording: consecutive-name-greeting\nSnapshot of `file` to 'shinytest2/consecutive-name-greeting-001.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:15:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\nFailure (test-shinytest2.R:18:3): {shinytest2} recording: consecutive-name-greeting\nSnapshot of `file` to 'shinytest2/consecutive-name-greeting-002.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:18:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\nFailure (test-shinytest2.R:25:3): {shinytest2} recording: no-name-greeting\nSnapshot of `file` to 'shinytest2/no-name-greeting-001.json' has changed\nRun testthat::snapshot_review('shinytest2/') to review changes\nBacktrace:\n    ▆\n 1. └─app$expect_values() at test-shinytest2.R:25:3\n 2.   └─shinytest2:::app_expect_values(...)\n 3.     └─shinytest2:::app__expect_snapshot_file(...)\n 4.       ├─base::withCallingHandlers(...)\n 5.       └─testthat::expect_snapshot_file(...)\n\n[ FAIL 4 | WARN 6 | SKIP 0 | PASS 1 ]\nError: Test failures\nIn addition: Warning messages:\n1: package ‘testthat’ was built under R version 4.3.1 \n2: package ‘ggplot2’ was built under R version 4.3.1 \n3: package ‘dplyr’ was built under R version 4.3.1 \n4: package ‘stringr’ was built under R version 4.3.1"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#why-fail",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#why-fail",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Why did the old tests fail?\n\n\n\nWhat do you notice about each of the failed tests?\n\n\n\n\nFor an easier time comparing diffs for each snapshot, open the snapshot reviewer (run in the Console):\n\n\ntestthat::snapshot_review(path = \"testing-app/tests/testthat/\")\n\n\n\nUse the drop down to switch between snapshots. Don’t Accept any updates just yet."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#scope-too-large1",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#scope-too-large1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The scope of our assertions was too large\n\nThe scope of our test assertions was too large to isolate the behavior that we were looking to test.\n\nLet’s look at our one-name-greeting-001_.png snapshot as an example to better understand why our first four tests of feature 1 (greeting) failed:"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#scope-too-large2",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#scope-too-large2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The scope of our assertions was too large\n\nThe scope of our test assertions was too large to isolate the behavior that we were looking to test.\nOur one-name-greeting-001.json file provides an alternative view."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#scope-too-large3",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#scope-too-large3",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The scope of our assertions was too large\n\n\n\nOur test failed, despite the behavior of our test subject not changing (in other words, our test failed, even though the expected output, “Hello Sam!” stayed the same.)\n\n\n\n\nA good test is able to isolate the behavior of it’s subject so that you can trust the result of the test. In this case, our tests failed when they shouldn’t have…\n\n\n\n\n\nTherefore, we need to modify our tests so that they capture a targeted value expectation, rather than the state of our entire application. For example:\n\n\n\n\ntest_that(\"{shinytest2} recording: one-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"one-name-greeting\", height = 815, width = 1276)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values()\n})\n\n\n\ntest_that(\"{shinytest2} recording: one-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"one-name-greeting\", height = 815, width = 1276)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#targeted-expectations",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#targeted-expectations",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Update tests so that they make targeted value expectations\n\n\n\n\n~/testing-app/tests/testthat/test-shinytest2.R\n\nlibrary(shinytest2)\n\ntest_that(\"{shinytest2} recording: one-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"one-name-greeting\", height = 815, width = 1276)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: consecutive-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"consecutive-name-greeting\", height = 961, width = 1322)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n  app$set_inputs(name_input = \"Kat\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: no-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"no-name-greeting\", height = 838, width = 1299)\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-cols-and-data\", {\n  app &lt;- AppDriver$new(name = \"upload-cols-and-data\", height = 734, width = 1119)\n  app$upload_file(csv_input = \"cols-and-data1.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#updated-tests-fail",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#updated-tests-fail",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Our updated tests all failed\n\n  \nAfter updating your tests, click Run Tests. They all should fail. You can check out the Tests &gt; Output tab to explore the diffs, or launch the snapshot reviewer:\n\n\ntestthat::snapshot_review(path = \"testing-app/tests/testthat/\")\n\n\n\nWhat do you notice about the diffs?"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#specified-output",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#specified-output",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Targeted value expectations snapshot a specified output(s) . . .\n\n…as opposed to the default, which is to snapshot the entire application. This is what we want!\n\n\n\nAccept all new snapshots – all tests should now pass when you rerun your test file."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#control-click",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#control-click",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Make a targeted value expectation using the test recorder\n\nLet’s write a test that makes a targeted value expectation for our second assertion of feature 2 (copied below from our original table):\n\nAction(s): Click Browse &gt; Select CSV file with incorrect column headers\nExpectation: An error message, “Your CSV does not have the expected column headers” is returned\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSteps:\n(1) Run shinytest2::record_test(\"testing-app\") in the Console\n(2 Click Browse, select incorrect-cols.csv from your Desktop (or wherever you have it saved)\n(3) Hold down the Command/Control button on your keyboard, then click on the output – for us, that’s the error message that is rendered in place of summary_table_output\n(4) Give the test a unique name (e.g. upload-incorrect-cols) &gt; click Save test and exit (tests should automatically execute and pass!)"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#write-all-ft2-tests",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#write-all-ft2-tests",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Write tests for the remaining feature 2 assertions\n\nWhen complete, your updated test-shinytest2.R file should look similar to this (and all tests should pass!):\n\n\n\n~/testing-app/tests/testthat/test-shinytest2.R\n\nlibrary(shinytest2)\n\ntest_that(\"{shinytest2} recording: one-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"one-name-greeting\", height = 815, width = 1276)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: consecutive-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"consecutive-name-greeting\", height = 961, width = 1322)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n  app$set_inputs(name_input = \"Kat\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: no-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"no-name-greeting\", height = 838, width = 1299)\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-cols-and-data\", {\n  app &lt;- AppDriver$new(name = \"upload-cols-and-data\", height = 734, width = 1119)\n  app$upload_file(csv_input = \"cols-and-data1.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-incorrect-cols\", {\n  app &lt;- AppDriver$new(name = \"upload-incorrect-cols\", height = 754, width = 1139)\n  app$upload_file(csv_input = \"incorrect-cols.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-empty\", {\n  app &lt;- AppDriver$new(name = \"upload-empty\", height = 734, width = 1119)\n  app$upload_file(csv_input = \"empty.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-only-cols\", {\n  app &lt;- AppDriver$new(name = \"upload-only-cols\", height = 1048, width = 1441)\n  app$upload_file(csv_input = \"only-cols.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-only-data\", {\n  app &lt;- AppDriver$new(name = \"upload-only-data\", height = 1048, width = 1441)\n  app$upload_file(csv_input = \"only-data.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-consecutive-correct-files\", {\n  app &lt;- AppDriver$new(name = \"upload-consecutive-correct-files\", height = 1048, \n      width = 1441)\n  app$upload_file(csv_input = \"cols-and-data1.csv\")\n  app$expect_values(output = \"summary_table_output\")\n  app$upload_file(csv_input = \"cols-and-data2.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#feature3-code",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#feature3-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Your boss requests one final feature\n\nYou’re tasked with creating a scatterplot of penguin bill depths by bill lengths, with a pickerInput that allows users to filter the data by species:\n\nglobal.Rui.Rserver.R\n\n\n\n# load libraries ----\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\nlibrary(palmerpenguins)\n\n\n\n\nui &lt;- fluidPage(\n  \n  # Feature 1 ------------------------------------------------------------------\n  \n  h3(\"Feature 1\"),\n  \n  # fluidRow (Feature 1: greeting) ----\n  fluidRow(\n    \n    # greeting sidebarLayout ----\n    sidebarLayout(\n      \n      # greeting sidebarPanel ----\n      sidebarPanel(\n        \n        textInput(inputId = \"name_input\",\n                  label = \"What is your name?\"),\n        \n        actionButton(inputId = \"greeting_button_input\",\n                     label = \"Greet\"),\n        \n      ), # END greeting sidebarPanel\n      \n      # greeting mainPanel ----\n      mainPanel(\n        \n        textOutput(outputId = \"greeting_output\"),\n        \n      ) # END greeting mainPanel\n      \n    ) # END greeting sidebarLayout\n    \n  ), # END fluidRow (Feature 1: greeting)\n  \n  tags$hr(),\n  \n  # Feature 2 ------------------------------------------------------------------\n  \n  h3(\"Feature 2\"),\n  \n  # fluidRow (Feature 2: file upload) -----\n  fluidRow(\n    \n    # file upload sidebarLayout ----\n    sidebarLayout(\n      \n      # file upload sidebarPanel ----\n      sidebarPanel(\n        \n        # upload fileInput -----\n        fileInput(inputId = \"csv_input\",\n                  label = \"Upload your CSV file:\",\n                  multiple = FALSE,\n                  accept = c(\".csv\"),\n                  buttonLabel = \"Browse\",\n                  placeholder = \"No file selected\"), # END upload fileInput\n        \n      ), # END file upload sidebarPanel\n      \n      # fileInput mainPanel ----\n      mainPanel(\n        \n        tableOutput(outputId = \"summary_table_output\")\n        \n      ) # END file upload mainPanel\n      \n    ) # END file upload sidebarLayout\n    \n  ), # END fluidRow (Feature 2: file upload)\n  \n  tags$hr(),\n  \n  # Feature 3 ------------------------------------------------------------------\n  \n  h3(\"Feature 3\"),\n  \n  # fluidRow (Feature 3: plot) -----\n  fluidRow(\n    \n    # plot sidebarLayout ----\n    sidebarLayout(\n      \n      # plot sidebarPanel ----\n      sidebarPanel(\n        \n        # penguin spp pickerInput -----\n        pickerInput(inputId = \"penguinSpp_scatterplot_input\", label = \"Select species:\",\n                    choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                    selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n                    options = pickerOptions(actionsBox = TRUE),\n                    multiple = TRUE), # END penguin spp pickerInput\n        \n      ), # END plot sidebarPanel\n      \n      # plot mainPanel ----\n      mainPanel(\n        \n        plotOutput(outputId = \"scatterplot_output\")\n        \n      ) # END plot mainPanel\n      \n    ) # END plot sidebarLayout\n    \n  ) # END fluidRow (Feature 3: plot)\n  \n) # END fluidPage \n\n\n\n\nserver &lt;- function(input, output) {\n  \n  # Feature 1 ------------------------------------------------------------------\n  \n  # observe() automatically re-executes when dependencies change (i.e. when `name_input` is updated), but does not return a result ----\n  observe({\n    \n    # if the user does not type anything before clicking the button, return the message, \"Please type a name, then click the Greet button.\" ----\n    if (nchar(input$name_input) == 0) {\n      output$greeting_output &lt;- renderText({\n        \"Please type a name, then click the Greet button.\"\n      })\n      \n      # if the user does type a name before clicking the button, return the greeting, \"Hello [name]!\" ----\n    } else {\n      output$greeting_output &lt;- renderText({\n        paste0(\"Hello \", isolate(input$name_input), \"!\")\n      })\n    }\n  }) |&gt;\n    \n    # Execute the above observer once the button is pressed ----\n    bindEvent(input$greeting_button_input)\n  \n  # Feature 2 ------------------------------------------------------------------\n  \n  # file upload ----\n  output$summary_table_output &lt;- renderTable({\n    \n    # NOTE: `input$csv_input` will be NULL initially\n    # after user selects / uploads a file, it will be a df with 'name', 'size', 'type', 'datapath' cols\n    # 'datapath' col will contain the local filenames where data can be found\n    # see: https://shiny.posit.co/r/reference/shiny/1.4.0/fileinput\n    \n    # save input value to object named `inputFile` ----\n    inputFile &lt;- input$csv_input\n    \n    # if a file has not been uploaded yet, don't return / print anything ----\n    if(is.null(inputFile))\n      return(NULL)\n    \n    # read in file using it's datapath ----\n    df_raw &lt;- read_csv(inputFile$datapath)\n    \n    # validate that the uploaded CSV has the expected column names ----\n    required_cols &lt;- c(\"temp_c\", \"precip_cm\", \"wind_kmhr\", \"pressure_inhg\")\n    column_names &lt;- colnames(df_raw)\n    validate(\n      need(all(required_cols %in% column_names), \"Your CSV does not have the expected column headers.\")\n    )\n    \n    # return summarized data in a table ----\n    df_summary &lt;- df_raw |&gt;\n      summarize(\n        avg_temp = mean(temp_c),\n        avg_precip = mean(precip_cm),\n        avg_wind = mean(wind_kmhr),\n        avg_pressure = mean(pressure_inhg),\n        tot_num_obs = length(temp_c)\n      ) |&gt;\n      rename(\"Mean Temperature (C)\" = \"avg_temp\",\n             \"Mean Precipitation (cm)\" = \"avg_precip\",\n             \"Mean Wind Speed (km/hr)\" = \"avg_wind\",\n             \"Mean Pressure (inHg)\" = \"avg_pressure\",\n             \"Total Number of Observations\" = \"tot_num_obs\")\n    return(df_summary)\n    \n  })\n  \n  # Feature 3 ------------------------------------------------------------------\n  \n  # filter penguin spp (scatterplot) ----\n  filtered_spp_scatterplot_df &lt;- reactive({\n    \n    validate(\n      need(length(input$penguinSpp_scatterplot_input) &gt; 0, \"Please select at least one penguin species to visualize data for.\"))\n    \n    penguins |&gt;\n      filter(species %in% input$penguinSpp_scatterplot_input)\n    \n  })\n  \n  # render scatterplot ----\n  output$scatterplot_output &lt;- renderPlot({\n    \n    ggplot(na.omit(filtered_spp_scatterplot_df()),\n           aes(x = bill_length_mm, y = bill_depth_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n      scale_color_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\") +\n      theme(legend.position = \"bottom\")\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#run-ft3-app",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#run-ft3-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app & try out the latest feature\n\nTry out the pickerInput and identify different actions / scenarios that a user may encounter which you’d like to write tests for."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#feature3-assertions",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#feature3-assertions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We’ll write tests for the following assertions\n\n\n\n\n\n\n\n\nAction(s)\nExpectation(s)\n\n\n\n\nSelect all 3 species (no action / default state)\nA scatterplot with all three species’ data is rendered\n\n\nDeselect Adelie\nA scatterplot with just Gentoo & Chinstrap data is rendered\n\n\nClick Deselect All &gt; Select Gentoo &gt; Click Select All\nAn error message, “Please select at least one penguin species to visualize data for.” is returned &gt; A scatterplot with just Gentoo data is rendered &gt; A scatterplot with all three species’ data is rendered\n\n\n\n\n\nGive it a try on your own, and remember to make targeted value expectations!\n\n\nNOTE: You’ll likely encounter this popup each time you click on the pickerInput – click Record:\n\n\n\nRead more about input bindings in the {shinytest2} documentation.\n\n\n\n\n−+\n03:00"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#feature3-tests",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#feature3-tests",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Written tests for feature 3\n\nOnce complete, your updated test-shinytest2.R file should look similar to this (and all tests should pass!):\n\nlibrary(shinytest2)\n\ntest_that(\"{shinytest2} recording: one-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"one-name-greeting\", height = 815, width = 1276)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: consecutive-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"consecutive-name-greeting\", height = 961, width = 1322)\n  app$set_inputs(name_input = \"Sam\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n  app$set_inputs(name_input = \"Kat\")\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: no-name-greeting\", {\n  app &lt;- AppDriver$new(name = \"no-name-greeting\", height = 838, width = 1299)\n  app$click(\"greeting_button_input\")\n  app$expect_values(output = \"greeting_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-cols-and-data\", {\n  app &lt;- AppDriver$new(name = \"upload-cols-and-data\", height = 734, width = 1119)\n  app$upload_file(csv_input = \"cols-and-data1.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-incorrect-cols\", {\n  app &lt;- AppDriver$new(name = \"upload-incorrect-cols\", height = 754, width = 1139)\n  app$upload_file(csv_input = \"incorrect-cols.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-empty\", {\n  app &lt;- AppDriver$new(name = \"upload-empty\", height = 734, width = 1119)\n  app$upload_file(csv_input = \"empty.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-only-cols\", {\n  app &lt;- AppDriver$new(name = \"upload-only-cols\", height = 1048, width = 1441)\n  app$upload_file(csv_input = \"only-cols.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-only-data\", {\n  app &lt;- AppDriver$new(name = \"upload-only-data\", height = 1048, width = 1441)\n  app$upload_file(csv_input = \"only-data.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: upload-consecutive-correct-files\", {\n  app &lt;- AppDriver$new(name = \"upload-consecutive-correct-files\", height = 1048, \n      width = 1441)\n  app$upload_file(csv_input = \"cols-and-data1.csv\")\n  app$expect_values(output = \"summary_table_output\")\n  app$upload_file(csv_input = \"cols-and-data2.csv\")\n  app$expect_values(output = \"summary_table_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: select-three-spp\", {\n  app &lt;- AppDriver$new(name = \"select-three-spp\", height = 1048, width = 1441)\n  app$expect_values(output = \"scatterplot_output\")\n})\n\n\ntest_that(\"{shinytest2} recording: deselect-adelie\", {\n  app &lt;- AppDriver$new(name = \"deselect-adelie\", height = 1048, width = 1441)\n  app$set_inputs(penguinSpp_scatterplot_input_open = TRUE, allow_no_input_binding_ = TRUE)\n  app$set_inputs(penguinSpp_scatterplot_input = c(\"Chinstrap\", \"Gentoo\"))\n  app$expect_values(output = \"scatterplot_output\")\n  app$set_inputs(penguinSpp_scatterplot_input_open = FALSE, allow_no_input_binding_ = TRUE)\n})\n\n\ntest_that(\"{shinytest2} recording: consecutive-spp-selections\", {\n  app &lt;- AppDriver$new(name = \"consecutive-spp-selections\", height = 1048, width = 1441)\n  app$set_inputs(penguinSpp_scatterplot_input_open = TRUE, allow_no_input_binding_ = TRUE)\n  app$set_inputs(penguinSpp_scatterplot_input = character(0))\n  app$expect_values(output = \"scatterplot_output\")\n  app$set_inputs(penguinSpp_scatterplot_input_open = FALSE, allow_no_input_binding_ = TRUE)\n  app$set_inputs(penguinSpp_scatterplot_input_open = TRUE, allow_no_input_binding_ = TRUE)\n  app$set_inputs(penguinSpp_scatterplot_input = \"Gentoo\")\n  app$expect_values(output = \"scatterplot_output\")\n  app$set_inputs(penguinSpp_scatterplot_input_open = FALSE, allow_no_input_binding_ = TRUE)\n  app$set_inputs(penguinSpp_scatterplot_input_open = TRUE, allow_no_input_binding_ = TRUE)\n  app$set_inputs(penguinSpp_scatterplot_input = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"))\n  app$expect_values(output = \"scatterplot_output\")\n  app$set_inputs(penguinSpp_scatterplot_input_open = FALSE, allow_no_input_binding_ = TRUE)\n})"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#refactor-code",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#refactor-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What if we decide to refactor our code?\n\nLet’s say we want to extract our pickerInput code from our UI and turn it into a function. We make the following updates to our code:\n\nglobal.Rui.Rserver.RpenguinSpp_pickerInput.R\n\n\n(File is unchanged)\n\n\n\n~/testing-app/global.R\n\n# load libraries ----\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\nlibrary(palmerpenguins)\n\n\n\n\n\n\n\n~/testing-app/ui.R\n\nui &lt;- fluidPage(\n  \n  # Feature 1 ------------------------------------------------------------------\n  \n  h3(\"Feature 1\"),\n  \n  # fluidRow (Feature 1: greeting) ----\n  fluidRow(\n    \n    # greeting sidebarLayout ----\n    sidebarLayout(\n      \n      # greeting sidebarPanel ----\n      sidebarPanel(\n        \n        textInput(inputId = \"name_input\",\n                  label = \"What is your name?\"),\n        \n        actionButton(inputId = \"greeting_button_input\",\n                     label = \"Greet\"),\n        \n      ), # END greeting sidebarPanel\n      \n      # greeting mainPanel ----\n      mainPanel(\n        \n        textOutput(outputId = \"greeting_output\"),\n        \n      ) # END greeting mainPanel\n      \n    ) # END greeting sidebarLayout\n    \n  ), # END fluidRow (Feature 1: greeting)\n  \n  tags$hr(),\n  \n  # Feature 2 ------------------------------------------------------------------\n  \n  h3(\"Feature 2\"),\n  \n  # fluidRow (Feature 2: file upload) -----\n  fluidRow(\n    \n    # file upload sidebarLayout ----\n    sidebarLayout(\n      \n      # file upload sidebarPanel ----\n      sidebarPanel(\n        \n        # upload fileInput -----\n        fileInput(inputId = \"csv_input\",\n                  label = \"Upload your CSV file:\",\n                  multiple = FALSE,\n                  accept = c(\".csv\"),\n                  buttonLabel = \"Browse\",\n                  placeholder = \"No file selected\"), # END upload fileInput\n        \n      ), # END file upload sidebarPanel\n      \n      # fileInput mainPanel ----\n      mainPanel(\n        \n        tableOutput(outputId = \"summary_table_output\")\n        \n      ) # END file upload mainPanel\n      \n    ) # END file upload sidebarLayout\n    \n  ), # END fluidRow (Feature 2: file upload)\n  \n  tags$hr(),\n  \n  # Feature 3 ------------------------------------------------------------------\n  \n  h3(\"Feature 3\"),\n  \n  # fluidRow (Feature 3: plot) -----\n  fluidRow(\n    \n    # plot sidebarLayout ----\n    sidebarLayout(\n      \n      # plot sidebarPanel ----\n      sidebarPanel(\n        \n        # penguin spp pickerInput -----\n        penguinSpp_pickerInput(inputId = \"penguinSpp_scatterplot_input\")\n\n      ), # END plot sidebarPanel\n      \n      # plot mainPanel ----\n      mainPanel(\n        \n        plotOutput(outputId = \"scatterplot_output\")\n        \n      ) # END plot mainPanel\n      \n    ) # END plot sidebarLayout\n    \n  ) # END fluidRow (Feature 3: plot)\n  \n) # END fluidPage \n\n\n\n\n(File is unchanged)\n\n\n\n~/testing-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # Feature 1 ------------------------------------------------------------------\n  \n  # observe() automatically re-executes when dependencies change (i.e. when `name_input` is updated), but does not return a result ----\n  observe({\n    \n    # if the user does not type anything before clicking the button, return the message, \"Please type a name, then click the Greet button.\" ----\n    if (nchar(input$name_input) == 0) {\n      output$greeting_output &lt;- renderText({\n        \"Please type a name, then click the Greet button.\"\n      })\n      \n      # if the user does type a name before clicking the button, return the greeting, \"Hello [name]!\" ----\n    } else {\n      output$greeting_output &lt;- renderText({\n        paste0(\"Hello \", isolate(input$name_input), \"!\")\n      })\n    }\n  }) |&gt;\n    \n    # Execute the above observer once the button is pressed ----\n    bindEvent(input$greeting_button_input)\n  \n  # Feature 2 ------------------------------------------------------------------\n  \n  # file upload ----\n  output$summary_table_output &lt;- renderTable({\n    \n    # NOTE: `input$csv_input` will be NULL initially\n    # after user selects / uploads a file, it will be a df with 'name', 'size', 'type', 'datapath' cols\n    # 'datapath' col will contain the local filenames where data can be found\n    # see: https://shiny.posit.co/r/reference/shiny/1.4.0/fileinput\n    \n    # save input value to object named `inputFile` ----\n    inputFile &lt;- input$csv_input\n    \n    # if a file has not been uploaded yet, don't return / print anything ----\n    if(is.null(inputFile))\n      return(NULL)\n    \n    # read in file using it's datapath ----\n    df_raw &lt;- read_csv(inputFile$datapath)\n    \n    # validate that the uploaded CSV has the expected column names ----\n    required_cols &lt;- c(\"temp_c\", \"precip_cm\", \"wind_kmhr\", \"pressure_inhg\")\n    column_names &lt;- colnames(df_raw)\n    validate(\n      need(all(required_cols %in% column_names), \"Your CSV does not have the expected column headers.\")\n    )\n    \n    # return summarized data in a table ----\n    df_summary &lt;- df_raw |&gt;\n      summarize(\n        avg_temp = mean(temp_c),\n        avg_precip = mean(precip_cm),\n        avg_wind = mean(wind_kmhr),\n        avg_pressure = mean(pressure_inhg),\n        tot_num_obs = length(temp_c)\n      ) |&gt;\n      rename(\"Mean Temperature (C)\" = \"avg_temp\",\n             \"Mean Precipitation (cm)\" = \"avg_precip\",\n             \"Mean Wind Speed (km/hr)\" = \"avg_wind\",\n             \"Mean Pressure (inHg)\" = \"avg_pressure\",\n             \"Total Number of Observations\" = \"tot_num_obs\")\n    return(df_summary)\n    \n  })\n  \n  # Feature 3 ------------------------------------------------------------------\n  \n  # filter penguin spp (scatterplot) ----\n  filtered_spp_scatterplot_df &lt;- reactive({\n    \n    validate(\n      need(length(input$penguinSpp_scatterplot_input) &gt; 0, \"Please select at least one penguin species to visualize data for.\"))\n    \n    penguins |&gt;\n      filter(species %in% input$penguinSpp_scatterplot_input)\n    \n  })\n  \n  # render scatterplot ----\n  output$scatterplot_output &lt;- renderPlot({\n    \n    ggplot(na.omit(filtered_spp_scatterplot_df()),\n           aes(x = bill_length_mm, y = bill_depth_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n      scale_color_manual(values = c(\"Adelie\" = \"darkorange\", \"Chinstrap\" = \"purple\", \"Gentoo\" = \"cyan4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\") +\n      theme(legend.position = \"bottom\")\n    \n  })\n  \n} # END server\n\n\n\n\n(Newly added file; be sure to place it inside the new testing-app/R/ subdirectory)\n\n\n\n~/testing-app/R/penguinSpp_pickerInput.R\n\npenguinSpp_pickerInput &lt;- function(inputId) {\n  \n  pickerInput(inputId = inputId, label = \"Select species:\",\n              choices = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n              selected = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n              options = pickerOptions(actionsBox = TRUE),\n              multiple = TRUE)\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#test-refactored-code",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#test-refactored-code",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Now, run your tests!\n\n\nRather than running your app and manually checking to see if your pickerInput still works in the same way, you can instead run your tests, which will automatically check for you!\n\n\nOpen test-shinytest2.R, click Run Tests, and watch all of your tests pass (or at least, they should!):\n\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 16 ]\n\n\n\n\nAutomated tests allow you to confidently refactor code / make sweeping changes while being able to verify that the expected functionality remains the same."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#scoping-assertions",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#scoping-assertions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "When do we not want to use targeted value expectations?\n\n\nWhat if we want to capture our entire (completed) Shiny app in it’s default state, i.e. what users should see when they first visit the app?\n\n\nMake a non-targeted expectation of your app’s state! Start the app recorder, then click Expect Shiny values to capture the default state of your app.\n\n\n\nYour test should look something like this:\n\ntest_that(\"{shinytest2} recording: default-app-state\", {\n  app &lt;- AppDriver$new(name = \"default-app-state\", height = 754, width = 1137)\n  app$expect_values()\n})\n\n\n\n\nShould our app’s default state change (e.g. if we add a new feature, we update exisiting code so that the default values are different, etc.), our test would break."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#testing-tips",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#testing-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "A couple final tips for testing\n\n\n Use record_test() fairly often – make a test recording for each feature of your app (many little recordings are encouraged!)\n\n\n Think of both the most common and uncommon pathways that your user may take when interacting with your app. E.g. your user types in a name, then deletes everything, then clicks the “Greet” button…would you app handle that use case?\n\n\n\n\n\n\n\n\nThis is only a brief intro to {shinytest2}! Dig into the documentation to learn more."
  },
  {
    "objectID": "course-materials/slides/part7.2-unit-testing-slides.html#end",
    "href": "course-materials/slides/part7.2-unit-testing-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 7.2\n\n\nUp next: streamlining code\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#build-app2",
    "href": "course-materials/slides/part2.2A.html#build-app2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Building out your 2nd app\n\n\nUp until now, we’ve been adding our text and widgets in a pretty unstructured way – elements are stacked on top of one another within a single column. Next, we’ll learn how to customize the layout of our app to make it a bit more visually pleasing."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#LO-app2v1",
    "href": "course-materials/slides/part2.2A.html#LO-app2v1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app)\n\n\nBy the end of building out this second app, you should:\n\n\n\n be comfortable creating a shiny app using the two-file (ui.R & server.R) format along with a global.R file\n\n\n\n\n understand how to use layout functions to customize the visual structure of your app’s UI\n\n\n\n\n have more practice building reactive outputs – and placing them within the layout structure of your app\n\n\n\n\n be able to create multiple inputs that control a given output\n\n\n\n\n know how to import larger bodies of text using includeMarkdown() (rather than writing & styling text within your UI)\n\n\n\n\n successfully deploy an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\n {shinyWidgets}: extend shiny widgets with some different, fun options\n\n\n\n\n {lterdatasampler}: data"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#roadmap-app2v1",
    "href": "course-materials/slides/part2.2A.html#roadmap-app2v1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Roadmap for App #2\n\n\nWe’ll be building out our two-file app using data from the {lterdatasampler} and {palmerpenguins} packages. We’ll focus on creating a functional app that has a more visually pleasing UI layout. Our goals are to create:\n\n\n\n \n\n(a) A navigation bar with two pages, one of which will contain two tabs (one tab for each plot)\n\n\n(b) A pickerInput and checkboxGroupButtons for users to filter cutthroat trout data in a reactive scatterplot\n\n\n(c) A pickerInput for users to filter penguin data and a sliderInput to adjust the number of bins in a reactive histogram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou’ll notice that there are some UI quirks (most notably, blank plots that appear when no data is selected) that can make the user experience less than ideal (and even confusing) – we’ll learn about ways to improve this in the next section."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#two-source",
    "href": "course-materials/slides/part2.2A.html#two-source",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Two files? Try two panes!\n\n\nWe’ll be building out a two-file shiny app this time around. You can open multiple scripts up side-by-side by navigating to Tools &gt; Global Options &gt; Pane Layout &gt; Add Column\n\n\n\nThis setup is certainly not required / necessary – organize your IDE however you work best!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#app2-trout-plot",
    "href": "course-materials/slides/part2.2A.html#app2-trout-plot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Practice on your scratch script – Trout\n\nIn a ~scratch/practice_script_app2.R file, practice wrangling & plotting trout data. . .\n\n\n\n\n\n~/scratch/practice_script_app2.R\n\n#..........................load packages.........................\nlibrary(lterdatasampler)\nlibrary(tidyverse)\n\n#............custom ggplot theme (apply to both plots)...........\nmyCustomTheme &lt;- function() {\n  theme_light() +\n  theme(axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(linewidth = 0.7))\n}\n\n#.......................wrangle trout data.......................\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n#..................practice filtering trout data.................\ntrout_filtered_df &lt;- clean_trout |&gt; \n  filter(channel_type %in% c(\"pool\", \"rapid\")) |&gt; \n  filter(section %in% c(\"clear cut forest\"))\n\n#........................plot trout data.........................\nggplot(trout_filtered_df, aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n  geom_point(alpha = 0.7, size = 5) +\n  scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\", \n                                \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\", \n                                \"side channel\" = \"#94CBEC\")) +\n  scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19, \n                                \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23, \n                                \"side channel\" = 25)) +\n  labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n  myCustomTheme()\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the and_vertebrates data set from {lterdatasampler} to create a scatter plot of trout weights by lengths. When we move to shiny, we’ll build two inputs for filtering our data: one to select channel_type and one to select section."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#app2-penguin-plot",
    "href": "course-materials/slides/part2.2A.html#app2-penguin-plot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Practice on your scratch script – Penguins\n\n. . .and penguin data\n\n\n\n\n\n~/scratch/practice_script_app2.R\n\n#..........................load packages.........................\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n#..................practice filtering for island.................\nisland_df &lt;- penguins |&gt; \n  filter(island %in% c(\"Dream\", \"Torgesen\"))\n\n#........................plot penguin data.......................\nggplot(na.omit(island_df), aes(x = flipper_length_mm, fill = species)) +\n  geom_histogram(alpha = 0.6, position = \"identity\", bins = 25) +\n  scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n       fill = \"Penguin species\") +\n  myCustomTheme()\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the penguins data set from {palmerpenguins} to create a histogram of penguin flipper lengths. When we move to shiny, we’ll build two inputs for filtering our data: one to select island and one to change the number of histogram bins."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#global.R",
    "href": "course-materials/slides/part2.2A.html#global.R",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We’ll use our global.R file to help with organization\n\n\nWhile not a requirement of a shiny app, a global.R file will help reduce redundant code, increase your app’s speed, and help you better organize your code. It works by running once when your app is first launched, making any logic, objects, etc. contained in it available to both the ui.R and server.R files (or, in the case of a single-file shiny app, the app.R file). It’s a great place for things like:\n\n\n\n loading packages\n importing data\n sourcing scripts (particularly functions – we’ll talk more about functions later)\n data wrangling (though you’ll want to do any major data cleaning before bringing your data into your app)\n building custom ggplot themes\n etc.\n\n\n\nReminder: global.R must be saved to the same directory as your ui.R and server.R files."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#unstructured-app1",
    "href": "course-materials/slides/part2.2A.html#unstructured-app1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "We created a perfectly functional first app, but it’s not so visually pleasing\n\n\n\n   nothing really grabs your eye\n inputs & outputs are stacked vertically on top of one another (which requires a lot of vertical scrolling)\n widget label text is difficult to distinguish from other text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we jump into adding reactive outputs to our next app, we’ll first plan out the visual structure of our UI – first on paper, then with layout functions."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-functions",
    "href": "course-materials/slides/part2.2A.html#layout-functions",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Layout functions provide the high-level visual structure of your app\n\n\nLayouts are created using a hierarchy of function calls (typically) inside fluidPage(). Layouts often require a series functions – container functions establish the larger area within which other layout elements are placed. See a few minimal examples of layout functions on the following slides (though more exist!).\n\n\nSome useful layout function pairings:\n\n\n# sidebar for inputs & main area for outputs within the sidebarLayout() container\nsidebarLayout(\n  sidebarPanel(),\n  mainPanel()\n)\n\n# multi-row fluid layout (add any number of fluidRow()s to a fluidPage())\nfluidRow(\n  column(4, ...),\n  column(8, ...)\n)\n\n# tabPanel()s to contain HTML components (e.g. inputs/outputs) within the tabsetPanel() container\ntabsetPanel(\n  tabPanel()\n)\n\n# NOTE: can use navbarPage() in place of fluidPage(); creates a page with top-level navigation bar that can be used to toggle tabPanel() elements\nnavbarPage(\n  tabPanel()\n)"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-function-examples",
    "href": "course-materials/slides/part2.2A.html#layout-function-examples",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Example UI layouts (adapted from Mastering Shiny, Ch. 6)\n\n\nNote: You can combine multiple layout function groups to really customize your UI – for example, you can create a navbar, include tabs, and also establish sidebar and main panel areas for inputs and outputs.\n\n\nSidebar & main areaPage with multiple rowsTabsNavbar\n\n\n\nTo create a page with a side bar and main area to contain your inputs and outputs (respectively), explore the following layout functions and read up on the sidebarLayout documentation:\n\n\n\n\nfluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs here\n    ),\n    mainPanel(\n      # outputs here\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo create a page with multiple rows, explore the following layout functions and check out the fluid layout documentation. Note that each row is made up of 12 columns. The first argument of the column() function takes a value of 1-12 to specify the number of columns to occupy.\n\n\n\n\nfluidPage(\n  fluidRow(\n    column(4, \n      ...\n    ),\n    column(8, \n      ...\n    )\n  ),\n  fluidRow(\n    column(6, \n      ...\n    ),\n    column(6, \n      ...\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may find that you eventually end up with too much content to fit on a single application page. Enter tabsetPanel() and tabPanel(). tabsetPanel() creates a container for any number of tabPanel()s. Each tabPanel() can contain any number of HTML components (e.g. inputs and outputs). Find the tabsetPanel documentation here and check out this example:\n\n\n\n\ntabsetPanel(\n  tabPanel(\"Tab 1\", \n    # an input\n    # an output\n  ),\n  tabPanel(\"Tab 2\"),\n  tabPanel(\"Tab 3\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also want to use a navigation bar (navbarPage()) with different pages (created using tabPanel()) to organize your application. Read through the navbarPage documentation and try running the example below:\n\n\n\n\nnavbarPage(\n  title = \"My app\",\n  tabPanel(title = \"Tab 1\",\n           # an input\n           # an output\n           ),\n  tabPanel(title = \"Tab 2\")\n)"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-fxns-app2",
    "href": "course-materials/slides/part2.2A.html#layout-fxns-app2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Overview of layout functions used in App #2"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#tips",
    "href": "course-materials/slides/part2.2A.html#tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Important tips for success\n\n\n Enable rainbow parentheses: Tools &gt; Global Options &gt; Code &gt; Display &gt; check Use rainbow parentheses\n\n\n Add code comments at the start and end of each UI element: Even with rainbow parentheses, it can be easy to lose track or mistake what parentheses belong with which (see examples on follow slide)\n\n\n\n Add placeholder text within your layout functions: Adding text, like \"slider input will live here\" and \"plot output here\" will help you better visualize what you’re working towards. It also makes it easier to navigate large UIs as you begin adding real inputs and outputs.\n\n\n\n Use keyboard shortcuts to realign your code: Select all your code using cmd / ctrl + A, then realign using cmd / ctrl + I."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#build-navbar",
    "href": "course-materials/slides/part2.2A.html#build-navbar",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Build a navbar with two pages\n\n\nFirst, let’s build a UI that has a navigation bar with two tabs – one for background information and one to contain our data visualizations. To do this, we’ll use navbarPage() instead of fluidPage() to create our webpage.\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           \"inputs and outputs will live here\" # REPLACE THIS WITH CONTENT\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\nTip: Run your app often while building out your UI to make sure it’s looking as you’d expect!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#add-tabs",
    "href": "course-materials/slides/part2.2A.html#add-tabs",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add two tabs to the “Explore the Data” page\n\n\nGive your tabs the following titles: Trout and Penguins.\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"LTER Animal Data Explorer\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      \"trout data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#sidebar-main-panels",
    "href": "course-materials/slides/part2.2A.html#sidebar-main-panels",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add sidebar & main panels to the Trout tab\n\n\nWe’ll eventually place our input in the sidebar and output in the main panel.\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#exercise2-prompt",
    "href": "course-materials/slides/part2.2A.html#exercise2-prompt",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 2: Add sidebar and main panels to the Penguins tab\n\n\n\n \nI encourage you to type the code out yourself, rather than copy/paste!\n\nBe sure to add text where your input / output will eventually be placed.\n\nWhen you’re done, you app should look like this \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#exercise2-solution",
    "href": "course-materials/slides/part2.2A.html#exercise2-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 2: A solution\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Animal Data Explorer\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"penguin plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END penguin sidebarPanel\n                        \n                        # penguin mainPanel ----\n                        mainPanel(\n                          \n                          \"penguin plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END penguin mainPanel\n                        \n                      ) # END penguin sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-review",
    "href": "course-materials/slides/part2.2A.html#layout-review",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Some important things to remember when building your UI’s layout:\n\n\n\n try creating a rough sketch of your intended layout before hitting the keyboard (I like to think of this as UI layout “pseudocode”)\n\n\n\n\n keeping clean code is important – we haven’t even any added any content yet and our UI is already &gt;70 lines of code!\n\n\n\n\n use rainbow parentheses, code comments and plenty of space between lines to keep things looking manageable and navigable\n\n\n\n\n use the keyboard shortcut, command + I (Mac) or control + I (Windows), to align messy code – this helps put those off-alignment parentheses back where they belong\n\n\n\n\n things can get out of hand quickly – add one layout section at a time, run your app to check that things look as you intend, then continue"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#first-trout",
    "href": "course-materials/slides/part2.2A.html#first-trout",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add data viz: First up, trout\n\n\nWe’ll be using the and_vertebrates dataset from the {lterdatasampler} package to create our first reactive plot. These data contain coastal cutthroat trout (Oncorhynchus clarkii clarkii) lengths and weights collected in Mack Creek, Andrews Forest LTER. Original data can be found on the EDI Data Portal. Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\nImage Source: Joseph R. Tomelleri, as found on the Western Native Trout Initiative"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#import-packages-global",
    "href": "course-materials/slides/part2.2A.html#import-packages-global",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\nIn addition to the {lterdatasampler} package, we’ll also be using the {tidyverse} for data wrangling / visualization, and the {shinyWidgets} package to add a pickerInput and a checkboxGroupInput to our app.\n\nImport those three packages at the top of your global.R file\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler) \nlibrary(tidyverse)\nlibrary(shinyWidgets)"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#wrangle-data-global",
    "href": "course-materials/slides/part2.2A.html#wrangle-data-global",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\n\nWe can also do the bulk of our data wrangling here, rather than in the server. If we were reading in a data file (e.g. .csv), we would do that here too. Our new data object clean_trout, will now be available for us to call directly in our server (NOTE: we can copy our wrangling code over from our practice script).\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(tidyverse)\nlibrary(shinyWidgets) \n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#trout-pickerInput",
    "href": "course-materials/slides/part2.2A.html#trout-pickerInput",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a pickerInput for selecting channel_type to your UI\n\n\nThe channel_type variable (originally called unittype – we updated the name when wrangling data) represents the type of water body (cascade, riffle, isolated pool, pool, rapid, step (small falls), or side channel) where data were collected. We’ll start by building a shinyWidgets::pickerInput() to allow users to filter data based on channel_type.\n\n\n\nReminder: When we designed our UI layout, we added a sidebarPanel to our Trout tab with the placeholder text \"trout plot input(s) go here\". Replace that text with the code for your pickerInput:\n\n\n\n\n~/two-file-app/ui.R\n\n# channel type pickerInput ----\npickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n            choices = unique(clean_trout$channel_type), # alternatively: choices = c(\"rapid\", \"cascade\" ...)\n            selected = c(\"cascade\", \"pool\"), \n            options = pickerOptions(actionsBox = TRUE), # creates \"Select All / Deselect All\" buttons\n            multiple = TRUE) # END channel type pickerInput\n\n\n\nSave and run your app – a functional pickerInput should now appear in your UI.\n\n\nA shinyWidgets::pickerInput() is functionally equivalent to shiny::selectInput(), though it allows for greater customization and looks (in my opinion) a bit nicer."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#trout-output",
    "href": "course-materials/slides/part2.2A.html#trout-output",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a plot output to your UI\n\n\nNext, we need to create a placeholder in our UI for our trout scatterplot to live. Because we’ll be creating a reactive plot, we can use the plotOutput() function to do so.\n\n\n\nReminder: When we we designed our UI layout, we added a mainPanel to our Trout tab with the placeholder text \"trout plot output goes here\". Replace that text with the code for your plotOuput():\n\n\n\n\n~/two-file-app/ui.R\n\nplotOutput(outputId = \"trout_scatterplot_output\")\n\n\n\nSave and run your app – it won’t look different at first glance, but inspecting your app in a browser window (using Chrome, right click &gt; Inspect) will reveal a placeholder box for your plot output to eventually live:"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#trout-plot",
    "href": "course-materials/slides/part2.2A.html#trout-plot",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Tell the server how to assemble pickerInput values into your plotOutput\n\n\nRemember the three rules for building reactive outputs: (1) save objects you want to display to output$&lt;id&gt;, (2) build reactive objects using a render*() function, and (3) access input values with input$&lt;id&gt;:\n\n\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter trout data ----\n  trout_filtered_df &lt;- reactive({\n    \n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input))\n    \n  })\n  \n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n    \n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n    \n  }) \n  \n} # END server\n\n\n\n\n\n\nA couple notes / reminders:\n\n\n If needed, reference your practice script to remind yourself how you planned to filter and plot your data\n\n\n Reactive data frames need a set of parentheses, (), following the name of the df (see ggplot(trout_filtered_df() ...))\n\n\n For a cohesive appearance, save your custom ggplot theme function to global.R (here, myCustomTheme()), then apply to all plots in your app. See code on the following slide."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#ggplot-theme",
    "href": "course-materials/slides/part2.2A.html#ggplot-theme",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Save your custom ggplot theme to global.R\n\n\nThis allows us to easily add our theme as a layer to each of our ggplots. Bonus: If you decide to modify your plot theme, you only have to do so in one place.\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- function() {\n  \n  theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n  \n}\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#run-app2v1-first-widget",
    "href": "course-materials/slides/part2.2A.html#run-app2v1-first-widget",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app and try out your pickerInput widget!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#second-input-ui",
    "href": "course-materials/slides/part2.2A.html#second-input-ui",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add a second input that will update the same output\n\n\nYou can have more than one input control the same output. Let’s now add a checkboxGroupButtons widget to our UI for selecting forest section (either clear cut forest or old growth forest). Check out the function documentation for more information on how to customize the appearance of your buttons.\n\n\nBe sure to add the widget to the same sidebarPanel as our pickerInput (and separate them with a comma!):\n\n\n\n\n~/two-file-app/ui.R\n\n# trout plot sidebarPanel ----\nsidebarPanel(\n  \n  # channel type pickerInput ----\n  pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n              choices = unique(clean_trout$channel_type),\n              selected = c(\"cascade\", \"pool\"),\n              options = pickerOptions(actionsBox = TRUE),\n              multiple = TRUE), # END channel type pickerInput\n\n  # section checkboxGroupButtons ----\n  checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                       choices = c(\"clear cut forest\", \"old growth forest\"),\n                       selected = c(\"clear cut forest\", \"old growth forest\"),\n                       individual = FALSE, justified = TRUE, size = \"sm\",\n                       checkIcon = list(yes = icon(\"check\", lib = \"font-awesome\"), \n                                        no = icon(\"xmark\", lib = \"font-awesome\"))), # END section checkboxGroupInput\n                   \n            ) # END trout plot sidebarPanel"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#second-input-server",
    "href": "course-materials/slides/part2.2A.html#second-input-server",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Update your reactive df to also filter based on the new checkboxGroupInput\n\n\nReturn to your server to modify trout_filtered_df – our data frame needs to be updated based on both the pickerInput, which selects for channel_type, and the checkboxGrouptInput, which selects for forest section:\n\n\n\n\n~/two-file-app/server.R\n\n# filter trout data ----\ntrout_filtered_df &lt;- reactive({\n\n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input)) |&gt;\n      filter(section %in% c(input$section_input))\n      \n  })\n\n# trout scatterplot ----\noutput$trout_scatterplot_output &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n    geom_point(alpha = 0.7, size = 5) +\n    scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                  \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                  \"side channel\" = \"#94CBEC\")) +\n    scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                  \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                  \"side channel\" = 25)) +\n    labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n    myCustomTheme\n\n })"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#run-app2v1-second-widget",
    "href": "course-materials/slides/part2.2A.html#run-app2v1-second-widget",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app and try out your pickerInput & checkboxGrouptInput widgets!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#break-section1",
    "href": "course-materials/slides/part2.2A.html#break-section1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Take a break\n\n\nUp next: Adding in the penguins plot\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#second-penguins",
    "href": "course-materials/slides/part2.2B.html#second-penguins",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Add data viz: Next up, penguins\n\n\nWe’ll be using the penguins dataset from the {palmerpenguins} package to create our second reactive plot. These data contain penguin (genus Pygoscelis) body size measurements collected from three islands in the Palmer Archipelago, Antarctica, as part of the Palmer Station LTER. Original data can be found on the EDI Data Portal (Adélie data, Gentoo data, and Chinstrap data). Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#exercise3-prompt",
    "href": "course-materials/slides/part2.2B.html#exercise3-prompt",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 3: Add a reactive plot to the ‘Penguins’ tab\n\n\nWorking alone or in groups, add a reactive histogram of penguin flipper lengths (using the penguins data set from the {palmerpenguins} package) to the Penguins tab. Your plot should have the following features and look like the example below, when complete:\n\n\n\n\n data colored by penguin species\n\n\n a shinyWidgets::pickerInput() that allows users to filter data based on island, and that includes buttons to Select All / Deselect All island options at once\n\n\n a shiny::sliderInput() that allows users to change the number of histogram bins and that by default, displays a histogram with 25 bins\n\n\n the two widgets should be placed in the sidebarPanel and the reactive histogram should be placed in the mainPanel of the Penguins tab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for some tips on getting started!"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#exercise3-tips",
    "href": "course-materials/slides/part2.2B.html#exercise3-tips",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 3: Tips\n\n\nTips:\n\n Remember to load the palmerpenguins package at the top of global.R so that your app can find the data\n\n\n Add your widgets to the sidebarPanel and your plot output to the mainPanel of the Penguins tab – look for that placeholder text we added earlier to help place your new code in the correct spot within your UI!\n\n\n Try changing the histogram bin number in your practice code script first, before attempting to make it reactive\n\n\nAnd remember to follow the our three steps for building reactive outputs ((1) add input to UI, (2) add output to UI, (3) tell server how to assemble inputs into outputs)!\n  \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#exercise3-solution",
    "href": "course-materials/slides/part2.2B.html#exercise3-solution",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Exercise 3: A solution\n\n\nglobal.Rui.Rserver.R\n\n\n\n\n\n~/two-file-app/global.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- function() {\n  \n  theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n  \n}\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n\n\n\n\n\n\n~/two-file-app/ui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"check\", lib = \"font-awesome\"), \n                                                                no = icon(\"xmark\", lib = \"font-awesome\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot_output\")\n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      multiple = TRUE), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram_output\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\n~/two-file-app/server.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot_output &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme()\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins |&gt; \n      filter(island %in% input$penguin_island_input)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram_output &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, position = \"identity\", bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme()\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#break-section2",
    "href": "course-materials/slides/part2.2B.html#break-section2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Take a break\n\n\nUp next: we’ll finish up by adding some intro text to the landing page\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#title-slide",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 1.1\nWhat is Shiny?"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#what-is-shiny",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#what-is-shiny",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What is Shiny?\n\n\nThink interactive web pages built by people who love to code in R (i.e. hopefully many of you!), no JavaScript experience necessary."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#easy-web-apps",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#easy-web-apps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Shiny makes building web apps easy\n\n\n“Shiny is an open source R package that provides an elegant and powerful web framework for building web applications using R. Shiny helps you turn your analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge.”\n\n\n-Posit\n\n\n\n\n\n\nWorldbank-Shiny app to visualize fertility rate vs. life expectancy from 1960 to 2015, by Andre Duarte"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#framework",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#framework",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What’s a framework?\n\nA programming framework (like Shiny) is a set of tools that provide ready-made components and / or solutions for development.\n\n\n\n\nFrameworks serve as a foundation so that you don’t need to start development entirely from scratch. They are a starting point for you to add the higher-level functionality that actually makes your software work.\nFrameworks are often opinionated, meaning you need to follow the rules / structure of the framework.\nUse the Shiny framework for developing apps / dashboards in R or Python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead more about frameworks on codecademy"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#app-anatomy",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#app-anatomy",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The anatomy of a Shiny app\n\n\nWhat does a Shiny app look like under the hood?"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#basic-anatomy",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#basic-anatomy",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The basic anatomy of a Shiny app\n\n\nShiny apps are composed in two parts: (1) a web page that displays the app to a user (i.e. the user interface, or UI for short), and (2) a computer that powers the app (i.e. the server)\n\n\n\nThe UI controls the layout and appearance of your app and is written in HTML (but we use functions from the {shiny} package to write that HTML). The server handles the logic of the app – in other words, it is a set of instructions that tells the web page what to display when a user interacts with it."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#widgets",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#widgets",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Widgets are web elements that users can interact with via the UI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Widgets collect information from the user which is then used to update outputs created in the server.\n\n\n Shiny comes with a set of of standard widgets (see left), but you can also explore widget extensions using a variety of other packages (e.g. {shinyWidgets}, {DT}, {plotly})"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#reactivity-intro",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#reactivity-intro",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Reactivity: a brief intro\n\n\nReactivity is what makes Shiny apps responsive i.e. it lets the app instantly update itself whenever the user makes a change. At a very basic level, it looks something like this:\n\n\n\nCheck out Garrett Grolemund’s article, How to understand reactivity in R for a more detailed overview of Shiny reactivity."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#examples-please",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#examples-please",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Can I see an example please?\n\n\nI’m glad you asked! There are lots of great examples online, including those developed by Bren alumni, as well as built-in teaching examples."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#shinyapp-examples",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#shinyapp-examples",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Example shiny apps (built by some familiar folks)\n\nLive apps:\n HydroTech Helper (video tutorial), by MEDS 2022 alumn, Daniel Kerstan, developed during his time as a USGS Hydrologic Technician – access real-time monitoring of USGS hydrology sites and equipment\n Marine Mammal Bycatch Impacts Exploration Tool (source code) by Dr. Megsie Siple and colleagues – compute population projections under different bycatch mortality levels\n Novel-gazing (source code) by Dr. Megsie Siple – a fun app for exploring your Goodreads data, inspired by community ecology\n\nApps which are no longer deployed:\n Moorea Coral Reef LTER Shiny Application (source code), by MEDS 2022 alumni, Allie Cole, Felicia Cruz, Jake Eisaguirre & Charles Henrickson as part of their MEDS capstone project – visualize spatial and temporal patterns of coral reef stressors surrounding Moorea, French Polynesia"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#built-in-examples",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#built-in-examples",
    "title": "EDS 296-1W",
    "section": "",
    "text": "The Shiny packages comes with 11 built-in examples\n\n\n Check out the available Shiny app examples by running this code in your console:\n\n\nlibrary(shiny)\nrunExample(example = NA)\n\n\n\n Run the first example, which plots R’s built-in faithful data set with a configurable number of bins:\n\n\nrunExample(\"01_hello\")\n\n\nChange the number of bins using the sliderInput widget and watch the histogram re-render.\n\n\n\n\n These working examples also come paired with source code for you to see how the app is built. For example, the sliderInput is built with the following code:\n\n\n# Input: Slider for the number of bins ----\nsliderInput(inputId = \"bins\",\n            label = \"Number of bins:\",\n            min = 1,\n            max = 50,\n            value = 30)\n\n\n\n\n\nNow let’s build our own!"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#end-section",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#end-section",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 1.1\n\n\nUp next: building our own apps & dashboards\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#title-slide",
    "href": "course-materials/slides/part7.1-debugging-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 7.1\nDebugging"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#debugging",
    "href": "course-materials/slides/part7.1-debugging-slides.html#debugging",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Debugging\n\n\nLike any code, you’re bound to run into errors as you’re developing your shiny app(s). However, Shiny can be particularly challenging to debug. In this section, we’ll review a few approaches for solving pesky issues."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#LO-debugging",
    "href": "course-materials/slides/part7.1-debugging-slides.html#LO-debugging",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Learning Objectives - Debugging\n\n\nAfter this section, you should:\n\n\n\n understand some of the challenges associated with debugging shiny applications\n\n\n\n\n know to a few approaches and tools for debugging shiny applications, including using diagnostic messages and the reactlog package.\n\n\n\n\nPackages introduced:\n\n\n\n\n {reactlog}: a reactivity visualizer for shiny"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#debugging-challenges",
    "href": "course-materials/slides/part7.1-debugging-slides.html#debugging-challenges",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Debugging can be challenging\n\n\nShiny apps can be particularly challenging to debug for a few reasons:\n\n\n Shiny is reactive, so code execution isn’t as linear as other code that you’re likely more familiar with (e.g. analytical pipelines written in “normal” R scripts, where each line of code is executed in succession)\n\n\n Shiny code runs behind a web server and the Shiny framework itself, which can obscure what’s going on\n\n\n\nWhile there are a number of different tools / strategies for debugging Shiny apps, I find myself turning to one (or more) of these approaches most often:\n\n\n isolating pesky errors (typos, missing commas, unmatched parentheses) in the UI by commenting out code from the outside in\n\n\n reducing your app to just problematic code by commenting out as much correctly-functioning code as possible\n\n\n adding diagnostic messages to my reactives\n\n\n using {reactlog} to visualize reactivity errors\n\n\n\n\nWe’ll touch on each of these, briefly, but be sure to check out the Shiny article, Debugging Shiny applications and Mastering Shiny Ch. 5.2, by Hadley Wickham, for more approaches, details, and examples."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#ui-errors1",
    "href": "course-materials/slides/part7.1-debugging-slides.html#ui-errors1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Track down pesky UI errors by commenting out code from the outside in\n\n\nMany of us experienced the frustrations of finding unmatched parentheses, typos, missing commas, etc. when building out our UI layout for App #2, and tracking down the issue can require some patience and persistence.\n\nMy preferred approach for troubleshooting a situation like this is to comment out all code inside the highest-level layout function (e.g. navbarPage()), re-run your app to ensure that it works, uncomment the next inner-most pieces, re-run, etc. until you find the place where your app breaks.\n \n\nSee next slide for an example"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#ui-errors2",
    "href": "course-materials/slides/part7.1-debugging-slides.html#ui-errors2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "An example: debugging App #2 by un / commenting\n\n\n\n\n\nIf I were to trouble shoot the UI for App #2, I’d comment out everything except ui &lt;- navbarPage(title = \"LTER Animal Data Explorer\" and the ending ) # END navbarPage, then run my app to make sure an empty app with a gray navbar and title at the top appears. It does? Great. Next, un-comment the two tabPanel()s that create the “About this App” and “Explore the Data” pages. Works? Add a little bit more back in now, and continue this process. I like to un-comment / re-run all layout function code first, then begin adding back the inputs and outputs one-by-one. See a short, but incomplete demo to the right:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUltimately, taking your time, adding lots of code comments to mark the ending parentheses of each function, and leaving space between lines of code so that you can more easily see what’s going on will save you lots of headache!"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#next",
    "href": "course-materials/slides/part7.1-debugging-slides.html#next",
    "title": "EDS 296-1W",
    "section": "",
    "text": "What about “larger” errors?\n\nOftentimes, you’ll need to identify larger, more complex errors, like why an output isn’t rendering correctly or even appearing in your app at all.\n\nI often turn to two strategies:\n(1) commenting out everything except the UI elements and server logic where I believe the issue is stemming from\n(2) adding diagnostic messages to my reactives\n\n(3) …and on rare occasions, I’ll try using the {reactlog} package to help visualize my app’s reactivity in an attempt to identify the problem.\n\n\n\nTo demo these approaches, we’ll use two pre-constructed apps as examples:\n(1) working-app (a small app that’s functioning as intended)\n(2) broken-app (the same small app that’s not functioning as intended)"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#non-buggy-app",
    "href": "course-materials/slides/part7.1-debugging-slides.html#non-buggy-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "I’m building an app that should look like this…\n\n\nIn Tab 1, both the image and text should update whenever a new radio button is chosen. In Tab 2, the scatterplot should update so that only data points for penguins with body masses within our chosen range are displayed."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#buggy-app",
    "href": "course-materials/slides/part7.1-debugging-slides.html#buggy-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": ". . . but let’s say it actually looks like this:\n\n\nIn Tab 1, only the image updates whenever a new radio button is chosen, and text is missing altogether. In Tab 2, the scatterplot updates as expected whenever the body mass range is changed."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#setup-apps",
    "href": "course-materials/slides/part7.1-debugging-slides.html#setup-apps",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Create both apps in your repo\n\nCreate two new subdirectories (one for each of the following apps) and copy the code below into the respective app.R files. You’ll also want to download this www/ folder (containing penguin images) and put a copy of it into each subdirectory:\n\n\n\n\n\n~/working-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(reactlog)\nlibrary(palmerpenguins)\n\n# ui ----\nui &lt;- fluidPage(\n  \n  tabsetPanel(\n    \n    # tab 1 ----\n    tabPanel(title = \"Tab 1\",\n             \n             # radio button input ----\n             radioButtons(\n               inputId = \"img_input\", label = \"Choose a penguin to display:\",\n               choices = c(\"All penguins\", \"Sassy chinstrap\", \"Staring gentoo\", \"Adorable adelie\"),\n               selected = \"All penguins\"),\n             \n             # text output ----\n             textOutput(outputId = \"penguin_text_output\"),\n             \n             # img output ----\n             imageOutput(outputId = \"penguin_img_output\")\n             \n    ), # END tab 1\n    \n    # tab 2 ----\n    tabPanel(title = \"Tab 2\",\n             \n             # body mass slider input ----\n             sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g)\",\n                         min = 2700, max = 6300, value = c(3000, 4000)),\n\n             # body mass plot output ----\n             plotOutput(outputId = \"bodyMass_scatterplot_output\")\n             \n             ) # END tab 2\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage\n\n\n# server ----\nserver &lt;- function(input, output){\n  \n  # render penguin text ----\n  output$penguin_text_output &lt;- renderText({\n    \n    if(input$img_input == \"All penguins\"){\n      \"Meet all of our lovely penguins species!\"\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      \"Chinstraps get their name from the thin black line that runs under their chins\"\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      \"Gentoos stand out because of their bright orange bills and feet\"\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      \"Adelie penguins are my personal favorite &lt;3\"\n    }\n  }) # END renderText\n  \n  \n  # render penguin images ----\n  output$penguin_img_output &lt;- renderImage({\n    \n    if(input$img_input == \"All penguins\"){\n      list(src = \"www/all_penguins.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      list(src = \"www/chinstrap.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      list(src = \"www/gentoo.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      list(src = \"www/adelie.gif\", height = 240, width = 300)\n    }\n    \n  }, deleteFile = FALSE) # END renderImage\n  \n  \n  # filter body masses ----\n  body_mass_df &lt;- reactive({\n    penguins |&gt;\n      filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2])\n  }) # END filter body masses\n\n  \n  # render the scatterplot output ----\n  output$bodyMass_scatterplot_output &lt;- renderPlot({\n\n    ggplot(na.omit(body_mass_df()),\n           aes(x = flipper_length_mm, y = bill_length_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\") +\n      theme_minimal() +\n      theme(legend.position = c(0.85, 0.2),\n            legend.background = element_rect(color = \"white\"))\n\n  }) # END render scatterplot\n\n  \n} # END server\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n~/broken-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(reactlog)\nlibrary(palmerpenguins)\n\n# ui ----\nui &lt;- fluidPage(\n  \n  tabsetPanel(\n    \n    # tab 1 ----\n    tabPanel(title = \"Tab 1\",\n             \n             # radio button input ----\n             radioButtons(\n               inputId = \"img_input\", label = \"Choose a penguin to display:\",\n               choices = c(\"All penguins\", \"Sassy chinstrap\", \"Staring gentoo\", \"Adorable adelie\"),\n               selected = \"All penguins\"),\n             \n             # text output ----\n             textOutput(outputId = \"penguin_text_output\"),\n             \n             # img output ----\n             imageOutput(outputId = \"penguin_img_output\")\n             \n    ), # END tab 1\n    \n    # tab 2 ----\n    tabPanel(title = \"Tab 2\",\n             \n             # body mass slider input ----\n             sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g)\",\n                         min = 2700, max = 6300, value = c(3000, 4000)),\n             \n             # body mass plot output ----\n             plotOutput(outputId = \"bodyMass_scatterplot_output\")\n             \n    ) # END tab 2\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage\n\n\n# server ----\nserver &lt;- function(input, output){\n  \n  # render penguin text ----\n  output$penguins_text_output &lt;- renderText({\n    \n    if(input$img_input == \"All penguins\"){\n      \"Meet all of our lovely penguins species!\"\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      \"Chinstraps get their name from the thin black line that runs under their chins\"\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      \"Gentoos stand out because of their bright orange bills and feet\"\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      \"Adelie penguins are my personal favorite &lt;3\"\n    }\n  }) # END renderText\n  \n  \n  # render penguin images ----\n  output$penguin_img_output &lt;- renderImage({\n    \n    if(input$img_input == \"All penguins\"){\n      list(src = \"www/all_penguins.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      list(src = \"www/chinstrap.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      list(src = \"www/gentoo.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      list(src = \"www/adelie.gif\", height = 240, width = 300)\n    }\n    \n  }, deleteFile = FALSE) # END renderImage\n  \n  \n  # filter body masses ----\n  body_mass_df &lt;- reactive({\n    penguins |&gt;\n      filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2]) \n  }) # END filter body masses\n  \n  \n  # render the scatterplot output ----\n  output$bodyMass_scatterplot_output &lt;- renderPlot({\n\n    ggplot(na.omit(body_mass_df()),\n           aes(x = flipper_length_mm, y = bill_length_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\") +\n      theme_minimal() +\n      theme(legend.position = c(0.85, 0.2),\n            legend.background = element_rect(color = \"white\"))\n\n  }) # END render scatterplot\n  \n  \n} # END server\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#comment-out-code1",
    "href": "course-materials/slides/part7.1-debugging-slides.html#comment-out-code1",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Start by commenting out functioning code\n\n\nEven though this is a relatively small / simple app, there is still code that, for lack of a better term, gets in the way.\n\nAfter a quick assessment, my reactive scatterplot on Tab 2 appears to be working as expected. To help simplify the amount of code I need to look at, I’ll start by commenting out all UI elements (sliderInput & plotOutput) and server logic for the scatterplot.\n\nNote: As you begin building more complex apps, you may have reactives that depend on other reactives – it’s important to think about these dependencies when commenting out parts of your app for debugging purposes.\n\n\nSee next slide for code"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#comment-out-code2",
    "href": "course-materials/slides/part7.1-debugging-slides.html#comment-out-code2",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Start by commenting out functioning code\n\n\napp.Rapp preview\n\n\n\n\n\n~/broken-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(reactlog)\nlibrary(palmerpenguins)\n\n# ui ----\nui &lt;- fluidPage(\n  \n  tabsetPanel(\n    \n    # tab 1 ----\n    tabPanel(title = \"Tab 1\",\n             \n             # radio button input ----\n             radioButtons(\n               inputId = \"img_input\", label = \"Choose a penguin to display:\",\n               choices = c(\"All penguins\", \"Sassy chinstrap\", \"Staring gentoo\", \"Adorable adelie\"),\n               selected = \"All penguins\"),\n             \n             # text output ----\n             textOutput(outputId = \"penguin_text_output\"),\n             \n             # img output ----\n             imageOutput(outputId = \"penguin_img_output\")\n             \n    ), # END tab 1\n    \n    # tab 2 ----\n    tabPanel(title = \"Tab 2\"#,\n             \n             # # body mass slider input ----\n             # sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g)\",\n             #             min = 2700, max = 6300, value = c(3000, 4000)),\n             \n             # # body mass plot output ----\n             # plotOutput(outputId = \"bodyMass_scatterplot_output\")\n             \n    ) # END tab 2\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage\n\n\n# server ----\nserver &lt;- function(input, output){\n  \n  # render penguin text ----\n  output$penguins_text_output &lt;- renderText({\n    \n    if(input$img_input == \"All penguins\"){\n      \"Meet all of our lovely penguins species!\"\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      \"Chinstraps get their name from the thin black line that runs under their chins\"\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      \"Gentoos stand out because of their bright orange bills and feet\"\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      \"Adelie penguins are my personal favorite &lt;3\"\n    }\n  }) # END renderText\n  \n  \n  # render penguin images ----\n  output$penguin_img_output &lt;- renderImage({\n    \n    if(input$img_input == \"All penguins\"){\n      list(src = \"www/all_penguins.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      list(src = \"www/chinstrap.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      list(src = \"www/gentoo.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      list(src = \"www/adelie.gif\", height = 240, width = 300)\n    }\n    \n  }, deleteFile = FALSE) # END renderImage\n  \n  \n  # # filter body masses ----\n  # body_mass_df &lt;- reactive({\n  #   penguins |&gt;\n  #     filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2])\n  # }) # END filter body masses\n  \n  \n  # # render the scatterplot output ----\n  # output$bodyMass_scatterplot_output &lt;- renderPlot({\n  #   \n  #   ggplot(na.omit(body_mass_df()),\n  #          aes(x = flipper_length_mm, y = bill_length_mm,\n  #              color = species, shape = species)) +\n  #     geom_point() +\n  #     scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  #     scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n  #     labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n  #          color = \"Penguin species\", shape = \"Penguin species\") +\n  #     theme_minimal() +\n  #     theme(legend.position = c(0.85, 0.2),\n  #           legend.background = element_rect(color = \"white\"))\n  #   \n  # }) # END render scatterplot\n  \n  \n} # END server\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#add-messages",
    "href": "course-materials/slides/part7.1-debugging-slides.html#add-messages",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Next, add messages to your reactives\n\nYou can insert diagnostic messages within your reactives using message() – here, we’ll add a short message where each text and image output should be rendered.\n\n\n\n~/broken-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(reactlog)\nlibrary(palmerpenguins)\n\n# ui ----\nui &lt;- fluidPage(\n  \n  tabsetPanel(\n    \n    # tab 1 ----\n    tabPanel(title = \"Tab 1\",\n             \n             # radio button input ----\n             radioButtons(\n               inputId = \"img_input\", label = \"Choose a penguin to display:\",\n               choices = c(\"All penguins\", \"Sassy chinstrap\", \"Staring gentoo\", \"Adorable adelie\"),\n               selected = \"All penguins\"),\n             \n             # text output ----\n             textOutput(outputId = \"penguin_text_output\"),\n             \n             # img output ----\n             imageOutput(outputId = \"penguin_img_output\")\n             \n    ), # END tab 1\n    \n    # tab 2 ----\n    tabPanel(title = \"Tab 2\"#,\n             \n             # # body mass slider input ----\n             # sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g)\",\n             #             min = 2700, max = 6300, value = c(3000, 4000)),\n             \n             # # body mass plot output ----\n             # plotOutput(outputId = \"bodyMass_scatterplot_output\")\n             \n    ) # END tab 2\n    \n  ) # END tabsetPanel\n  \n) # END fluidPage\n\n\n# server ----\nserver &lt;- function(input, output){\n  \n  # render penguin text ----\n  output$penguins_text_output &lt;- renderText({\n    \n    if(input$img_input == \"All penguins\"){\n      message(\"Printing all penguins text\")\n      \"Meet all of our lovely penguins species!\"\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      message(\"Printing chinstrap text\")\n      \"Chinstraps get their name from the thin black line that runs under their chins\"\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      message(\"Printing gentoo text\")\n      \"Gentoos stand out because of their bright orange bills and feet\"\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      message(\"Printing adelie text\")\n      \"Adelie penguins are my personal favorite &lt;3\"\n    }\n  }) # END renderText\n  \n  \n  # render penguin images ----\n  output$penguin_img_output &lt;- renderImage({\n    \n    if(input$img_input == \"All penguins\"){\n      message(\"Displaying all penguins image\")\n      list(src = \"www/all_penguins.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Sassy chinstrap\"){\n      message(\"Displaying chinstrap image\")\n      list(src = \"www/chinstrap.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Staring gentoo\"){\n      message(\"Displaying all gentoo image\")\n      list(src = \"www/gentoo.jpeg\", height = 240, width = 300)\n    }\n    else if(input$img_input == \"Adorable adelie\"){\n      message(\"Displaying all adelie image\")\n      list(src = \"www/adelie.gif\", height = 240, width = 300)\n    }\n    \n  }, deleteFile = FALSE) # END renderImage\n  \n  \n  # # filter body masses ----\n  # body_mass_df &lt;- reactive({\n  #   penguins |&gt;\n  #     filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2])\n  # }) # END filter body masses\n  \n  \n  # # render the scatterplot output ----\n  # output$bodyMass_scatterplot_output &lt;- renderPlot({\n  #   \n  #   ggplot(na.omit(body_mass_df()),\n  #          aes(x = flipper_length_mm, y = bill_length_mm,\n  #              color = species, shape = species)) +\n  #     geom_point() +\n  #     scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  #     scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n  #     labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n  #          color = \"Penguin species\", shape = \"Penguin species\") +\n  #     theme_minimal() +\n  #     theme(legend.position = c(0.85, 0.2),\n  #           legend.background = element_rect(color = \"white\"))\n  #   \n  # }) # END render scatterplot\n  \n  \n} # END server\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#see-messages",
    "href": "course-materials/slides/part7.1-debugging-slides.html#see-messages",
    "title": "EDS 296-1W",
    "section": "",
    "text": "See which messages successfully print\n\nWe can run our app and see messages successfully (or in the case of a broken app, unsuccessfully) print in the RStudio console as we interact with the app. You’ll notice that the each image message (e.g. “Displaying all penguins image”) prints when a new radioButton is selected, but those associated with the text outputs do not. This tells us that code is not being executed, beginning with first if statement inside renderText and that this is a good starting location for reviewing code (e.g. carefully crosschecking all inputIds and outputIds in that section)."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#reactlog",
    "href": "course-materials/slides/part7.1-debugging-slides.html#reactlog",
    "title": "EDS 296-1W",
    "section": "",
    "text": "If helpful, use {reactlog} to visualize reactivity\n\n\n\n    \nreactlog is a package / tool that provides:\n\n“A snapshot of the history (log) of all reactive interactions within a shiny application” - Barret Schloerke in his 2019 RSTUDIO::CONF talk, Reactlog 2.0: Debugging the state of Shiny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReactivity can be confusing. I recommend watching Barret Schloerke’s talk, linked above, and reading through the Shiny Reactlog vignette as you get started."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#reactlog-workflow",
    "href": "course-materials/slides/part7.1-debugging-slides.html#reactlog-workflow",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Using {reactlog}\n\nreactlog should already be installed as a dependency of shiny (but you’ll need to load it using library(reactlog) in your console). When enabled, it provides an interactive browser-based tool to visualize reactive dependencies and executions in your app.\n\nTo use reactlog, follow these steps:\n(1) Load the reactlog library in you console (library(reactlog))\n(2) Call reactlog_enable() in your console\n(3) Run your app, interact with it, then quit your app\n(4) Launch reactlog by running shiny::reactlogShow() in your console (or use the keyboard shortcut cmd/ctrl + F3)\n(5) Use your &lt;- and -&gt; arrow keys (or  and ) to move forward and backward through your app’s reactive life cycle\n\n\nRead about the components of the status bar and the meaning of different reactive states in the reactlog vignette."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#using-reactlog-working-app",
    "href": "course-materials/slides/part7.1-debugging-slides.html#using-reactlog-working-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Using {reactlog} to visualize reactivity in a correctly-functioning app\n\n\nTo visualize the reactive life cycle of the reactlog-working app, let’s first load the reactlog library, then call reactlog_enable() in our console. Next, we’ll run the app and interact with it. By default, All penguins is selected. For demonstration purposes, let’s click down the list (Sassy chinstrap, Staring gentoo, and finally Adorable adelie). When done, stop the app, then run shiny::reactlogShow() in the console to open the reactlog visualizer in a browser window.\n\n\nNote: We’ve left the scatter plot on Tab 2 (and it’s related UI elements) commented out (as we practiced in the earlier few slides) for this demo – the {reactlog} package has many features that allow you to explore reactive dependencies across your whole app, but it can get complicated quickly. For demo purposes, we’re going to work with this “smaller” version of our app, which contains just the problematic code."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#interpreting-reactlog-working-app",
    "href": "course-materials/slides/part7.1-debugging-slides.html#interpreting-reactlog-working-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Interpreting {reactlog} (used with our correctly-functioning app)\n\nThere’s a lot to take when looking at the reactlog viewer, so let’s take it one step at a time:\n(1) The radioButton input defaults to show the All penguins image and associated text. When we launch reactlog, our input , reactive expression , and outputs  are Ready, meaning the calculated values are available (defaults in this case) and reactive elements have finished executing (i.e. the image and text is displayed). This Ready state is indicated by the green icons.\n\n(2) I (the user) then updated the input by choosing Sassy chinstrap, invalidating (i.e. resetting) the input and thereby invalidating any dependencies – in this case both the image and text outputs. This Invalidating state is indicated by the gray icons.\n\n\n(3) Once all dependencies are invalidated, the reactive elements can begin Calculating (i.e. executing) based on the new input (Sassy chinstrap). Elements are colored yellow when they are being calculated, then green when calculations are complete and the reactive element has been updated. In this example, first the image and then the text are calculated and updated.\n\n\n(4) These same steps are repeated when I select the Staring gentoo, then Adorable adelie radioButtons"
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#using-reactlog-broken-app",
    "href": "course-materials/slides/part7.1-debugging-slides.html#using-reactlog-broken-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Using {reactlog} to visualize reactivity in a broken app\n\n\nLet’s try out reactlog on our intentionally broken app (reactlog-broken, where our image changes when a radioButton user input is updated, but our text doesn’t appear). As in our functioning app, the All penguins image is selected by default. For demonstration purposes, let’s select each option moving down the list (Sassy chinstrap, Staring gentoo, Adorable adelie) before launching the reactlog browser view (using shiny::reactlogShow()).\n\n\n\n\n\nSimilar to our functioning app, the default input, All penguins, and image output are Ready (green). However, in this example our text output is not a dependency of our application’s input – there’s no linkage and the text output is Invalidated (gray).\n\n\nAs we click down the list of radioButtons, the image output is invalidated, then updated accordingly, but the text output remains disconnected from our input."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#id-bug",
    "href": "course-materials/slides/part7.1-debugging-slides.html#id-bug",
    "title": "EDS 296-1W",
    "section": "",
    "text": "So what’s the issue with our app?\n\n\nEvidence from our diagnostic messages and reactlog suggests that we should make sure that our UI and server are actually able to communicate about our desired text output. After careful inspection of our textOutput() and renderText() code, we find that a spelling error is to blame:\n\n\nOur outputId in the UI is set to penguin_text_output:\n\n\n\n\n~/broken-app/app.R\n\nui &lt;- fluidPage(\n  \n  # ~ previous code excluded for brevity ~\n  \n  # text output ----\n  textOutput(outputId = \"penguin_text_output\")\n  \n)\n\n\n\nBut we call penguins_text_output (note the plural) when rendering our output in the server:\n\n\n\n\n~/broken-app/app.R\n\nserver &lt;- function(input, output){\n  \n  # ~ previous code excluded for brevity ~\n  \n  # render penguin text ----\n  output$penguins_text_output &lt;- renderText({\n    \n    # ~ code excluded for brevity ~\n    \n  })\n}\n\n\n\nBy updating our outputId to match in both the UI and the server, we fix our app."
  },
  {
    "objectID": "course-materials/slides/part7.1-debugging-slides.html#end",
    "href": "course-materials/slides/part7.1-debugging-slides.html#end",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 7.1\n\n\nUp next: testing\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#title-slide",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#title-slide",
    "title": "EDS 296-1W",
    "section": "",
    "text": "EDS 430: Part 1.2\nSetting up a Shiny app"
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#setup",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#setup",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Play Setting up your Shiny app\n\n\nLet’s start with some standard operating procedures – things you’ll do each time you begin a new shiny app."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#github-repo",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#github-repo",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Create your GitHub repo\n\n\nLet’s start by creating a GitHub repo to house our soon-to-be app(s), then we’ll clone our repo to our computer. I’m using RStudio to clone my repo in the example below, but you can also do this via the command line using git clone &lt;repo-url&gt;."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#repo-structure",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#repo-structure",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Shiny app repo structure\n\n\nNot much is required to make a functional app (which is awesome) – for a basic app, you really just need an app.R file where you’ll write the code for your UI and server. To stay organized, we’ll place app.R into a subdirectory (e.g. /myapp), which will also house any dependencies (e.g. other scripts/files/etc.) used by app.R."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#begin-the-same",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#begin-the-same",
    "title": "EDS 296-1W",
    "section": "",
    "text": "All Shiny apps begin (in almost) the same way\n\n\nYou have the option of creating either a single-file app or two-file app, and they look nearly the same (we’ll see both formats in the coming slides).\n\n\n\nWhy two options? Before v0.10.2, Shiny apps needed to be split into two separate files, ui.R and server.R, that defined the UI and server components, respectively. With v0.10.2+, users can create a single-file app, app.R, which contains both the UI and server components together. While it largely comes down to personal preference, a single-file format is best for smaller apps or when creating a reprex, while the two-file format is beneficial when writing large, complex apps where breaking apart code can make things a bit more navigable / maintainable."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#single-file",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#single-file",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Create a single-file Shiny app\n\n\nYou can create a single-file app using RStudio’s built-in Shiny app template (e.g. File &gt; New Project… &gt; New Directory &gt; Shiny Application), but it’s just as easy to create it from scratch (and you’ll memorize the structure faster!). Let’s do that now.\n\n\n\n(1) In your project repo, create a subdirectory to house your app – I’m calling mine, single-file-app.\n\n\n\n\n(2) Create a new R script inside single-file-app/ and name it app.R – you must name your script app.R. Copy / type the following code into app.R, or use the shinyapp snippet to automatically generate a shiny app template.\n\n\n\n\n~/single-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\n\n# user interface ----\nui &lt;- fluidPage()\n\n# server instructions ----\nserver &lt;- function(input, output) {}\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)\n\n\n\nTip: Use code sections (denoted by # some text ----) to make navigating different sections of your app code a bit easier. Code sections will appear in your document outline (find the button at the top right corner of the script/editor panel)."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#run-app",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#run-app",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Run your app\n\n\nOnce you have saved your app.R file, the “Run” code button should turn into a “Run App” button that looks like: . Click that button to run your app (alternatively, run runApp(\"directory-name\") in your console – for me, that looks like, runApp(\"single-file-app\"))!\n\n\n\nYou won’t see much yet, as we have only built a blank app (but a functioning app, nonetheless!). In your RStudio console, you should see something like: Listening on http://127.0.0.1:XXXX, which is the URL where your app can be found. 127.0.0.1 is a standard address that means “this computer,” and the last four digits represent a randomly assigned port number. You can click the “Open in Browser” button, , to see how your app will appear when viewed in your web browser.\n\n\nYou should also notice a red stop sign, , appear in the top right corner of your console indicating that R is busy – this is because your R session is currently acting as your Shiny app server and listening for any user interaction with your app. Because of this, you won’t be able to run any commands in the console until you quit your app. Do so by pressing the stop button."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#two-file",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#two-file",
    "title": "EDS 296-1W",
    "section": "",
    "text": "Create a two-file Shiny app\n\n\nIn practice, you will likely find yourself opting for the the two-file format – code expands quickly, even when building relatively small apps. This two-file approach (well, three if you use a global.R file, which is encouraged) will help to keep your code a bit more manageable.\n\n\n\n(1) In your project repo’s root directory, create a new subdirectory to house your app – I’m calling mine, two-file-app.\n\n\n\n\n(2) Create two new R scripts inside two-file-app/ named ui.R and server.R – you must name your scripts ui.R and server.R. Copy the following code into the respective files. Note: When splitting your UI and server into separate files, you do not need to include the shinyApp(ui = ui, server = server) line of code (as required in your single-file app).\n\n\n\n\n\n\n~/two-file-app/ui.R\n\n# user interface ----\nui &lt;- fluidPage()\n\n\n\n\n\n\n~/two-file-app/server.R\n\n# server instructions ----\nserver &lt;- function(input, output) {}\n\n\n\n\n\n\n\n(3) Lastly, let’s create a global.R file within two-file-app/ and add dependencies (right now, that’s just loading the shiny package). Run your app as we did earlier.\n\n\n\n\n~/two-file-app/global.R\n\n# load libraries ----\nlibrary(shiny)"
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#end-section",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#end-section",
    "title": "EDS 296-1W",
    "section": "",
    "text": "End part 1.2\n\n\nUp next: building out a single-file app\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/part0-setup.html#prerequisites",
    "href": "course-materials/part0-setup.html#prerequisites",
    "title": "Setup",
    "section": "Prerequisites",
    "text": "Prerequisites\nNo prior Shiny experience necessary for this course! However, we do assume that participants have the following:\n\nR / RStudio installed & a basic familiarity with the language\nA GitHub profile & git installed / configured\nYou have the required R packages installed. You can install / update them all at once by running:\n\n\ninstall.packages(pkgs = c( \"tidyverse\", \"shiny\", \"shinydashboard\", \"shinyWidgets\", \"shinycssloaders\", \"markdown\", \"DT\", \"leaflet\", \"bslib\", \"thematic\", \"fresh\", \"sass\", \"reactlog\", \"shinytest2\", \"palmerpenguins\", \"lterdatasampler\", \"gapminder\"))\n\n\n(Optional, but recommended) Install the Let’s get color blind Google Chrome extension\n\n\nPlease see the MEDS Installation Guide for more detailed instructions on installing the above software."
  },
  {
    "objectID": "course-materials/part0-setup.html#reference-code",
    "href": "course-materials/part0-setup.html#reference-code",
    "title": "Setup",
    "section": "Reference code",
    "text": "Reference code\nWe’ll be building / playing with a number of small apps and dashboards throughout this workshop. You can reference the complete source code for each of them on GitHub.\nWe’ll be creating our own GitHub repositories to house our apps, so you do not need to fork this repo (unless you want to, of course)."
  },
  {
    "objectID": "course-materials/part6-streamlining-code.html#required-packages",
    "href": "course-materials/part6-streamlining-code.html#required-packages",
    "title": "Streamlining code",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be using the following R packages:\n\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(tidyverse)"
  },
  {
    "objectID": "course-materials/part6-streamlining-code.html#required-data",
    "href": "course-materials/part6-streamlining-code.html#required-data",
    "title": "Streamlining code",
    "section": "Required Data",
    "text": "Required Data\n\nlibrary(palmerpenguins)\nlibrary(gapminder)"
  },
  {
    "objectID": "course-materials/part6-streamlining-code.html#lecture-materials",
    "href": "course-materials/part6-streamlining-code.html#lecture-materials",
    "title": "Streamlining code",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 6 is broken down into two lessons:\n\n\n\nFunctions\n lecture 6.1 slides\n\n\n\n\nModules\n lecture 6.2 slides"
  }
]