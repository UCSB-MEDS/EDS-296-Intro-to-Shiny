[
  {
    "objectID": "course-materials/part8-wrap-up.html",
    "href": "course-materials/part8-wrap-up.html",
    "title": "Wrap up",
    "section": "",
    "text": "ADD IMAGE HERE"
  },
  {
    "objectID": "course-materials/part8-wrap-up.html#required-data",
    "href": "course-materials/part8-wrap-up.html#required-data",
    "title": "Wrap up",
    "section": "Required Data",
    "text": "Required Data"
  },
  {
    "objectID": "course-materials/part8-wrap-up.html#lecture-materials",
    "href": "course-materials/part8-wrap-up.html#lecture-materials",
    "title": "Wrap up",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 8 is broken down into three lessons:\n\n\n\ntbd\n lecture 2.1 slides\n\n\n\n\ntbd\n lecture 2.2 slides\n\n\n\n\ntbd\n lecture 2.3 slides"
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#title-slide",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#title-slide",
    "title": "EDS 430",
    "section": "",
    "text": "EDS 430: Part 1.2\nSetting up a Shiny app\n\nWeek 1 | January 26th, 2024"
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#setup",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#setup",
    "title": "EDS 430",
    "section": "",
    "text": "Play Setting up your Shiny app\n\n\nLet’s start with some standard operating procedures – things you’ll do each time you begin a new shiny app."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#github-repo",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#github-repo",
    "title": "EDS 430",
    "section": "",
    "text": "Create your GitHub repo\n\n\nLet’s start by creating a GitHub repo to house our soon-to-be app(s), then we’ll clone our repo to our computer. I’m using RStudio to clone my repo in the example below, but you can also do this via the command line using git clone &lt;repo-url&gt;."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#repo-structure",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#repo-structure",
    "title": "EDS 430",
    "section": "",
    "text": "Shiny app repo structure\n\n\nNot much is required to make a functional app (which is awesome) – for a basic app, you really just need an app.R file where you’ll write the code for your UI and server. To stay organized, we’ll place app.R into a subdirectory (e.g. /myapp), which will also house any dependencies (e.g. other scripts/files/etc.) used by app.R."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#begin-the-same",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#begin-the-same",
    "title": "EDS 430",
    "section": "",
    "text": "All Shiny apps begin (in almost) the same way\n\n\nYou have the option of creating either a single-file app or two-file app, and they look nearly the same (we’ll see both formats in the coming slides).\n\n\n\nWhy two options? Before v0.10.2, Shiny apps needed to be split into two separate files, ui.R and server.R, that defined the UI and server components, respectively. With v0.10.2+, users can create a single-file app, app.R, which contains both the UI and server components together. While it largely comes down to personal preference, a single-file format is best for smaller apps or when creating a reprex, while the two-file format is beneficial when writing large, complex apps where breaking apart code can make things a bit more navigable/maintainable."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#single-file",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#single-file",
    "title": "EDS 430",
    "section": "",
    "text": "Create a single-file Shiny app\n\n\nYou can create a single-file app using RStudio’s built-in Shiny app template (e.g. File &gt; New Project… &gt; New Directory &gt; Shiny Application), but it’s just as easy to create it from scratch (and you’ll memorize the structure faster!). Let’s do that now.\n\n\n\n1. In your project repo, create a subdirectory to house your app – I’m calling mine, single-file-app.\n\n\n\n\n2. Create a new R script inside /single-file-app and name it app.R – you must name your script app.R. Copy/type the following code into app.R, or use the shinyapp snippet to automatically generate a shiny app template.\n\n\n# load packages ----\nlibrary(shiny)\n\n# user interface ----\nui &lt;- fluidPage()\n\n# server instructions ----\nserver &lt;- function(input, output) {}\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)\n\n\nTip: Use code sections (denoted by # some text ----) to make navigating different sections of your app code a bit easier. Code sections will appear in your document outline (find the button at the top right corner of the script/editor panel)."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#run-app",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#run-app",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app\n\n\nOnce you have saved your app.R file, the “Run” code button should turn into a “Run App” button that looks like: . Click that button to run your app (alternatively, run runApp(\"directory-name\") in your console – for me, that looks like, runApp(\"single-file-app\"))!\n\n\n\nYou won’t see much yet, as we have only built a blank app (but a functioning app, nonetheless!). In your RStudio console, you should see something like: Listening on http://127.0.0.1:XXXX, which is the URL where your app can be found. 127.0.0.1 is a standard address that means “this computer,” and the last four digits represent a randomly assigned port number. You can click the “Open in Browser” button, , to see how your app will appear when viewed in your web browser.\n\n\nYou should also notice a red stop sign, , appear in the top right corner of your console indicating that R is busy–this is because your R session is currently acting as your Shiny app server and listening for any user interaction with your app. Because of this, you won’t be able to run any commands in the console until you quit your app. Do so by pressing the stop button."
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#two-file",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#two-file",
    "title": "EDS 430",
    "section": "",
    "text": "Create a two-file Shiny app\n\n\nIn practice, you will likely find yourself opting for the the two-file format – code expands quickly, even when building relatively small apps. This two-file approach (well, three if you use a global.R file, which is encouraged) will help to keep your code a bit more manageable.\n\n\n\n1. In your project repo, create a new subdirectory to house your app – I’m calling mine, two-file-app.\n\n\n\n\n2. Create two new R scripts inside /two-file-app named ui.R and server.R – you must name your scripts ui.R and server.R. Copy the following code into the respective files. Note: When splitting your UI and server into separate files, you do not need to include the shinyApp(ui = ui, server = server) line of code (as required in your single-file app).\n\n\n\n\n\n\n\nur.R\n\n# user interface ----\nui &lt;- fluidPage()\n\n\n\n\n\n\n\n\n\nserver.R\n\n# server instructions ----\nserver &lt;- function(input, output) {}\n\n\n\n\n\n\n\n3. Lastly, let’s create a global.R file within /two-file-app and add dependencies (right now, that’s just loading the shiny package). Run your app as we did earlier.\n\n\n\n\n\nglobal.R\n\n# load libraries ----\nlibrary(shiny)"
  },
  {
    "objectID": "course-materials/slides/part1.2-setup-app-slides.html#end-section",
    "href": "course-materials/slides/part1.2-setup-app-slides.html#end-section",
    "title": "EDS 430",
    "section": "",
    "text": "End part 1.2\n\n\nUp next: building out a single-file app\n\n\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#title-slide",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#title-slide",
    "title": "EDS 430",
    "section": "",
    "text": "EDS 430: Part 2.2\nBuilding a two-file app\n\nWeek 1 | January 26th, 2024"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#build-app2",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#build-app2",
    "title": "EDS 430",
    "section": "",
    "text": "Building out your 2nd app\n\n\nUp until now, we’ve been adding our text and widgets in a pretty unstructured way – elements are stacked on top of one another within a single column. Next, we’ll learn how to customize the layout of our app to make it a bit more visually pleasing."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#LO-app2v1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#LO-app2v1",
    "title": "EDS 430",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app)\n\n\nBy the end of building out this second app, you should:\n\n\n\n be comfortable creating a shiny app using the two-file (ui.R & server.R) format along with a global.R file\n\n\n\n\n understand how to use layout functions to customize the visual structure of your app’s UI\n\n\n\n\n have more practice building reactive outputs – and placing them within the layout structure of your app\n\n\n\n\n be able to create multiple inputs that control a given output\n\n\n\n\n know how to import larger bodies of text using includeMarkdown() (rather than writing & styling text within your UI)\n\n\n\n\n successfully publish an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\n {shinyWidgets}: extend shiny widgets with some different, fun options\n\n\n\n\n {lterdatasampler}: data"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#roadmap-app2v1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#roadmap-app2v1",
    "title": "EDS 430",
    "section": "",
    "text": "Roadmap for App #2v1\n\n\nWe’ll be building out our two-file app using data from the {lterdatasampler} and {palmerpenguins} packages. We’ll focus on creating a functional app that has a more visually pleasing UI layout (and we’ll refine it’s appearance even further in v2). By the end of v1, we’ll have created:\n\n\n\n\n\n(a) A navigation bar with two pages, one of which will contain two tabs (one tab for each plot)\n\n\n(b) A pickerInput and checkboxGroupButtons for users to filter cutthroat trout data in a reactive scatterplot\n\n\n(c) A pickerInput for users to filter penguin data and a sliderInput to adjust the number of bins in a reactive histogram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou’ll notice that there are some UI quirks (most notably, blank plots that appear when no data is selected) that can make the user experience less than ideal (and even confusing) – we’ll learn about ways to improve this in v2 of our app."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#two-source",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#two-source",
    "title": "EDS 430",
    "section": "",
    "text": "Two files? Try two panes!\n\n\nWe’ll be building out a two-file shiny app this time around. You can open multiple scripts up side-by-side by navigating to Tools &gt; Global Options &gt; Pane Layout &gt; Add Column\n\n\n\nThis setup is certainly not required/necessary – organize your IDE however you work best!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#app2-plots",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#app2-plots",
    "title": "EDS 430",
    "section": "",
    "text": "Practice data wrangling, filtering & viz first!\n\n\nHere’s what I’ve done in my ~scratch/practice_script_app2_lter.R file:\n\n\nTrout plotPenguin plot\n\n\n\n\n\n\n\npractice_script_app2_lter.R\n\n#..........................load packages.........................\nlibrary(lterdatasampler)\nlibrary(tidyverse)\n\n#............custom ggplot theme (apply to both plots)...........\nmyCustomTheme &lt;- theme_light() +\n  theme(axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(linewidth = 0.7))\n\n#.......................wrangle trout data.......................\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n#..................practice filtering trout data.................\ntrout_filtered_df &lt;- clean_trout |&gt; \n  filter(channel_type %in% c(\"pool\", \"rapid\")) |&gt; \n  filter(section %in% c(\"clear cut forest\"))\n\n#........................plot trout data.........................\nggplot(trout_filtered_df, aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n  geom_point(alpha = 0.7, size = 5) +\n  scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\", \n                                \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\", \n                                \"side channel\" = \"#94CBEC\")) +\n  scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19, \n                                \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23, \n                                \"side channel\" = 25)) +\n  labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n  myCustomTheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the and_vertebrates data set from {lterdatasampler} to create a scatter plot of trout weights by lengths. When we move to shiny, we’ll build 2 inputs for filtering our data: one to select channel_type and one to select section.\n\n\n\n\n\n\n\n\n\n\n\npractice_script_app2_lter.R\n\n#..........................load packages.........................\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n#..................practice filtering for island.................\nisland_df &lt;- penguins %&gt;%\n  filter(island %in% c(\"Dream\", \"Torgesen\"))\n\n#........................plot penguin data.......................\nggplot(na.omit(island_df), aes(x = flipper_length_mm, fill = species)) +\n  geom_histogram(alpha = 0.6, bins = 25) +\n  scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n       fill = \"Penguin species\") +\n  myCustomTheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the penguins data set from {palmerpenguins} to create a histogram of penguin flipper lengths. When we move to shiny, we’ll build 2 inputs for filtering our data: one to select island and one to change the number of histogram bins."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#global.R",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#global.R",
    "title": "EDS 430",
    "section": "",
    "text": "A global.R file can help you keep code organized\n\n\nWhile not a requirement of a shiny app, a global.R file will help reduce redundant code, increase your app’s speed, and help keep code more clearly organized. It works by running once when your app is first launched, making any logic, objects, etc. contained in it available to both the ui.R and server.R files (or, in the case of a single-file shiny app, the app.R file). It’s a great place for things like:\n\n\n\n loading packages\n importing data\n sourcing scripts (particularly functions – we’ll talk more about functions later)\n data wrangling (though you’ll want to do any major data cleaning before bringing your data into your app)\n building custom ggplot themes\n etc.\n\n\n\n\nReminder: global.R must be saved to the same directory as your ui.R and server.R files."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#unstructured-app1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#unstructured-app1",
    "title": "EDS 430",
    "section": "",
    "text": "We created a perfectly functional first app, but it’s not so visually pleasing\n\n\n\n \n\n nothing really grabs your eye\n\n\n inputs & outputs are stacked vertically on top of one another (which requires a lot of vertical scrolling)\n\n\n widget label text is difficult to distinguish from other text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we jump into adding reactive outputs to our next app, we’ll first plan out the visual structure of our UI – first on paper, then with layout functions."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-functions",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-functions",
    "title": "EDS 430",
    "section": "",
    "text": "Layout functions provide the high-level visual structure of your app\n\n\nLayouts are created using a hierarchy of function calls (typically) inside fluidPage(). Layouts often require a series functions – container functions establish the larger area within which other layout elements are placed. See a few minimal examples of layout functions on the following slides (though more exist!).\n\n\nSome useful layout function pairings:\n\n\n# sidebar for inputs & main area for outputs within the sidebarLayout() container\nsidebarLayout(\n  sidebarPanel(),\n  mainPanel()\n)\n# multi-row fluid layout (add any number of fluidRow()s to a fluidPage())\nfluidRow(\n  column(4, ...),\n  column(8, ...)\n)\n# tabPanel()s to contain HTML components (e.g. inputs/outputs) within the tabsetPanel() container\ntabsetPanel(\n  tabPanel()\n)\n# NOTE: can use navbarPage() in place of fluidPage(); creates a page with top-level navigation bar that can be used to toggle tabPanel() elements\nnavbarPage(\n  tabPanel()\n)"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-function-examples",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-function-examples",
    "title": "EDS 430",
    "section": "",
    "text": "Example UI layouts\n\n\nNote: You can combine multiple layout function groups to really customize your UI – for example, you can create a navbar, include tabs, and also establish sidebar and main panel areas for inputs and outputs.\n\n\nSidebar & main areaPage with multiple rowsTabsNavbar\n\n\n\nTo create a page with a side bar and main area to contain your inputs and outputs (respectively), explore the following layout functions and read up on the sidebarLayout documentation:\n\n\n\n\nfluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs here\n    ),\n    mainPanel(\n      # outputs here\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo create a page with multiple rows, explore the following layout functions and check out the fluid layout documentation. Note that each row is made up of 12 columns. The first argument of the column() function takes a value of 1-12 to specify the number of columns to occupy.\n\n\n\n\nfluidPage(\n  fluidRow(\n    column(4, \n      ...\n    ),\n    column(8, \n      ...\n    )\n  ),\n  fluidRow(\n    column(6, \n      ...\n    ),\n    column(6, \n      ...\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may find that you eventually end up with too much content to fit on a single application page. Enter tabsetPanel() and tabPanel(). tabsetPanel() creates a container for any number of tabPanel()s. Each tabPanel() can contain any number of HTML components (e.g. inputs and outputs). Find the tabsetPanel documentation here and check out this example:\n\n\n\n\ntabsetPanel(\n  tabPanel(\"Tab 1\", \n    # an input\n    # an output\n  ),\n  tabPanel(\"Tab 2\"),\n  tabPanel(\"Tab 3\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also want to use a navigation bar (navbarPage()) with different pages (created using tabPanel()) to organize your application. Read through the navbarPage documentation and try running the example below:\n\n\n\n\nnavbarPage(\n  title = \"My app\",\n  tabPanel(title = \"Tab 1\",\n           # an input\n           # an output\n           ),\n  tabPanel(title = \"Tab 2\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples adapted from Mastering Shiny, Ch. 6, by Hadley Wickham:"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-fxns-app2",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-fxns-app2",
    "title": "EDS 430",
    "section": "",
    "text": "Overview of layout functions used in App #2"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#build-navbar",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#build-navbar",
    "title": "EDS 430",
    "section": "",
    "text": "Build a navbar with two pages\n\n\nFirst, let’s build a UI that has a navigation bar with two tabs – one for background information and one to contain our data visualizations. To do this, we’ll use navbarPage() instead of fluidPage() to create our webpage.\n\n\nTip: It can be super helpful add code comments at the start and end of each UI element – for example, see # data viz tabPanel--- and # END data viz tabPanel, below. Adding text that you will eventually replace with content (e.g. plots, tables, images, longer text) may help to visualize what you’re working towards as well.\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           \"reactive plots will go here\" # REPLACE THIS WITH CONTENT\n           \n  ) # END (Page 2) data viz tabsetPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#add-tabs",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#add-tabs",
    "title": "EDS 430",
    "section": "",
    "text": "Add two tabs to the “Explore the Data” page\n\n\nGive your tabs the following titles: Trout and Penguins.\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"LTER Animal Data Explorer\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      \"trout data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#sidebar-main-panels",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#sidebar-main-panels",
    "title": "EDS 430",
    "section": "",
    "text": "Add sidebar & main panels to the Trout tab\n\n\nWe’ll eventually place our input in the sidebar and output in the main panel.\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-prompt",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-prompt",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 2: Add sidebar and main panels to the Penguins tab\n\n\n\n    I encourage you to type the code out yourself, rather than copy/paste! And be sure to add text where your input/output will eventually be placed. When you’re done, you app should look like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-solution",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise2-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 2: A solution\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Animal Data Explorer\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"penguin plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END penguin sidebarPanel\n                        \n                        # penguin mainPanel ----\n                        mainPanel(\n                          \n                          \"penguin plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END penguin mainPanel\n                        \n                      ) # END penguin sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#layout-review",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#layout-review",
    "title": "EDS 430",
    "section": "",
    "text": "Some important things to remember when building your UI’s layout:\n\n\n\n try creating a rough sketch of your intended layout before hitting the keyboard (I like to think of this as UI layout “pseudocode”)\n\n\n\n\n keeping clean code is important – we haven’t even any added any content yet and our UI is already &gt;70 lines of code!\n\n\n\n\n use rainbow parentheses, code comments and plenty of space between lines to keep things looking manageable and navigable\n\n\n\n\n use the keyboard shortcut, command + I (Mac) or control + I (Windows), to align messy code – this helps put those off-alignment parentheses back where they belong\n\n\n\n\n things can get out of hand quickly – add one layout section at a time, run your app to check that things look as you intend, then continue"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#first-trout",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#first-trout",
    "title": "EDS 430",
    "section": "",
    "text": "Add data viz: First up, trout\n\n\nWe’ll be using the and_vertebrates dataset from the {lterdatasampler} package to create our first reactive plot. These data contain coastal cutthroat trout (Oncorhynchus clarkii clarkii) lengths and weights collected in Mack Creek, Andrews Forest LTER. Original data can be found on the EDI Data Portal. Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\nImage Source: Joseph R. Tomelleri, as found on the Western Native Trout Initiative"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#import-packages-global",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#import-packages-global",
    "title": "EDS 430",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\n\nIn addition to the {lterdatasampler} package, we’ll also be using the {tidyverse} for data wrangling/visualization, and the {shinyWidgets} package to add a pickerInput and a checkboxGroupInput to our app.\n\n\nImport those three packages at the top of your global.R file\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler) \nlibrary(tidyverse)\nlibrary(shinyWidgets)"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#wrangle-data-global",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#wrangle-data-global",
    "title": "EDS 430",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\n\nWe can also do the bulk of our data wrangling here, rather than in the server. If we were reading in a data file (e.g. .csv), we would do that here too. Our new data object clean_trout, will now be available for us to call directly in our server (NOTE: we can easily copy our wrangling code over from our practice script).\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(tidyverse)\nlibrary(shinyWidgets) \n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#trout-pickerInput",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#trout-pickerInput",
    "title": "EDS 430",
    "section": "",
    "text": "Add a pickerInput for selecting channel_type to your UI\n\n\nThe channel_type variable (originally called unittype – we updated the name when wrangling data (see line 9 on previous slide)) represents the type of water body (cascade, riffle, isolated pool, pool, rapid, step (small falls), or side channel) data were collected in. We’ll start by building a shinyWidgets::pickerInput() to allow users to filter data based on channel_type.\n\n\n\nReminder: When we we designed our UI layout, we added a sidebarPanel to our Trout tab with the placeholder text \"trout plot input(s) go here\". Replace that text with the code for your pickerInput:\n\n\n\n\nui.R\n\n# channel type pickerInput ----\npickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n            choices = unique(clean_trout$channel_type), # alternatively: choices = c(\"rapid\", \"cascade\" ...)\n            options = pickerOptions(actionsBox = TRUE), # creates \"Select All / Deselect All\" buttons\n            selected = c(\"cascade\", \"pool\"), \n            multiple = TRUE) # END channel type pickerInput\n\n\n\nSave and run your app – a functional pickerInput should now appear in your UI.\n\n\nA shinyWidgets::pickerInput() is functionally equivalent to shiny::selectInput(), though it allows for greater customization and looks (in my opinion) a bit nicer."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#trout-output",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#trout-output",
    "title": "EDS 430",
    "section": "",
    "text": "Add a plot output to your UI\n\n\nNext, we need to create a placeholder in our UI for our trout scatterplot to live. Because we’ll be creating a reactive plot, we can use the plotOutput() function to do so.\n\n\n\nReminder: When we we designed our UI layout, we added a mainPanel to our Trout tab with the placeholder text \"trout plot output goes here\". Replace that text with the code for your plotOuput():\n\n\n\n\nui.R\n\nplotOutput(outputId = \"trout_scatterplot\")\n\n\n\nSave and run your app – it won’t look different at first glance, but inspecting your app in a browser window (using Chrome, right click &gt; Inspect) will reveal a placeholder box for your plot output to eventually live:"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#trout-plot",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#trout-plot",
    "title": "EDS 430",
    "section": "",
    "text": "Tell the server how to assemble pickerInput values into your plotOutput\n\n\nRemember the three rules for building reactive outputs: (1) save objects you want to display to output$&lt;id&gt;, (2) build reactive objects using a render*() function, and (3) access input values with input$&lt;id&gt;:\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter trout data ----\n  trout_filtered_df &lt;- reactive({\n    \n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input))\n    \n  })\n  \n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n    \n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n    \n  }) \n  \n} # END server\n\n\n\n\n\n\nA couple notes/reminders:\n\n\n If needed, reference your practice script to remind yourself how you planned to filter and plot your data\n\n\n Reactive data frames need a set of parentheses, (), following the name of the df (see ggplot(trout_filtered_df() ...))\n\n\n For a cohesive appearance, save your ggplot theme parameters to a named object in global.R (here, myCustomTheme), then apply to all plots in your app. See the following slide for code."
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#ggplot-theme",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#ggplot-theme",
    "title": "EDS 430",
    "section": "",
    "text": "Save a custom ggplot theme to global.R\n\n\nRather than re-typing your ggplot theme parameters out for every plot in your app, do so once in global.R, and save to an object name. You can then easily add your custom theme as a layer to each of your ggplots. Bonus: If you decide to modify your plot theme, you only have to do so in one place!\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-first-widget",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-first-widget",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app and try out your pickerInput widget!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-ui",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-ui",
    "title": "EDS 430",
    "section": "",
    "text": "Add a second input that will update the same output\n\n\nYou can have more than one input control the same output. Let’s now add a checkboxGroupButtons widget to our UI for selecting forest section (either clear cut forest or old growth forest). Check out the function documentation for more information on how to customize the appearance of your buttons.\n\n\nBe sure to add the widget to the same sidebarPanel as our pickerInput (and separate them with a comma!:\n\n\n\n\nui.R\n\n# trout plot sidebarPanel ----\nsidebarPanel(\n  \n  # channel type pickerInput ----\n  pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n              choices = unique(clean_trout$channel_type),\n              options = pickerOptions(actionsBox = TRUE),\n              selected = c(\"cascade\", \"pool\"),\n              multiple = TRUE), # END channel type pickerInput\n\n  # section checkboxGroupButtons ----\n  checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                       choices = c(\"clear cut forest\", \"old growth forest\"),\n                       selected = c(\"clear cut forest\", \"old growth forest\"),\n                       individual = FALSE, justified = TRUE, size = \"sm\",\n                       checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                   \n            ) # END trout plot sidebarPanel"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-server",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#second-input-server",
    "title": "EDS 430",
    "section": "",
    "text": "Update your reactive df to also filter based on the new checkboxGroupInput\n\n\nReturn to your server to modify trout_filtered_df – our data frame needs to be updated based on both the pickerInput, which selects for channel_type, and the checkboxGrouptInput, which selects for forest section:\n\n\n\n\nserver.R\n\n# filter trout data ----\ntrout_filtered_df &lt;- reactive({\n\n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input)) |&gt;\n      filter(section %in% c(input$section_input))\n      \n  })\n\n# trout scatterplot ----\noutput$trout_scatterplot &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n    geom_point(alpha = 0.7, size = 5) +\n    scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                  \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                  \"side channel\" = \"#94CBEC\")) +\n    scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                  \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                  \"side channel\" = 25)) +\n    labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n    myCustomTheme\n\n })"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-second-widget",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#run-app2v1-second-widget",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app and try out your pickerInput & checkboxGrouptInput widgets!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#break-section1",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#break-section1",
    "title": "EDS 430",
    "section": "",
    "text": "Take a break\n\n\nUp next: Adding in the penguins plot\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#second-penguins",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#second-penguins",
    "title": "EDS 430",
    "section": "",
    "text": "Add data viz: Next up, penguins\n\n\nWe’ll be using the penguins dataset from the {palmerpenguins} package to create our second reactive plot. These data contain penguin (genus Pygoscelis) body size measurements collected from three islands in the Palmer Archipelago, Antarctica, as part of the Palmer Station LTER. Original data can be found on the EDI Data Portal (Adélie data, Gentoo data, and Chinstrap data). Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-prompt",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-prompt",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 3: Add a reactive plot to the ‘Penguins’ tab\n\n\nWorking alone or in groups, add a reactive histogram of penguin flipper lengths (using the penguins data set from the {palmerpenguins} package) to the Penguins tab. Your plot should have the following features and look like the example below, when complete:\n\n\n\n\n data colored by penguin species\n\n\n a shinyWidgets::pickerInput that allows users to filter data based on island, and that includes buttons to Select All / Deselect All island options at once\n\n\n a shiny::sliderInput that allows users to change the number of histogram bins and that by default, displays a histogram with 25 bins\n\n\n the two widgets should be placed in the sidebarPanel and the reactive histogram should be placed in the mainPanel of the Penguins tab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for some tips on getting started!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-tips",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-tips",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 3: Tips\n\n\nTips:\n\n\n Remember to load the palmerpenguins package at the top of global.R so that your app can find the data\n\n\n Add your widgets to the sidebarPanel and your plot output to the mainPanel of the Penguins tab – look for that placeholder text we added earlier to help place your new code in the correct spot within your UI!\n\n\n Try changing the histogram bin number in your practice code script first, before attempting to make it reactive\n\n\nAnd remember to follow the our three steps for building reactive outputs (1. add input to UI, 2. add output to UI, 3. tell server how to assemble inputs into outputs)!\n\n  \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-solution",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#exercise3-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 3: A solution\n\n\nglobal.Rui.Rserver.R\n\n\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# DATA WRANGLING ----\n\n# trout data\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- theme_light() +\n  theme(#text = element_text(family = \"mono\"), \n    axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n\n\n\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\")\n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins %&gt;%\n      filter(island %in% input$penguin_island)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#break-section2",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#break-section2",
    "title": "EDS 430",
    "section": "",
    "text": "Take a break\n\n\nUp next: we’ll finish up by adding some intro text to the landing page\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#add-text",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#add-text",
    "title": "EDS 430",
    "section": "",
    "text": "Add background/other important information text\n\n\nIt’s usually valuable (and important) to provide some background information/context for your app – the landing page of your app can be a great place for this. We’re going to add text to our app’s landing page (i.e. the About this App page) so that it looks like the example below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome important pieces for information to consider adding:\n\n\n motivation for building the app\n\n\n brief instructions for exploring the data\n\n\n who maintains the app, where the code lives, how to submit issues/suggestions"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#unruly-text",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#unruly-text",
    "title": "EDS 430",
    "section": "",
    "text": "Adding long text to the UI can get unruly\n\n\nFor example, I’ve added and formatted my landing page’s text directly in the UI using lots of nested tags – I’ve done this inside the tabPanel titled About this App (Note: I’ve formatted the layout of this page a bit using fluidRow and columns to create some white space around the edges. I’ve also created a faint gray horizontal line, using hr(), beneath which I added a footnote):\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           fluidRow(\n             column(1),\n             column(10,\n                    tags$h1(\"Welcome to the LTER Animal Data Explorer!\"),\n                    tags$br(),\n                    tags$h4(\"Why did we build this app?\"),\n                    tags$p(\"This shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's\", tags$a(href = \"https://lternet.edu/\", \"Long Term Ecological Research (LTER)\"), \"sites...but primarily, it was built as a teaching tool for\", tags$a(href = \"https://bren.ucsb.edu/courses/eds-430\", \"EDS 430 (Intro to Shiny)\"), \"-- this workshop, taught through the\", tags$a(href = \"https://ucsb-meds.github.io/\", \"Master of Environmental Data Science (MEDS) program\"), \"at the\", tags$a(href = \"https://bren.ucsb.edu/\", \"Bren School of Environmental Science and Management\"), \"is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\"),\n                    tags$br(),\n                    tags$h4(\"Where's the data?\"),\n                    tags$p(\"Check out the\", tags$strong(\"Explore the Data\"), \"page to find interactive data visualizations looking at Cutthroat trout of the\", tags$a(href = \"https://andrewsforest.oregonstate.edu/\", \"Andrews Forest LTER\"), \"and Adélie, Gentoo & Chinstrap penguins of the\", tags$a(href = \"https://pallter.marine.rutgers.edu/\", \"Palmer Station LTER.\"))\n             ),\n             column(1)\n           ), # END fluidRow\n           \n           hr(),\n           \n           em(\"This app is maintained by\", tags$a(href = \"https://samanthacsik.github.io/\", \"Samantha Csik\"), \"and is updated as needed for teaching purposes. Please report any issues\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app/issues\", \"here.\"), \"Source code can be found on\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app\", \"GitHub.\"))\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#includeMarkdown",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#includeMarkdown",
    "title": "EDS 430",
    "section": "",
    "text": "Instead, use includeMarkdown()\n\n\nTo maintain readability and an overall tidier-looking UI, you can write and style long bodies of text in separate markdown (.md) files that you then read into your UI using the includeMarkdown() function (Important: the includeMarkdown() function requires the {markdown} package – be sure to add library(markdown) to your global.R file!).\n\n\nI recommend saving those .md files in a subdirectory named /text within your app’s directory (e.g. ~/two-file-app/text/mytext.md). See how I simplified my UI by saving my long landing page text to two new files, about.md and footer.md, then imported them into my UI using includeMarkdown().\n\n\nui.Rtext/about.mdtext/footer.md\n\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1),\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel\n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\")\n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\ntext/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\ntext/footer/md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#last-run",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#last-run",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app one more time to admire your beautiful creation!\n\n\n\nAgain, we have some UX/UI quirks to fix (most notably, blank plots when all widget options are deselected), which we’ll handle soon. But for now, we have a functioning app that we can practice deploying for the first time!"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#app2-code",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#app2-code",
    "title": "EDS 430",
    "section": "",
    "text": "Code recap for app #2, so far:\n\n\n\nglobal.Rui.Rserver.Rabout.mdfooter.md\n\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\nlibrary(markdown)\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n\n\n\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1),\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins |&gt; \n      filter(island %in% input$penguin_island)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme\n    \n  })\n  \n} # END server\n\n\n\n\n\n\n\ntext/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\ntext/footer.md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2-two-file-app-slides.html#end",
    "href": "course-materials/slides/part2.2-two-file-app-slides.html#end",
    "title": "EDS 430",
    "section": "",
    "text": "End part 2.2\n\n\nUp next: deploying our app with shinyapps.io\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#add-text",
    "href": "course-materials/slides/part2.2C.html#add-text",
    "title": "EDS 430",
    "section": "",
    "text": "Add background/other important information text\n\n\nIt’s usually valuable (and important) to provide some background information/context for your app – the landing page of your app can be a great place for this. We’re going to add text to our app’s landing page (i.e. the About this App page) so that it looks like the example below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome important pieces for information to consider adding:\n\n\n motivation for building the app\n\n\n brief instructions for exploring the data\n\n\n who maintains the app, where the code lives, how to submit issues/suggestions"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#unruly-text",
    "href": "course-materials/slides/part2.2C.html#unruly-text",
    "title": "EDS 430",
    "section": "",
    "text": "Adding long text to the UI can get unruly\n\n\nFor example, I’ve added and formatted my landing page’s text directly in the UI using lots of nested tags – I’ve done this inside the tabPanel titled About this App (Note: I’ve formatted the layout of this page a bit using fluidRow and columns to create some white space around the edges. I’ve also created a faint gray horizontal line, using hr(), beneath which I added a footnote):\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           fluidRow(\n             column(1),\n             column(10,\n                    tags$h1(\"Welcome to the LTER Animal Data Explorer!\"),\n                    tags$br(),\n                    tags$h4(\"Why did we build this app?\"),\n                    tags$p(\"This shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's\", tags$a(href = \"https://lternet.edu/\", \"Long Term Ecological Research (LTER)\"), \"sites...but primarily, it was built as a teaching tool for\", tags$a(href = \"https://bren.ucsb.edu/courses/eds-430\", \"EDS 430 (Intro to Shiny)\"), \"-- this workshop, taught through the\", tags$a(href = \"https://ucsb-meds.github.io/\", \"Master of Environmental Data Science (MEDS) program\"), \"at the\", tags$a(href = \"https://bren.ucsb.edu/\", \"Bren School of Environmental Science and Management\"), \"is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\"),\n                    tags$br(),\n                    tags$h4(\"Where's the data?\"),\n                    tags$p(\"Check out the\", tags$strong(\"Explore the Data\"), \"page to find interactive data visualizations looking at Cutthroat trout of the\", tags$a(href = \"https://andrewsforest.oregonstate.edu/\", \"Andrews Forest LTER\"), \"and Adélie, Gentoo & Chinstrap penguins of the\", tags$a(href = \"https://pallter.marine.rutgers.edu/\", \"Palmer Station LTER.\"))\n             ),\n             column(1)\n           ), # END fluidRow\n           \n           hr(),\n           \n           em(\"This app is maintained by\", tags$a(href = \"https://samanthacsik.github.io/\", \"Samantha Csik\"), \"and is updated as needed for teaching purposes. Please report any issues\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app/issues\", \"here.\"), \"Source code can be found on\", tags$a(href = \"https://github.com/samanthacsik/EDS430-shiny-app\", \"GitHub.\"))\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#includeMarkdown",
    "href": "course-materials/slides/part2.2C.html#includeMarkdown",
    "title": "EDS 430",
    "section": "",
    "text": "Instead, use includeMarkdown()\n\n\nTo maintain readability and an overall tidier-looking UI, you can write and style long bodies of text in separate markdown (.md) files that you then read into your UI using the includeMarkdown() function (Important: the includeMarkdown() function requires the {markdown} package – be sure to add library(markdown) to your global.R file!).\n\n\nI recommend saving those .md files in a subdirectory named /text within your app’s directory (e.g. ~/two-file-app/text/mytext.md). See how I simplified my UI by saving my long landing page text to two new files, about.md and footer.md, then imported them into my UI using includeMarkdown().\n\n\nui.Rtext/about.mdtext/footer.md\n\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1),\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section:\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel\n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island\", label = \"Select an island:\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\")\n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\ntext/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\ntext/footer/md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#last-run",
    "href": "course-materials/slides/part2.2C.html#last-run",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app one more time to admire your beautiful creation!\n\n\n\nAgain, we have some UX/UI quirks to fix (most notably, blank plots when all widget options are deselected), which we’ll handle soon. But for now, we have a functioning app that we can practice deploying for the first time!"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#app2-code",
    "href": "course-materials/slides/part2.2C.html#app2-code",
    "title": "EDS 430",
    "section": "",
    "text": "Code recap for app #2, so far:\n\n\n\nglobal.Rui.Rserver.Rabout.mdfooter.md\n\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\nlibrary(markdown)\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n\n\n\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           # intro text fluidRow ----\n           fluidRow(\n             \n             # use columns to create white space on sides\n             column(1),\n             column(10, includeMarkdown(\"text/about.md\")),\n             column(1),\n             \n           ), # END intro text fluidRow\n           \n           hr(), # creates light gray horizontal line\n           \n           # footer text ----\n           includeMarkdown(\"text/footer.md\")\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\") \n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins |&gt; \n      filter(island %in% input$penguin_island)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme\n    \n  })\n  \n} # END server\n\n\n\n\n\n\n\ntext/about.md\n\n## Welcome to the LTER Animal Data Explorer!\n\n&lt;br&gt;\n\n#### Why did we build this app?\n\nThis shiny app was built, in part, to provide users a way of exploring morphological characteristics of the different animal species found within NSF's [Long Term Ecological Research (LTER)](https://lternet.edu/) sites...but primarily, it was built as a teaching tool for [EDS 430 (Intro to Shiny)](https://bren.ucsb.edu/courses/eds-430) -- this workshop, taught through the [Master of Environmental Data Science (MEDS) program](https://ucsb-meds.github.io/) at the [Bren School of Environmental Science and Management](https://bren.ucsb.edu/), is a two-day coding-intensive course meant to meant to provide a introductory foundation in shiny app development.\n\n&lt;br&gt;\n\n#### Where's the data? \n\nCheck out the **Explore the Data** page to find interactive data visualizations looking at Cutthroat trout of the [Andrews Forest LTER](https://andrewsforest.oregonstate.edu/) and Adelie, Gentoo & Chinstrap penguins of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/).\n\n\n\n\n\n\n\ntext/footer.md\n\n*This app is maintained by [Samantha Csik](https://samanthacsik.github.io/) and is updated as needed for teaching purposes. Please report any issues [here](https://github.com/samanthacsik/EDS430-shiny-app/issues). Source code can be found on [GitHub](https://github.com/samanthacsik/EDS430-shiny-app).*"
  },
  {
    "objectID": "course-materials/slides/part2.2C.html#end",
    "href": "course-materials/slides/part2.2C.html#end",
    "title": "EDS 430",
    "section": "",
    "text": "End part 2.2\n\n\nUp next: deploying our app with shinyapps.io\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#build-app2",
    "href": "course-materials/slides/part2.2A.html#build-app2",
    "title": "EDS 430",
    "section": "",
    "text": "Building out your 2nd app\n\n\nUp until now, we’ve been adding our text and widgets in a pretty unstructured way – elements are stacked on top of one another within a single column. Next, we’ll learn how to customize the layout of our app to make it a bit more visually pleasing."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#LO-app2v1",
    "href": "course-materials/slides/part2.2A.html#LO-app2v1",
    "title": "EDS 430",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app)\n\n\nBy the end of building out this second app, you should:\n\n\n\n be comfortable creating a shiny app using the two-file (ui.R & server.R) format along with a global.R file\n\n\n\n\n understand how to use layout functions to customize the visual structure of your app’s UI\n\n\n\n\n have more practice building reactive outputs – and placing them within the layout structure of your app\n\n\n\n\n be able to create multiple inputs that control a given output\n\n\n\n\n know how to import larger bodies of text using includeMarkdown() (rather than writing & styling text within your UI)\n\n\n\n\n successfully publish an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\n {shinyWidgets}: extend shiny widgets with some different, fun options\n\n\n\n\n {lterdatasampler}: data"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#roadmap-app2v1",
    "href": "course-materials/slides/part2.2A.html#roadmap-app2v1",
    "title": "EDS 430",
    "section": "",
    "text": "Roadmap for App #2v1\n\n\nWe’ll be building out our two-file app using data from the {lterdatasampler} and {palmerpenguins} packages. We’ll focus on creating a functional app that has a more visually pleasing UI layout (and we’ll refine it’s appearance even further in v2). By the end of v1, we’ll have created:\n\n\n\n\n\n(a) A navigation bar with two pages, one of which will contain two tabs (one tab for each plot)\n\n\n(b) A pickerInput and checkboxGroupButtons for users to filter cutthroat trout data in a reactive scatterplot\n\n\n(c) A pickerInput for users to filter penguin data and a sliderInput to adjust the number of bins in a reactive histogram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou’ll notice that there are some UI quirks (most notably, blank plots that appear when no data is selected) that can make the user experience less than ideal (and even confusing) – we’ll learn about ways to improve this in v2 of our app."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#two-source",
    "href": "course-materials/slides/part2.2A.html#two-source",
    "title": "EDS 430",
    "section": "",
    "text": "Two files? Try two panes!\n\n\nWe’ll be building out a two-file shiny app this time around. You can open multiple scripts up side-by-side by navigating to Tools &gt; Global Options &gt; Pane Layout &gt; Add Column\n\n\n\nThis setup is certainly not required/necessary – organize your IDE however you work best!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#app2-plots",
    "href": "course-materials/slides/part2.2A.html#app2-plots",
    "title": "EDS 430",
    "section": "",
    "text": "Practice data wrangling, filtering & viz first!\n\n\nHere’s what I’ve done in my ~scratch/practice_script_app2_lter.R file:\n\n\nTrout plotPenguin plot\n\n\n\n\n\n\n\npractice_script_app2_lter.R\n\n#..........................load packages.........................\nlibrary(lterdatasampler)\nlibrary(tidyverse)\n\n#............custom ggplot theme (apply to both plots)...........\nmyCustomTheme &lt;- theme_light() +\n  theme(axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(linewidth = 0.7))\n\n#.......................wrangle trout data.......................\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n#..................practice filtering trout data.................\ntrout_filtered_df &lt;- clean_trout |&gt; \n  filter(channel_type %in% c(\"pool\", \"rapid\")) |&gt; \n  filter(section %in% c(\"clear cut forest\"))\n\n#........................plot trout data.........................\nggplot(trout_filtered_df, aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n  geom_point(alpha = 0.7, size = 5) +\n  scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\", \n                                \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\", \n                                \"side channel\" = \"#94CBEC\")) +\n  scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19, \n                                \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23, \n                                \"side channel\" = 25)) +\n  labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n  myCustomTheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the and_vertebrates data set from {lterdatasampler} to create a scatter plot of trout weights by lengths. When we move to shiny, we’ll build 2 inputs for filtering our data: one to select channel_type and one to select section.\n\n\n\n\n\n\n\n\n\n\n\npractice_script_app2_lter.R\n\n#..........................load packages.........................\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n#..................practice filtering for island.................\nisland_df &lt;- penguins %&gt;%\n  filter(island %in% c(\"Dream\", \"Torgesen\"))\n\n#........................plot penguin data.......................\nggplot(na.omit(island_df), aes(x = flipper_length_mm, fill = species)) +\n  geom_histogram(alpha = 0.6, bins = 25) +\n  scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n       fill = \"Penguin species\") +\n  myCustomTheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll use the penguins data set from {palmerpenguins} to create a histogram of penguin flipper lengths. When we move to shiny, we’ll build 2 inputs for filtering our data: one to select island and one to change the number of histogram bins."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#global.R",
    "href": "course-materials/slides/part2.2A.html#global.R",
    "title": "EDS 430",
    "section": "",
    "text": "A global.R file can help you keep code organized\n\n\nWhile not a requirement of a shiny app, a global.R file will help reduce redundant code, increase your app’s speed, and help keep code more clearly organized. It works by running once when your app is first launched, making any logic, objects, etc. contained in it available to both the ui.R and server.R files (or, in the case of a single-file shiny app, the app.R file). It’s a great place for things like:\n\n\n\n loading packages\n importing data\n sourcing scripts (particularly functions – we’ll talk more about functions later)\n data wrangling (though you’ll want to do any major data cleaning before bringing your data into your app)\n building custom ggplot themes\n etc.\n\n\n\n\nReminder: global.R must be saved to the same directory as your ui.R and server.R files."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#unstructured-app1",
    "href": "course-materials/slides/part2.2A.html#unstructured-app1",
    "title": "EDS 430",
    "section": "",
    "text": "We created a perfectly functional first app, but it’s not so visually pleasing\n\n\n\n \n\n nothing really grabs your eye\n\n\n inputs & outputs are stacked vertically on top of one another (which requires a lot of vertical scrolling)\n\n\n widget label text is difficult to distinguish from other text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we jump into adding reactive outputs to our next app, we’ll first plan out the visual structure of our UI – first on paper, then with layout functions."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-functions",
    "href": "course-materials/slides/part2.2A.html#layout-functions",
    "title": "EDS 430",
    "section": "",
    "text": "Layout functions provide the high-level visual structure of your app\n\n\nLayouts are created using a hierarchy of function calls (typically) inside fluidPage(). Layouts often require a series functions – container functions establish the larger area within which other layout elements are placed. See a few minimal examples of layout functions on the following slides (though more exist!).\n\n\nSome useful layout function pairings:\n\n\n# sidebar for inputs & main area for outputs within the sidebarLayout() container\nsidebarLayout(\n  sidebarPanel(),\n  mainPanel()\n)\n# multi-row fluid layout (add any number of fluidRow()s to a fluidPage())\nfluidRow(\n  column(4, ...),\n  column(8, ...)\n)\n# tabPanel()s to contain HTML components (e.g. inputs/outputs) within the tabsetPanel() container\ntabsetPanel(\n  tabPanel()\n)\n# NOTE: can use navbarPage() in place of fluidPage(); creates a page with top-level navigation bar that can be used to toggle tabPanel() elements\nnavbarPage(\n  tabPanel()\n)"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-function-examples",
    "href": "course-materials/slides/part2.2A.html#layout-function-examples",
    "title": "EDS 430",
    "section": "",
    "text": "Example UI layouts\n\n\nNote: You can combine multiple layout function groups to really customize your UI – for example, you can create a navbar, include tabs, and also establish sidebar and main panel areas for inputs and outputs.\n\n\nSidebar & main areaPage with multiple rowsTabsNavbar\n\n\n\nTo create a page with a side bar and main area to contain your inputs and outputs (respectively), explore the following layout functions and read up on the sidebarLayout documentation:\n\n\n\n\nfluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs here\n    ),\n    mainPanel(\n      # outputs here\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo create a page with multiple rows, explore the following layout functions and check out the fluid layout documentation. Note that each row is made up of 12 columns. The first argument of the column() function takes a value of 1-12 to specify the number of columns to occupy.\n\n\n\n\nfluidPage(\n  fluidRow(\n    column(4, \n      ...\n    ),\n    column(8, \n      ...\n    )\n  ),\n  fluidRow(\n    column(6, \n      ...\n    ),\n    column(6, \n      ...\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may find that you eventually end up with too much content to fit on a single application page. Enter tabsetPanel() and tabPanel(). tabsetPanel() creates a container for any number of tabPanel()s. Each tabPanel() can contain any number of HTML components (e.g. inputs and outputs). Find the tabsetPanel documentation here and check out this example:\n\n\n\n\ntabsetPanel(\n  tabPanel(\"Tab 1\", \n    # an input\n    # an output\n  ),\n  tabPanel(\"Tab 2\"),\n  tabPanel(\"Tab 3\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may also want to use a navigation bar (navbarPage()) with different pages (created using tabPanel()) to organize your application. Read through the navbarPage documentation and try running the example below:\n\n\n\n\nnavbarPage(\n  title = \"My app\",\n  tabPanel(title = \"Tab 1\",\n           # an input\n           # an output\n           ),\n  tabPanel(title = \"Tab 2\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples adapted from Mastering Shiny, Ch. 6, by Hadley Wickham:"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-fxns-app2",
    "href": "course-materials/slides/part2.2A.html#layout-fxns-app2",
    "title": "EDS 430",
    "section": "",
    "text": "Overview of layout functions used in App #2"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#build-navbar",
    "href": "course-materials/slides/part2.2A.html#build-navbar",
    "title": "EDS 430",
    "section": "",
    "text": "Build a navbar with two pages\n\n\nFirst, let’s build a UI that has a navigation bar with two tabs – one for background information and one to contain our data visualizations. To do this, we’ll use navbarPage() instead of fluidPage() to create our webpage.\n\n\nTip: It can be super helpful add code comments at the start and end of each UI element – for example, see # data viz tabPanel--- and # END data viz tabPanel, below. Adding text that you will eventually replace with content (e.g. plots, tables, images, longer text) may help to visualize what you’re working towards as well.\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           \"reactive plots will go here\" # REPLACE THIS WITH CONTENT\n           \n  ) # END (Page 2) data viz tabsetPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#add-tabs",
    "href": "course-materials/slides/part2.2A.html#add-tabs",
    "title": "EDS 430",
    "section": "",
    "text": "Add two tabs to the “Explore the Data” page\n\n\nGive your tabs the following titles: Trout and Penguins.\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"LTER Animal Data Explorer\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title =  \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      \"trout data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#sidebar-main-panels",
    "href": "course-materials/slides/part2.2A.html#sidebar-main-panels",
    "title": "EDS 430",
    "section": "",
    "text": "Add sidebar & main panels to the Trout tab\n\n\nWe’ll eventually place our input in the sidebar and output in the main panel.\n\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\"  # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      \"penguin data viz here\"  # REPLACE THIS WITH CONTENT\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#exercise2-prompt",
    "href": "course-materials/slides/part2.2A.html#exercise2-prompt",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 2: Add sidebar and main panels to the Penguins tab\n\n\n\n    I encourage you to type the code out yourself, rather than copy/paste! And be sure to add text where your input/output will eventually be placed. When you’re done, you app should look like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#exercise2-solution",
    "href": "course-materials/slides/part2.2A.html#exercise2-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 2: A solution\n\n\n\nui.R\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n           \"background info will go here\" # REPLACE THIS WITH CONTENT\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Animal Data Explorer\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"trout plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END trout sidebarPanel\n                        \n                        # trout mainPanel ----\n                        mainPanel(\n                          \n                          \"trout plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END trout mainPanel\n                        \n                      ) # END trout sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin sidebarPanel ----\n                        sidebarPanel(\n                          \n                          \"penguin plot input(s) go here\" # REPLACE THIS WITH CONTENT\n                          \n                        ), # END penguin sidebarPanel\n                        \n                        # penguin mainPanel ----\n                        mainPanel(\n                          \n                          \"penguin plot output goes here\" # REPLACE THIS WITH CONTENT\n                          \n                        ) # END penguin mainPanel\n                        \n                      ) # END penguin sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#layout-review",
    "href": "course-materials/slides/part2.2A.html#layout-review",
    "title": "EDS 430",
    "section": "",
    "text": "Some important things to remember when building your UI’s layout:\n\n\n\n try creating a rough sketch of your intended layout before hitting the keyboard (I like to think of this as UI layout “pseudocode”)\n\n\n\n\n keeping clean code is important – we haven’t even any added any content yet and our UI is already &gt;70 lines of code!\n\n\n\n\n use rainbow parentheses, code comments and plenty of space between lines to keep things looking manageable and navigable\n\n\n\n\n use the keyboard shortcut, command + I (Mac) or control + I (Windows), to align messy code – this helps put those off-alignment parentheses back where they belong\n\n\n\n\n things can get out of hand quickly – add one layout section at a time, run your app to check that things look as you intend, then continue"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#first-trout",
    "href": "course-materials/slides/part2.2A.html#first-trout",
    "title": "EDS 430",
    "section": "",
    "text": "Add data viz: First up, trout\n\n\nWe’ll be using the and_vertebrates dataset from the {lterdatasampler} package to create our first reactive plot. These data contain coastal cutthroat trout (Oncorhynchus clarkii clarkii) lengths and weights collected in Mack Creek, Andrews Forest LTER. Original data can be found on the EDI Data Portal. Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\nImage Source: Joseph R. Tomelleri, as found on the Western Native Trout Initiative"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#import-packages-global",
    "href": "course-materials/slides/part2.2A.html#import-packages-global",
    "title": "EDS 430",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\n\nIn addition to the {lterdatasampler} package, we’ll also be using the {tidyverse} for data wrangling/visualization, and the {shinyWidgets} package to add a pickerInput and a checkboxGroupInput to our app.\n\n\nImport those three packages at the top of your global.R file\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler) \nlibrary(tidyverse)\nlibrary(shinyWidgets)"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#wrangle-data-global",
    "href": "course-materials/slides/part2.2A.html#wrangle-data-global",
    "title": "EDS 430",
    "section": "",
    "text": "Add packages & wrangle data in global.R\n\n\nWe can also do the bulk of our data wrangling here, rather than in the server. If we were reading in a data file (e.g. .csv), we would do that here too. Our new data object clean_trout, will now be available for us to call directly in our server (NOTE: we can easily copy our wrangling code over from our practice script).\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(tidyverse)\nlibrary(shinyWidgets) \n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == \"Cutthroat trout\") |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#trout-pickerInput",
    "href": "course-materials/slides/part2.2A.html#trout-pickerInput",
    "title": "EDS 430",
    "section": "",
    "text": "Add a pickerInput for selecting channel_type to your UI\n\n\nThe channel_type variable (originally called unittype – we updated the name when wrangling data (see line 9 on previous slide)) represents the type of water body (cascade, riffle, isolated pool, pool, rapid, step (small falls), or side channel) data were collected in. We’ll start by building a shinyWidgets::pickerInput() to allow users to filter data based on channel_type.\n\n\n\nReminder: When we we designed our UI layout, we added a sidebarPanel to our Trout tab with the placeholder text \"trout plot input(s) go here\". Replace that text with the code for your pickerInput:\n\n\n\n\nui.R\n\n# channel type pickerInput ----\npickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n            choices = unique(clean_trout$channel_type), # alternatively: choices = c(\"rapid\", \"cascade\" ...)\n            options = pickerOptions(actionsBox = TRUE), # creates \"Select All / Deselect All\" buttons\n            selected = c(\"cascade\", \"pool\"), \n            multiple = TRUE) # END channel type pickerInput\n\n\n\nSave and run your app – a functional pickerInput should now appear in your UI.\n\n\nA shinyWidgets::pickerInput() is functionally equivalent to shiny::selectInput(), though it allows for greater customization and looks (in my opinion) a bit nicer."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#trout-output",
    "href": "course-materials/slides/part2.2A.html#trout-output",
    "title": "EDS 430",
    "section": "",
    "text": "Add a plot output to your UI\n\n\nNext, we need to create a placeholder in our UI for our trout scatterplot to live. Because we’ll be creating a reactive plot, we can use the plotOutput() function to do so.\n\n\n\nReminder: When we we designed our UI layout, we added a mainPanel to our Trout tab with the placeholder text \"trout plot output goes here\". Replace that text with the code for your plotOuput():\n\n\n\n\nui.R\n\nplotOutput(outputId = \"trout_scatterplot\")\n\n\n\nSave and run your app – it won’t look different at first glance, but inspecting your app in a browser window (using Chrome, right click &gt; Inspect) will reveal a placeholder box for your plot output to eventually live:"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#trout-plot",
    "href": "course-materials/slides/part2.2A.html#trout-plot",
    "title": "EDS 430",
    "section": "",
    "text": "Tell the server how to assemble pickerInput values into your plotOutput\n\n\nRemember the three rules for building reactive outputs: (1) save objects you want to display to output$&lt;id&gt;, (2) build reactive objects using a render*() function, and (3) access input values with input$&lt;id&gt;:\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter trout data ----\n  trout_filtered_df &lt;- reactive({\n    \n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input))\n    \n  })\n  \n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n    \n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n    \n  }) \n  \n} # END server\n\n\n\n\n\n\nA couple notes/reminders:\n\n\n If needed, reference your practice script to remind yourself how you planned to filter and plot your data\n\n\n Reactive data frames need a set of parentheses, (), following the name of the df (see ggplot(trout_filtered_df() ...))\n\n\n For a cohesive appearance, save your ggplot theme parameters to a named object in global.R (here, myCustomTheme), then apply to all plots in your app. See the following slide for code."
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#ggplot-theme",
    "href": "course-materials/slides/part2.2A.html#ggplot-theme",
    "title": "EDS 430",
    "section": "",
    "text": "Save a custom ggplot theme to global.R\n\n\nRather than re-typing your ggplot theme parameters out for every plot in your app, do so once in global.R, and save to an object name. You can then easily add your custom theme as a layer to each of your ggplots. Bonus: If you decide to modify your plot theme, you only have to do so in one place!\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# DATA WRANGLING ----\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- theme_light() +\n  theme(axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#run-app2v1-first-widget",
    "href": "course-materials/slides/part2.2A.html#run-app2v1-first-widget",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app and try out your pickerInput widget!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#second-input-ui",
    "href": "course-materials/slides/part2.2A.html#second-input-ui",
    "title": "EDS 430",
    "section": "",
    "text": "Add a second input that will update the same output\n\n\nYou can have more than one input control the same output. Let’s now add a checkboxGroupButtons widget to our UI for selecting forest section (either clear cut forest or old growth forest). Check out the function documentation for more information on how to customize the appearance of your buttons.\n\n\nBe sure to add the widget to the same sidebarPanel as our pickerInput (and separate them with a comma!:\n\n\n\n\nui.R\n\n# trout plot sidebarPanel ----\nsidebarPanel(\n  \n  # channel type pickerInput ----\n  pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n              choices = unique(clean_trout$channel_type),\n              options = pickerOptions(actionsBox = TRUE),\n              selected = c(\"cascade\", \"pool\"),\n              multiple = TRUE), # END channel type pickerInput\n\n  # section checkboxGroupButtons ----\n  checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                       choices = c(\"clear cut forest\", \"old growth forest\"),\n                       selected = c(\"clear cut forest\", \"old growth forest\"),\n                       individual = FALSE, justified = TRUE, size = \"sm\",\n                       checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                   \n            ) # END trout plot sidebarPanel"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#second-input-server",
    "href": "course-materials/slides/part2.2A.html#second-input-server",
    "title": "EDS 430",
    "section": "",
    "text": "Update your reactive df to also filter based on the new checkboxGroupInput\n\n\nReturn to your server to modify trout_filtered_df – our data frame needs to be updated based on both the pickerInput, which selects for channel_type, and the checkboxGrouptInput, which selects for forest section:\n\n\n\n\nserver.R\n\n# filter trout data ----\ntrout_filtered_df &lt;- reactive({\n\n    clean_trout |&gt;\n      filter(channel_type %in% c(input$channel_type_input)) |&gt;\n      filter(section %in% c(input$section_input))\n      \n  })\n\n# trout scatterplot ----\noutput$trout_scatterplot &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n    geom_point(alpha = 0.7, size = 5) +\n    scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                  \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                  \"side channel\" = \"#94CBEC\")) +\n    scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                  \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                  \"side channel\" = 25)) +\n    labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n    myCustomTheme\n\n })"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#run-app2v1-second-widget",
    "href": "course-materials/slides/part2.2A.html#run-app2v1-second-widget",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app and try out your pickerInput & checkboxGrouptInput widgets!"
  },
  {
    "objectID": "course-materials/slides/part2.2A.html#break-section1",
    "href": "course-materials/slides/part2.2A.html#break-section1",
    "title": "EDS 430",
    "section": "",
    "text": "Take a break\n\n\nUp next: Adding in the penguins plot\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#deploying-apps",
    "href": "course-materials/slides/part2.3A.html#deploying-apps",
    "title": "EDS 430",
    "section": "",
    "text": "Deploying apps with shinyapps.io\n\n\nSharing your Shiny app with others isn’t so easy when it just lives on your computer (and your R session has to act as the server that powers it). We’ll now learn how to host your app using shinyapps.io, a free service for sharing your Shiny apps online."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#shinyapps-account",
    "href": "course-materials/slides/part2.3A.html#shinyapps-account",
    "title": "EDS 430",
    "section": "",
    "text": "Connect your shinyapps.io account to RStudio\n\n\nGo to shinyapps.io and login or create an account (if you don’t already have one) – I created my account and login with GitHub. To use shinyapps.io, you first need to link your account with RStudio on your computer. Follow the instructions on shinyapps.io when you first create your account to install the {rsconnect} package and authorize your account:"
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#deploy-app",
    "href": "course-materials/slides/part2.3A.html#deploy-app",
    "title": "EDS 430",
    "section": "",
    "text": "Deploy your app to shinyapps.io\n\n\nOnce your account has been authorized, run rsconnect::deployApp(\"&lt;app_directory_name&gt;\") in your console to deploy your app to shinyapps.io. Here, we’ll run rsconnect::deployApp(\"two-file-app\") to deploy the app we’ve been working on.\n\n\nOnce deployed, a browser will open to your application. The URL will take the form: https://username.shinyapps.io/your_app_directory_name. You should also now see an /rsconnect folder within your app’s directory – this is generated when an application bundle is successfully deployed and contains a DCF file with information on the deployed content (i.e. the name, title, server address, account, URL, and time). This /rsconnect folder should be added and committed into version control (i.e. push it to GitHub!) so that future re-deployments target the same endpoint (i.e. your app’s URL)."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#shinyapps-dashboard",
    "href": "course-materials/slides/part2.3A.html#shinyapps-dashboard",
    "title": "EDS 430",
    "section": "",
    "text": "The shinyapps.io dashboard\n\n\nYour shinyapps.io dashboard provides tons of information about your application metrics, instance (the virtualized server that your app is hosted on) and worker (a special type of R process that an Application Instance runs to service requests to an application) settings, plan management, and more. The free plan (the plan we’re using here today) allows you to deploy five Shiny apps. You are able to archive and/or delete once-deployed apps to make space for new ones.\n\n\n\nCheck out the shinyapps.io user guide for more information on hosting your apps on shinyapps.io."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#other-hosting-options",
    "href": "course-materials/slides/part2.3A.html#other-hosting-options",
    "title": "EDS 430",
    "section": "",
    "text": "Other ways to host your Shiny apps\n\n\nshinyapps.io is not the only Shiny app hosting service (though it’s the easiest to get started with and the only one we’ll be covering in detail in this workshop).\n\nPosit also offers the following:\n\n Shiny server is an open source server which you can deploy for free on your own hardware. It requires more setup and configuration, but can be used without a fee. The Bren and NCEAS servers are configured with Shiny Server for hosting for some in-house apps.\n\n\n Posit connect is a paid product that provides an advanced suite of services for hosting Shiny apps, Quarto and R Markdown reports, APIs, and more."
  },
  {
    "objectID": "course-materials/slides/part2.3A.html#hosting-recommendations",
    "href": "course-materials/slides/part2.3A.html#hosting-recommendations",
    "title": "EDS 430",
    "section": "",
    "text": "So how should I host my app?\n\n\nThe Bren compute team will work with groups to deploy and maintain apps on in-house servers for up to 6 months after capstone/GP presentations or until they break.\n\n\n\nIf you and/or your client wish to continue using your app after this time, we recommend one of the following two options:\n\n\n\n\n Preferred: Stick with the free tier of shinyapps.io, if you can! This is by far the most straightforward option that requires no server maintenance for you or your client. If your app exceeds the limitations set by the free tier (e.g. requires more active hours, needs more RAM or instances to support high traffic usage, etc.), you/your client have the option to upgrade to a paid tier – there are 5 paid plan types. Check out the shinyapps.io user guide for more information. Consider setting aside your allocated capstone/GP funds to help support a paid shinyapps.io plan.\n\n\n If you have a server-savvy client, they may want to deploy/host your app using their own infrastructure. If your client plans to pursue this option, but does not yet have a their own server configured to do so, we recommend directing them to the online instructions for getting started with Shiny Server. PLEASE NOTE that Bren staff (including the compute team) are unable to provide technical support for clients in server configuration and app deployment/maintenance.\n\n\n\n\nIMPORTANT: Hosting on a server means that shiny applications will be prone to breaking as updates to server software are made. It is important to have an application maintenance plan in place. This may mean identifying who is responsible for maintaining code, or even deciding to decommission applications and archive the code repository when appropriate."
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#improving-app2",
    "href": "course-materials/slides/part2.3B.html#improving-app2",
    "title": "EDS 430",
    "section": "",
    "text": "Improving user experience\n\n\nOur two-file-app is looking pretty good! It’s functional and deployed via shinyapps.io. Next, we’ll focus on making some minor tweaks that can help to improve usability"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#LO-app2v2",
    "href": "course-materials/slides/part2.3B.html#LO-app2v2",
    "title": "EDS 430",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app, updated)\n\n\nBy the end of this section, you should:\n\n\n\n understand how to provide users with helpful error messages using validate()\n\n\n\n\n know how to add customizable loading animations to alert users when reactive objects are re-rendering\n\n\n\n\n know how to add alternate (alt) text to rendered plots\n\n\n\n\n understand how to republish an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\nBox Open {shinycssloaders}: add loading animations to shiny outputs"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#roadmap-app2v2",
    "href": "course-materials/slides/part2.3B.html#roadmap-app2v2",
    "title": "EDS 430",
    "section": "",
    "text": "Roadmap for App #2v2\n\nWe’ll be refining our two-file app with a focus on creating a more user-friendly experience. When finished with v2, we’ll have added:\n\n\n\n\n(a) user-friendly validation error messages that appear when widgets are used to deselect all data\n(b) loading animations for both two reactive plots\n(c) alternate (alt) text for all data visualizations"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#no-guesswork",
    "href": "course-materials/slides/part2.3B.html#no-guesswork",
    "title": "EDS 430",
    "section": "",
    "text": "Take out any guesswork for your app’s users\n\nIt’s important to remove any possible points of confusion for successfully using your app.\n\nIn version 1 of our published app, you’ll notice that users are able to (1) Deselect All data using the pickerInputs for both the trout and penguin plots, and (2) “uncheck” both clear cut forest and old growth forest sampling section buttons using the checkboxGroupInput. When any of these actions are taken by the user, all data are removed from the plot, leaving a completely blank box behind.\n\n\n \nWhile this response is expected (and normal), we can generate a user-friendly validation error message to provide clear guidance to our users on what is expected by the app in order to display data."
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#using-validate",
    "href": "course-materials/slides/part2.3B.html#using-validate",
    "title": "EDS 430",
    "section": "",
    "text": "Writing validation tests\n\n\nvalidate() tests a condition and returns an error if that conditions fails. It’s used in conjunction with need(), which takes an expression that returns TRUE or FALSE, along with a character string to return if the condition is FALSE.\n\n\nPlace your validation test(s) at the start of any reactive() or render*() expression that calls input$data. For example, we can add two validation tests inside the reactive that generates our trout_filtered_df – we’ll need two separate validation tests, one for each of our inputs where users can deselect all data.\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\"),\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n}"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#exercise4-prompt-tips",
    "href": "course-materials/slides/part2.3B.html#exercise4-prompt-tips",
    "title": "EDS 430",
    "section": "",
    "text": "&  Exercise 4: Add a validation test for your penguin histogram\n\n\nTo Do:\n Construct a validation test that displays a clear but succinct message when a user deselects all islands using the pickerWidget\n\nTips:\n Despite having two inputs, we only need one validation test for our Penguins plot. Why is this?\n \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#exercise4-solution",
    "href": "course-materials/slides/part2.3B.html#exercise4-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 4: A solution\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\")\n    )\n\n    validate(\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    validate(\n      need(length(input$penguin_island) &gt; 0, \"Please select at least one island to visualize data for.\")\n    )\n\n    penguins %&gt;%\n      filter(island %in% input$penguin_island)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#loading-animations",
    "href": "course-materials/slides/part2.3B.html#loading-animations",
    "title": "EDS 430",
    "section": "",
    "text": "Add loading animations to re-rendering outputs\n\n\nThe {shinycssloaders} package makes it easy to add visual indicators to outputs as they’re loading or re-rendering. This can be particularly helpful if you have outputs that take a few seconds to render – it alerts users that their updated inputs were recognized and that the app is working to re-render outputs.\n\n\nCheck out the demo app to start designing your own “spinner” (choose style, color, size).\n\n\nWe can pipe the withSpinner() function directly into our plotOutputs in ui.R (be sure to load the package in global.R first) – here, we define the spinner color and style (there are 8 different spinner types to choose from) and adjust the size of the penguin plot spinner.\n\n\n\n\n\n\n\nui.R\n\nplotOutput(outputId = \"trout_scatterplot\") |&gt; \n  withSpinner(color = \"#006792\", type = 1)\n\nplotOutput(outputId = \"flipperLength_histogram\") |&gt; \n  withSpinner(color = \"#4BA4A4\", type = 4, size = 2)"
  },
  {
    "objectID": "course-materials/slides/part2.3B.html#include-alt-text",
    "href": "course-materials/slides/part2.3B.html#include-alt-text",
    "title": "EDS 430",
    "section": "",
    "text": "Include alt text for all data visualizations\n\n\nAlt text are written descriptions added to images, and importantly, to data visualizations, to help more users understand the content. Assistive technologies (e.g. screen readers) read alt text out loud for users to hear. When alt text is successfully added, the alt tag (along with your text) should appear in the HTML (right click on your app’s data viz to Inspect and ensure that it was added).\n\n\n\n  \n\nWe’ll talk a bit more about alt text later on, but for now we can add alt text easily to our data visuzliations using the alt argument. Place this outside of the {} but inside the () of renderPlot{()}. For example, we can add alt text to our trout and penguin plots in server.R:\n\n\n\n\n\nserver.R\n\n# render trout scatterplot ----\noutput$trout_scatterplot &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n },\n  \n  alt = \"A scatterplot of the relationship between cutthroat trout lengths (mm) (x-axis) and weights (g) (y-axis), with data points colored and shaped based on the water channel type from which they were collected. Trout tend to be longer, but weight less in waterways within the old growth forest. Trout tend to be shorter, but weight more in waterways within the clear cut forest.\"\n  \n) # END render trout scatterplot\n\n\n# render flipperLength hisogram ----\noutput$flipperLength_histogram &lt;- renderPlot({\n\n  ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n    geom_histogram(alpha = 0.6, bins = input$bin_num) +\n    scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n    labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n         fill = \"Penguin species\") +\n    myCustomTheme\n    \n },\n  \n  alt = \"A histogram of penguin flipper lengths (mm), with data colored by penguin species. Flipper lengths tend to be smallest on Adélie penguins and largest on Gentoo penguins.\"\n  \n) # END render flipperLength histogram"
  },
  {
    "objectID": "course-materials/part3-building-shiny-dashboards.html",
    "href": "course-materials/part3-building-shiny-dashboards.html",
    "title": "Building Shiny dashboards",
    "section": "",
    "text": "ADD IMAGE HERE"
  },
  {
    "objectID": "course-materials/part3-building-shiny-dashboards.html#required-packages",
    "href": "course-materials/part3-building-shiny-dashboards.html#required-packages",
    "title": "Building Shiny dashboards",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be loading the following R packages:\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(shinycssloaders)\nlibrary(leaflet)\nlibrary(markdown)"
  },
  {
    "objectID": "course-materials/part3-building-shiny-dashboards.html#required-data",
    "href": "course-materials/part3-building-shiny-dashboards.html#required-data",
    "title": "Building Shiny dashboards",
    "section": "Required Data",
    "text": "Required Data\nWe’ll be using publicly-available data via the Arctic Data Center for our shiny dashboard.\n\n\n\n\n\n\nData citation\n\n\n\nChristopher Arp, Matthew Whitman, Katie Drew, and Allen Bondurant. 2022. Water depth, surface elevation, and water temperature of lakes in the Fish Creek Watershed in northern Alaska, USA, 2011-2022. Arctic Data Center. doi:10.18739/A2JH3D41P.\n\n\nTake a few moments to review the metadata record and download FCWO_lakemonitoringdata_2011_2022_daily.csv."
  },
  {
    "objectID": "course-materials/part3-building-shiny-dashboards.html#lecture-materials",
    "href": "course-materials/part3-building-shiny-dashboards.html#lecture-materials",
    "title": "Building Shiny dashboards",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 3 is contained in one lesson:\n\nShiny dashboard\n lecture 3 slides"
  },
  {
    "objectID": "course-materials/part4-styling-apps.html",
    "href": "course-materials/part4-styling-apps.html",
    "title": "Styling apps",
    "section": "",
    "text": "ADD IMAGE HERE"
  },
  {
    "objectID": "course-materials/part4-styling-apps.html#required-data",
    "href": "course-materials/part4-styling-apps.html#required-data",
    "title": "Styling apps",
    "section": "Required Data",
    "text": "Required Data"
  },
  {
    "objectID": "course-materials/part4-styling-apps.html#lecture-materials",
    "href": "course-materials/part4-styling-apps.html#lecture-materials",
    "title": "Styling apps",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 4 is broken down into three lessons:\n\n\n\n\ntbd\n lecture 2.1 slides\n\n\n\n\ntbd\n lecture 2.2 slides\n\n\n\n\ntbd\n lecture 2.3 slides"
  },
  {
    "objectID": "course-materials/part5-improving-ux-ui.html",
    "href": "course-materials/part5-improving-ux-ui.html",
    "title": "Improving your app’s UX / UI",
    "section": "",
    "text": "ADD IMAGE HERE"
  },
  {
    "objectID": "course-materials/part5-improving-ux-ui.html#required-data",
    "href": "course-materials/part5-improving-ux-ui.html#required-data",
    "title": "Improving your app’s UX / UI",
    "section": "Required Data",
    "text": "Required Data"
  },
  {
    "objectID": "course-materials/part5-improving-ux-ui.html#lecture-materials",
    "href": "course-materials/part5-improving-ux-ui.html#lecture-materials",
    "title": "Improving your app’s UX / UI",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 5 is broken down into three lessons:\n\n\n\n\ntbd\n lecture 2.1 slides\n\n\n\n\ntbd\n lecture 2.2 slides\n\n\n\n\ntbd\n lecture 2.3 slides"
  },
  {
    "objectID": "course-materials/part2-building-shiny-apps.html",
    "href": "course-materials/part2-building-shiny-apps.html",
    "title": "Building Shiny apps",
    "section": "",
    "text": "ADD IMAGE HERE"
  },
  {
    "objectID": "course-materials/part2-building-shiny-apps.html#required-data",
    "href": "course-materials/part2-building-shiny-apps.html#required-data",
    "title": "Building Shiny apps",
    "section": "Required Data",
    "text": "Required Data\n\nlibrary(palmerpenguins)\nlibrary(lterdatasampler)"
  },
  {
    "objectID": "course-materials/part2-building-shiny-apps.html#lecture-materials",
    "href": "course-materials/part2-building-shiny-apps.html#lecture-materials",
    "title": "Building Shiny apps",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 2 is broken down into three lessons:\n\n\n\n\nSingle-file app\n lecture 2.1 slides\n\n\n\n\nTwo-file app\n lecture 2.2 slides\n\n\n\n\nDeploying & Improving UX\n lecture 2.3 slides"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Intro to Shiny - Building reactive apps and dashboards",
    "section": "Course Description",
    "text": "Course Description\nThis website houses materials which accompany the 1-unit, 2-day, hands-on coding workshop, EDS 430 - Intro to Shiny, offered through the Bren School of Environmental Science & Management, in partnership with the National Center for Ecological Analysis & Synthesis.\nIn this workshop, students will learn how to build and deploy Shiny applications. The {shiny} package provides a framework that allows R users to build interactive web applications and dashboards, and has become a popular tool for sharing data analyses and data-derived outputs with broad audiences. In this two-part short course, students will learn the fundamentals of reactivity, how to customize an application user interface (UI), best practices and workflows for developing shiny apps, and how to deploy their apps online via RStudio’s hosting service, shinyapps.io."
  },
  {
    "objectID": "index.html#teaching-team",
    "href": "index.html#teaching-team",
    "title": "Intro to Shiny - Building reactive apps and dashboards",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\n\nInstructor\n\n\n\n\n\n\n\n\n\n\n\nSam Csik\nEmail: scsik@ucsb.edu\nLearn more: samanthacsik.github.io"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Intro to Shiny - Building reactive apps and dashboards",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nBuilding this short course would not have been possible without the incredibly talented members of the R / Shiny / data science community who so willingly share tutorials, examples, and code for others (like myself!) to learn from. Attribution will be included on any slides / materials where content is adapted from other educators."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "course-materials/part1-intro.html#required-packages",
    "href": "course-materials/part1-intro.html#required-packages",
    "title": "Setup & Intro",
    "section": "Required Packages",
    "text": "Required Packages\nWe’ll be loading the following R packages:\n\nlibrary(shiny)"
  },
  {
    "objectID": "course-materials/part1-intro.html#required-data",
    "href": "course-materials/part1-intro.html#required-data",
    "title": "Setup & Intro",
    "section": "Required Data",
    "text": "Required Data\nNo data downloads required for this section"
  },
  {
    "objectID": "course-materials/part1-intro.html#lecture-materials",
    "href": "course-materials/part1-intro.html#lecture-materials",
    "title": "Setup & Intro",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 1 is broken down into two lessons:\n\n\n\nWhat is Shiny?\n lecture 1.1 slides\n\n\n\n\nSetting up your app\n lecture 1.2 slides"
  },
  {
    "objectID": "course-materials/part6-debugging-testing.html",
    "href": "course-materials/part6-debugging-testing.html",
    "title": "Debugging & testing",
    "section": "",
    "text": "ADD IMAGE HERE"
  },
  {
    "objectID": "course-materials/part6-debugging-testing.html#required-data",
    "href": "course-materials/part6-debugging-testing.html#required-data",
    "title": "Debugging & testing",
    "section": "Required Data",
    "text": "Required Data"
  },
  {
    "objectID": "course-materials/part6-debugging-testing.html#lecture-materials",
    "href": "course-materials/part6-debugging-testing.html#lecture-materials",
    "title": "Debugging & testing",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 6 is broken down into three lessons:\n\n\n\n\ntbd\n lecture 2.1 slides\n\n\n\n\ntbd\n lecture 2.2 slides\n\n\n\n\ntbd\n lecture 2.3 slides"
  },
  {
    "objectID": "course-materials/part7-streamlining-code.html",
    "href": "course-materials/part7-streamlining-code.html",
    "title": "Streamlining code",
    "section": "",
    "text": "ADD IMAGE HERE"
  },
  {
    "objectID": "course-materials/part7-streamlining-code.html#required-data",
    "href": "course-materials/part7-streamlining-code.html#required-data",
    "title": "Streamlining code",
    "section": "Required Data",
    "text": "Required Data"
  },
  {
    "objectID": "course-materials/part7-streamlining-code.html#lecture-materials",
    "href": "course-materials/part7-streamlining-code.html#lecture-materials",
    "title": "Streamlining code",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nPart 7 is broken down into three lessons:\n\n\n\n\ntbd\n lecture 2.1 slides\n\n\n\n\ntbd\n lecture 2.2 slides\n\n\n\n\ntbd\n lecture 2.3 slides"
  },
  {
    "objectID": "course-materials/slides/part2.3C.html#redeploying-apps",
    "href": "course-materials/slides/part2.3C.html#redeploying-apps",
    "title": "EDS 430",
    "section": "",
    "text": "Redeploying apps with shinyapps.io\n\n\nNow that we’ve added some updates to our app, it’s time to redeploy our newest version."
  },
  {
    "objectID": "course-materials/slides/part2.3C.html#howto-redeploy",
    "href": "course-materials/slides/part2.3C.html#howto-redeploy",
    "title": "EDS 430",
    "section": "",
    "text": "Redeploying is similar to deploying for the first time\n\n\nJust a few quick steps before your updates are live at your URL from earlier:\n\n\n1. double check to make sure any required packages are being imported in global.R\n\n\n2. Rerun rsconnect::deployApp(\"&lt;app-directory-nam\")&gt; in your console and type Y when you see the prompt Update application currently deployed at https://githubUserName.shinyapps.io/yourAppName? [Y/n]\n\n\n3. Give it a minute (or few) to deploy. Your deployed app will open in a browser window once processed\n\n\n4. Push all your files (including the /rsconnect directory) to GitHub\n\n\n\n\nCheck out my deployed app at https://samanthacsik.shinyapps.io/two-file-app/"
  },
  {
    "objectID": "course-materials/slides/part2.3C.html#end-section",
    "href": "course-materials/slides/part2.3C.html#end-section",
    "title": "EDS 430",
    "section": "",
    "text": "End part 2.3\n\n\nUp next: building shiny dashboards\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#title-slide",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#title-slide",
    "title": "EDS 430",
    "section": "",
    "text": "EDS 430: Part 3.1\nBuilding Shiny dashboards\n\nWeek 1 | January 26th, 2024"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#building-dashboards",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#building-dashboards",
    "title": "EDS 430",
    "section": "",
    "text": "Building dashboards with {shinydashboard}\n\n\nShiny alone is powerful and flexible, however it can take a lot of work to create a sleek/modern UI. {shinydashboard} provides a “template” for quickly building visually appealing dashboard apps."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#LO-app3",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#LO-app3",
    "title": "EDS 430",
    "section": "",
    "text": "Learning Objectives - App #3 (shinydashboard)\n\n\nAfter this section, you should:\n\n\n\n understand the general workflow for pre-processing, saving & reading data into an app\n\n\n\n\n be comfortable building out a dashboard UI using {shinydashboard} layout functions\n\n\n\n\n understand how to add static images to your app\n\n\n\n\n feel comfortable creating a basic reactive leaflet map\n\n\n\n\nPackages introduced:\n\n\n\n\n {shinydashboard}: provides an alternative UI framework for easily building dashboard-style shiny applications\n\n\n\n\n {leaflet}: for building interactive maps"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#roadmap-dashboard",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#roadmap-dashboard",
    "title": "EDS 430",
    "section": "",
    "text": "Roadmap for App #3\n\n\nIn this section, we’ll be building a shinydashboard using data downloaded from the Arctic Data Center. We’ll be building out the following features:\n\n\n\n\n\n\n(a) a dashboardHeader with the name of your app\n\n\n(b) a dashboardSidebar with two menuItems\n\n\n(c) a landing page with background information about your app\n\n\n(d) an interactive and reactive leaflet map"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#what-is-a-dashboard",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#what-is-a-dashboard",
    "title": "EDS 430",
    "section": "",
    "text": "But first, what do we mean by a shiny “dashboard”?\n\n\nshinydashboard is just an alternative framework for building shiny apps. In other words, shiny dashboards are just shiny apps, but with some different UI elements that make building apps with a classic “dashboard” feel to them a little bit easier."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#dashboardPage",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#dashboardPage",
    "title": "EDS 430",
    "section": "",
    "text": "The most basic shinydashboard is made up of a header, a sidebar, and a body\n\n\nThe main difference between a shiny app and a shinydashboard are the UI elements. Rather than a fluidPage() (as used in our previous shiny apps), we’ll create a dashboardPage(), which expects three main parts: a header, a sidebar, and a body. Below is the most minimal possible UI for a {shinydashboard} page (you can run this code in an app.R file, if you wish).\n\n\n\n\n#..............................setup.............................\nlibrary(shiny)\nlibrary(shinydashboard)\n\n#...............................ui...............................\nui &lt;- dashboardPage(\n  \n  dashboardHeader(), \n  dashboardSidebar(), \n  dashboardBody() \n  \n) \n\n#.............................server.............................\nserver &lt;- function(input, output) {}\n\n#......................combine ui & server.......................\nshinyApp(ui, server)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#shinydashboard-examples",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#shinydashboard-examples",
    "title": "EDS 430",
    "section": "",
    "text": "Example shiny dashboards built by some familiar folks\n\nLive dashboards:\n\n Bren Student Data Explorer (source code), by MEDS 2022 alum, Halina Do-Linh, during her Bren Summer Fellowship (and continued by future MEDS students!) – explore Bren school student demographics and career outcomes\n\n\n Sam’s Strava Stats (source code), by yours truly, Sam Csik – a new and ongoing side project exploring my Strava hiking/biking/walking data\n\n\n Visualizing human impacts on at-risk marine biodiversity (source code, developed by MESM 2022 alum, Ian Brunjes & Dr. Casey O’Hara) – explore how human activities and climate change impact marine biodiversity worldwide\n\nDashboards which are no longer deployed:\n\n Channel Islands National Park’s Kelp Forest Monitoring Program (source code), by MEDS 2022 alum, Cullen Molitor – explore subtidal monitoring data collected from our closest National Park\n\n\n The Outdoor Equity App (source code), developed by MEDS 2022 alumni Halina Do-Linh & Clarissa Boyajian as part of their MEDS capstone project – analyze patterns in the access and demand of visitors at reservable overnight sites"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#setup-dashboard-directory",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#setup-dashboard-directory",
    "title": "EDS 430",
    "section": "",
    "text": "Setup your shiny dashboard\n\n\nFirst, create a subdirectory called /shinydashboard and add a ui.R, server.R, and global.R file.\n\n\nAdd the server function to server.R and the three main UI components (header, sidebar, and body) to our dashboard page – I typically recommend splitting the UI into separate pieces, then combining them into a dashboardPage the end of ui.R (as shown below) – this can help with organization as you app grows in complexity.\n\n\nWe’ll set our dashboard aside for now while we work on downloading and pre-processing our data, as well as practice creating our data visualization outside of our app.\n\n\nui.Rserver.Rglobal.R\n\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader()\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar()\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody()\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {}\n\n\n\n\n\n\n\nserver.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#begin-with-data",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#begin-with-data",
    "title": "EDS 430",
    "section": "",
    "text": "As always, let’s start with the data\n\n\nBuilding an app doesn’t make much sense if we don’t know what we’re going to put in it. So, just like the last two apps, we’ll start with some data wrangling and practice data visualization.\n\n\nUnlike our last two apps, however, we’ll be working with tabular data from the Arctic Data Center, which we’ll download, process, save, then finally, read into our application. This process will likely be more similar to what you’ll encounter when working on your own applications moving forward. Take a few minutes to review the metadata record for the following data set, and download FCWO_lakemonitoringdata_2011_2022_daily.csv:\n\n\n\n\n\n\nChristopher Arp, Matthew Whitman, Katie Drew, and Allen Bondurant. 2022. Water depth, surface elevation, and water temperature of lakes in the Fish Creek Watershed in northern Alaska, USA, 2011-2022. Arctic Data Center. doi:10.18739/A2JH3D41P."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#processing-storing-data",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#processing-storing-data",
    "title": "EDS 430",
    "section": "",
    "text": "Pre-processing data is critical\n\n\nWhere you choose to store the data used by your Shiny app will depend largely on the type and size of the file(s) and who “owns” those data. It is likely that you’ll be working with data stored in a database or on a server. This is outside the scope of this workshop, but I suggest reading Dean Attali’s article, Persistent data storage in Shiny apps to start. Because we are going to be working with a relatively small data set, we’ll be downloading and storing our data locally (i.e. on our machines and in our GitHub repo).\n\n\nRegardless of where you choose to store your data, you can help your application more quickly process inputs/outputs by providing it only as much data as needed to run. This means pre-processing your data.\n\n\n\n\n\nFCWO_lakemonitoringdata_2011_2022_daily.csv contains 8 attributes (variables) and 18,894 observations collected from a set of 11 lakes located in the Fish Creek Watershed in northern Alaska between 2011-2022. We’ll download and save the file to a raw_data/ folder in the root directory of our repository. We’ll then pre-process the data in a separate script(s) saved to scratch/ and save a cleaned/processed version of the data to our app’s directory, /shinydashboard/data/lake_data_processed.csv. Your repository structure should look similar to example on the right:"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#lake-data-goal",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#lake-data-goal",
    "title": "EDS 430",
    "section": "",
    "text": "The goal:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOur goal is to create a leaflet map with makers placed on each of the 11 unique lakes where data were collected. When clicked, a marker should reveal the lake name, elevation (in meters, above sea level), average depth of the lake (in meters), and average lake bed temperature (in degrees Celsius). To do so, we’ll need a data frame that looks like the example below:"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#process-lake-data",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#process-lake-data",
    "title": "EDS 430",
    "section": "",
    "text": "Process lake data & save new file\n\n\n\n\nscratch/data_processing_app3_shinydashboard.R\n\n#...............................................................................\n#                                                                              .\n#  For simplicity, I've removed all rows with missing values (i.e. `NaN`s      .\n#  in the `Depth` column & `NA`s in the `BedTemperature` column) before        .\n#  calculating averages. However, exploring and  thinking critically about     .\n#  missing data is an important part of data analysis, and in a real-life      .\n#  scenario, you should consider the most appropriate method for handling them .\n#                                                                              .\n#...............................................................................\n\n#....................SETUP & DATA PROCESSING.....................\n\n# load packages ----\nlibrary(tidyverse)\nlibrary(leaflet)\n\n# read in raw data ----\nlake_monitoring_data &lt;- read_csv(\"raw_data/FCWO_lakemonitoringdata_2011_2022_daily.csv\")\n\n# calculate avg depth & temp ----\navg_depth_temp &lt;- lake_monitoring_data |&gt; \n  select(Site, Depth, BedTemperature) |&gt; \n  filter(Depth != \"NaN\") |&gt;  # remove NaN (missing data) from Depth\n  drop_na(BedTemperature) |&gt; # remove NAs (missing data) from BedTemperature\n  group_by(Site) |&gt; \n  summarize(\n    AvgDepth = round(mean(Depth), 1),\n    AvgTemp = round(mean(BedTemperature), 1))\n\n# join avg depth & temp to original data (match rows based on 'Site') ---\nlake_monitoring_data &lt;- full_join(lake_monitoring_data, avg_depth_temp)\n\n# get unique lakes observations (with corresponding lat, lon, elev, avgDepth, avgTemp) for mapping ----\nunique_lakes &lt;- lake_monitoring_data |&gt; \n  select(Site, Latitude, Longitude, Elevation, AvgDepth, AvgTemp) |&gt; \n  distinct()\n\n# save processed data to your app's data directory ----\nwrite_csv(x = unique_lakes, file = \"shinydashboard/data/lake_data_processed.csv\")"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#file-types",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#file-types",
    "title": "EDS 430",
    "section": "",
    "text": "A note on file types\n\n\nOftentimes, you may choose to save your processed data frame as a .rds file (a data file format, native to R, which stores a single R object). .rds file are relatively small (and therefore take up little storage space), take less time to import/export, and preserve data types and classes (e.g. factors and dates), eliminating the need to redefine data types after loading the file. Bear in mind that this increased speed and space-saving may come at the cost of generality – you can’t open a .rds file outside of R or read it in with another programming language (e.g. Python).\n\n\nWhile we’ll be sticking to .csv files in this workshop, it’s worth experimenting with .rds when you begin working with your own (likely larger) data. You can read in (readRDS()) and write out to (saveRDS()) .rds files as easily as .csv files."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#draft-leaflet",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#draft-leaflet",
    "title": "EDS 430",
    "section": "",
    "text": "Draft leaflet map\n\n\nleaflet mapcode\n\n\n\nThere are lots of ways to customize leaflet maps. We’ll be keeping ours relatively simple, but check out the Leaflet for R documentation for more ways to get creative with your maps.\n\n\n\n\n\n\n\n\n\n\n\n\nscratch/practice_script_app3_shinydashboard.R\n\n#..............................SETUP.............................\n\n# load packages ----\nlibrary(tidyverse)\nlibrary(leaflet)\n\n# read in data ----\nunique_lakes &lt;- read_csv(\"shinydashboard/data/lake_data_processed.csv\")\n\n#..........................PRACTICE VIZ..........................\n\nleaflet() |&gt; \n  \n  # add tiles\n  addProviderTiles(\"Esri.WorldImagery\") |&gt; \n  \n  # set view over AK\n  setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt; \n  \n  # add mini map\n  addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt; \n  \n  # add markers\n  addMarkers(data = unique_lakes,\n             lng = unique_lakes$Longitude, lat = unique_lakes$Latitude,\n             popup = paste(\"Site Name:\", unique_lakes$Site, \"&lt;br&gt;\",\n                           \"Elevation:\", unique_lakes$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                           \"Avg Depth:\", unique_lakes$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                           \"Avg Lake Bed Temperature:\", unique_lakes$AvgTemp, \"deg Celsius\"))"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#filter-leaflet",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#filter-leaflet",
    "title": "EDS 430",
    "section": "",
    "text": "Practice filtering leaflet observations\n\n\nleaflet map (filtered)code\n\n\n\nWe’ll eventually build three sliderInputs to filter lake makers by Elevation, AvgDepth, and AvgTemp. Practice filtering here first (and be sure to update the data frame name in your leaflet code!):\n\n\n\n\n\n\n\n\n\n\n\n\nscratch/practice_script_app3_shinydashboard.R\n\n#..............................SETUP.............................\n\n# load packages ----\nlibrary(tidyverse)\nlibrary(leaflet)\n\n# read in data ----\nunique_lakes &lt;- read_csv(\"shinydashboard/data/lake_data_processed.csv\")\n\n#.......................PRACTICE FILTERING.......................\n\nfiltered_lakes &lt;- unique_lakes |&gt; \n  filter(Elevation &gt;= 8 & Elevation &lt;= 20) |&gt; \n  filter(AvgDepth &gt;= 2 & AvgDepth &lt;= 3) |&gt; \n  filter(AvgTemp &gt;= 4 & AvgTemp &lt;= 6)\n\n#..........................PRACTICE VIZ..........................\n\nleaflet() |&gt; \n  \n  # add tiles\n  addProviderTiles(\"Esri.WorldImagery\", # make note of using appropriate tiles\n                   options = providerTileOptions(maxNativeZoom = 19, maxZoom = 100)) |&gt; \n  \n  # add mini map\n  addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt; \n  \n  # set view over AK\n  setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt; \n  \n  # add markers\n  addMarkers(data =  filtered_lakes,\n             lng = filtered_lakes$Longitude, lat = filtered_lakes$Latitude,\n             popup = paste(\"Site Name:\", filtered_lakes$Site, \"&lt;br&gt;\",\n                           \"Elevation:\", filtered_lakes$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                           \"Avg Depth:\", filtered_lakes$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                           \"Avg Lake Bed Temperature:\", filtered_lakes$AvgTemp, \"deg Celsius\"))"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#sketch-ui",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#sketch-ui",
    "title": "EDS 430",
    "section": "",
    "text": "Sketch out our dashboard UI\n\n\nI want my dashboard to have two menu items: a welcome page with some background information, and a dashboard page with my reactive map. All elements will be placed inside boxes, the primary building blocks of shinydashboards (more on that soon)."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#title-menuItems",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#title-menuItems",
    "title": "EDS 430",
    "section": "",
    "text": "Add a title & menuItems\n\n\nFirst, add a title to dashboardHeader() and make more space using titleWidth, if necessary.\n\n\nNext, we’ll build our dashboardSidebar(). Add a sidebarMenu() that contains two menuItems. Be sure to provide each menuItem() with text as you’d like it to appear in your app (for me, that’s Welcome and Dashboard), and a tabName which will be used to place dashboardBody() content in the appropriate menuItem(). Optionally, you can provide an icon. By default, icon() uses icons from FontAwesome.\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody()\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#tabItems",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#tabItems",
    "title": "EDS 430",
    "section": "",
    "text": "Add tabItems to your dashboardBody\n\n\nNext, we’ll create tabItems in our dashboardBody – we’ll make a tabItem (singular) for each menuItem in our dashboardSidebar. In order to match a menuItem and a tabItem, ensure that they have matching a tabName (e.g. any content added to the dashboard tabItem will appear under the dashboard menuItem).\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n    \n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n            \n            \"background info here\"\n            \n    ), # END welcome tabItem\n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            \"dashboard content here\"\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#boxes",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#boxes",
    "title": "EDS 430",
    "section": "",
    "text": "Add boxes to contain UI content (part 1)\n\n\nBoxes are the primary building blocks of shinydashboards and can contain almost any Shiny UI element (e.g. text, inputs, outputs). Start by adding two side-by-side boxes to our dashboard tab inside a fluidRow(). Together, their widths will add up to 12 (the total width of a browser page). These boxes will eventually contain our sliderInputs and our leafletOutput.\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n    \n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n            \n            \"background info here\"\n            \n    ), # END welcome tabItem \n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            # fluidRow ----\n            fluidRow(\n              \n              # input box ----\n              box(width = 4,\n                  \n                  \"sliderInputs here\"\n                  \n              ), # END input box\n              \n              # leaflet box ----\n              box(width = 8, \n                  \n                  \"leafletOutput here\"\n                  \n              ) # END leaflet box\n              \n            ) # END fluidRow\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#columns",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#columns",
    "title": "EDS 430",
    "section": "",
    "text": "Add boxes to contain UI content (part 2)\n\n\nLastly, add boxes to our welcome tab We’ll use columns to place one box on the left-hand side of our page, and two stacked boxes on the right-hand side. Each column will take up half the page (Note: For column-based layouts, use NULL for the box width, as the width is set by the column that contains the box). We can create two fluidRows within the right-hand column to stack two boxes vertically.\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n    \n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n    \n  ) # END sidebarMenu\n  \n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n    \n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n            \n            # left-hand column ----\n            column(width = 6,\n                   \n                   # background info box ----\n                   box(width = NULL,\n                       \n                       \"background info here\"\n                       \n                   ), # END background info box\n                   \n            ), # END left-hand column\n            \n            # right-hand column ----\n            column(width = 6,\n                   \n                   # first fluidRow ----\n                   fluidRow(\n                     \n                     # data source box ----\n                     box(width = NULL,\n                         \n                         \"data citation here\"\n                         \n                     ) # END data source box\n                     \n                   ), # END first fluidRow\n                   \n                   # second fluiRow ----\n                   fluidRow(\n                     \n                     # disclaimer box ----\n                     box(width = NULL,\n                         \n                         \"disclaimer here\"\n                         \n                     ) # END disclaimer box\n                     \n                   ) # END second fluidRow\n                   \n            ) # END right-hand column\n            \n    ), # END welcome tabItem\n    \n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n            \n            # fluidRow ----\n            fluidRow(\n              \n              # input box ----\n              box(width = 4,\n                  \n                  \"sliderInputs here\"\n                  \n              ), # END input box\n              \n              # leaflet box ----\n              box(width = 8,\n                  \n                  \"leaflet output here\"\n                  \n              ) # END leaflet box\n              \n            ) # END fluidRow\n            \n    ) # END dashboard tabItem\n    \n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#import-data",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#import-data",
    "title": "EDS 430",
    "section": "",
    "text": "Read data into global.R & add necessary packages\n\n\nRemember to load your pre-processed data, which should live in the /data folder within your app’s directory.\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(shinycssloaders)\n\n# READ IN DATA ----\nlake_data &lt;- read_csv(\"data/lake_data_processed.csv\")"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#add-sliderInput-leafletMap",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#add-sliderInput-leafletMap",
    "title": "EDS 430",
    "section": "",
    "text": "Add a sliderInput & leafletOutput to the UI\n\n\nStart by adding just one sliderInput (for selecting a range of lake Elevations) to the left-hand box in the dashboard tab. Then, add a leafletOutput to create a placeholder space for our map, along with a Spinner animation (from the {shinycssloaders} package). While we’re here, we can also add titles to each box.\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # box ----\n                   box(width = NULL,\n                       \n                       \"background info here\"\n\n                   ) # END box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         \"data citation here\"\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluiRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n                         \n                         \"disclaimer here\"\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider_input\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#build-map-server",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#build-map-server",
    "title": "EDS 430",
    "section": "",
    "text": "Assemble inputs & outputs in server.R\n\n\nRemember to reference your practice data viz script and to follow our three steps for creating reactive outputs. And don’t forget to add () following each reactive data frame called in your leaflet map!\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter lake data ----\n  filtered_lakes &lt;- reactive ({\n    \n    lake_data |&gt;\n      filter(Elevation &gt;= input$elevation_slider_input[1] & Elevation &lt;= input$elevation_slider_input[2])\n    \n  })\n  \n  \n  \n  # build leaflet map ----\n  output$lake_map &lt;- renderLeaflet({\n    \n    leaflet() |&gt;\n      \n      # add tiles\n      addProviderTiles(\"Esri.WorldImagery\") |&gt;\n      \n      # set view over AK\n      setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt;\n      \n      # add mini map\n      addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt;\n      \n      # add markers\n      addMarkers(data =  filtered_lakes(),\n                 lng = filtered_lakes()$Longitude, lat = filtered_lakes()$Latitude,\n                 popup = paste(\"Site Name:\", filtered_lakes()$Site, \"&lt;br&gt;\",\n                               \"Elevation:\", filtered_lakes()$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                               \"Avg Depth:\", filtered_lakes()$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                               \"Avg Lake Bed Temperature:\", filtered_lakes()$AvgTemp, \"deg Celsius\"))\n    \n  })\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#working-elev-widget",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#working-elev-widget",
    "title": "EDS 430",
    "section": "",
    "text": "Run your app & test out your first widget\n\nIf all is good, you should see something similar to this:"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise5-prompt",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise5-prompt",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 5: Add two more sliderInputs to filter for AvgDepth & AvgTemp\n\n\nTo Do:\n\n Add two more sliderInputs, one for AvgDepth and one for AvgTemp beneath our first Elevation sliderInput in the UI\n Update our reactive data frame so that all three widgets filter the leaflet map\n     \n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise5-solution",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise5-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 5: A solution\n\n\nui.Rserver.R\n\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # box ----\n                   box(width = NULL,\n                       \n                       \"background info here\"\n\n                   ) # END box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         \"data citation here\"\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluiRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n                         \n                         \"disclaimer here\"\n                         \n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider_input\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider_input\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider_input\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter lake data ----\n  filtered_lakes &lt;- reactive ({\n    \n    lake_data |&gt;\n      filter(Elevation &gt;= input$elevation_slider_input[1] & Elevation &lt;= input$elevation_slider_input[2])  |&gt;\n      filter(AvgDepth &gt;= input$depth_slider_input[1] & AvgDepth &lt;= input$depth_slider_input[2]) |&gt;\n      filter(AvgTemp &gt;= input$temp_slider_input[1] & AvgTemp &lt;= input$temp_slider_input[2])\n    \n  })\n  \n  \n  \n  # build leaflet map ----\n  output$lake_map &lt;- renderLeaflet({\n    \n    leaflet() |&gt;\n      \n      # add tiles\n      addProviderTiles(\"Esri.WorldImagery\") |&gt;\n      \n      # set view over AK\n      setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt;\n      \n      # add mini map\n      addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt;\n      \n      # add markers\n      addMarkers(data =  filtered_lakes(),\n                 lng = filtered_lakes()$Longitude, lat = filtered_lakes()$Latitude,\n                 popup = paste(\"Site Name:\", filtered_lakes()$Site, \"&lt;br&gt;\",\n                               \"Elevation:\", filtered_lakes()$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                               \"Avg Depth:\", filtered_lakes()$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                               \"Avg Lake Bed Temperature:\", filtered_lakes()$AvgTemp, \"deg Celsius\"))\n    \n  })\n  \n}"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise6-prompt-tips",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise6-prompt-tips",
    "title": "EDS 430",
    "section": "",
    "text": "&  Exercise 6: Add titles & text to Welcome page boxes\n\nTo Do:\n\n Add titles to each box\n\n\n Create a /text folder within your app’s directory and add three markdown (.md) files. Write/format text for the background info (left), data citation (top-right), and disclaimer (bottom-right) boxes. Example text below:\n\n\nintro.mdcitation.mddisclaimer.md\n\n\n\n\n\ntext/intro.md\n\nThe [Fish Creek Watershed Observatory (FCWO)](http://www.fishcreekwatershed.org/) is a focal watershed within the [National Petroleum Reserve in Alaska (NPR-A)](https://www.blm.gov/programs/energy-and-minerals/oil-and-gas/about/alaska/NPR-A). Targeted lake and stream monitoring within the watershed provide site-specific data prior to and after the establishment of new petroleum development, as well as insight into dynamics related to climate change and variability. Eleven lakes of interest (Harry Potter, Hipbone, Iceshove, L9817, L9819, L9820, Little Alaska, Lower Snowman, M9925, Middle Snowman, and Serenity) are featured in this dashboard.\n\n\n\n\n\n\n\ntext/citation.md\n\nData presented in this dashboard were collected as part of the [Fish Creek Watershed Observatory](http://www.fishcreekwatershed.org/) are archived and publicly accessible on the NSF [Arctic Data Center](https://arcticdata.io/). **Citation:** \n\n*Christopher Arp, Matthew Whitman, Katie Drew, and Allen Bondurant. 2022. Water depth, surface elevation, and water temperature of lakes in the Fish Creek Watershed in northern Alaska, USA, 2011-2022. Arctic Data Center [doi:10.18739/A2JH3D41P](https://arcticdata.io/catalog/view/doi%3A10.18739%2FA2JH3D41P).*\n\n\n\n\n\n\n\ntext/disclaimer.md\n\nThis app is build for demonstration/teaching purposes only and is not paid for or endorsed by the Fish Creek Watershed Observatory or affiliates in any way. The data as presented here are not intended for publication nor scientific interpretation. \n\n\n\n\n\n\nTips:\n\n Titles can include icons! For example: title = tagList(icon(\"icon-name\"), strong(\"title text here\"))"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise6-solution",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#exercise6-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 6: A solution\n\n\nPress the right arrow key to advance through the newly added lines of code.\n\n\nui.Rglobal.R\n\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\")\n\n                   ) # END box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluiRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(shinycssloaders)\nlibrary(markdown)\n\n# READ IN DATA ----\nlake_data &lt;- read_csv(\"data/lake_data_processed.csv\")"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#add-image",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#add-image",
    "title": "EDS 430",
    "section": "",
    "text": "Add a static image\n\n\nAs a final touch, let’s add an image to the Welcome page, inside the left-hand box beneath our intro text. First, create a /www folder inside your app’s directory (refer back to this slide for a description of this special directory). Download the map of the Fish Creek Watershed from FCWO’s website here and save it to your /www directory.\n\n\nNext, use the img tag to add your image. Supply a file path, relative to your /www directory, using the src argument, and alt text using the alt argument.\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\"),\n                       tags$img(src = \"FishCreekWatershedSiteMap_2020.jpeg\", \n                           alt = \"A map of Northern Alaksa, showing Fish Creek Watershed located within the National Petroleum Reserve.\") \n\n                   ) # END box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluiRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#large-image",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#large-image",
    "title": "EDS 430",
    "section": "",
    "text": "Our image doesn’t look so great as-is…"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#adjust-image-size",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#adjust-image-size",
    "title": "EDS 430",
    "section": "",
    "text": "Use in-line CSS to adjust the image size\n\n\nWe can use in-line CSS to style our image element, as shown below (see style argument). It’s okay if you don’t fully understand what’s going on here for now – we’ll talk in greater detail about how CSS (and Sass) can be used to customize the appearance of your apps in just a bit.\n\n\nI’ve also added a caption below our image that links to the image source, and used in-line CSS to center my text within the box.\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\"),\n                       tags$img(src = \"FishCreekWatershedSiteMap_2020.jpeg\", \n                           alt = \"A map of Northern Alaksa, showing Fish Creek Watershed located within the National Petroleum Reserve.\",\n                       style = \"max-width: 100%;\"),\n                       tags$h6(tags$em(\"Map Source:\", tags$a(href = \"http://www.fishcreekwatershed.org/\", \"FCWO\")),\n                               style = \"text-align: center;\")\n\n                   ) # END box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluiRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#final-dashboard",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#final-dashboard",
    "title": "EDS 430",
    "section": "",
    "text": "Check out your finished dashboard!\n\n\n\nThere’s a ton more to learn about building shinydashboards. Check out the documentation to find instructions on adding components like infoBoxes and valueBoxes, building inputs in the sidebar, easy ways to update the color theme using skins, and more."
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#final-dashboard-code",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#final-dashboard-code",
    "title": "EDS 430",
    "section": "",
    "text": "Complete code for our dashboard thus far:\n\n\nui.Rserver.Rglobal.R\n\n\n\n\n\nui.R\n\n#........................dashboardHeader.........................\nheader &lt;- dashboardHeader(\n  \n  # add title ----\n  title = \"Fish Creek Watershed Lake Monitoring\",\n  titleWidth = 400\n  \n) # END dashboardHeader\n\n#........................dashboardSidebar........................\nsidebar &lt;- dashboardSidebar(\n  \n  # sidebarMenu ----\n  sidebarMenu(\n\n    menuItem(text = \"Welcome\", tabName = \"welcome\", icon = icon(\"star\")),\n    menuItem(text = \"Dashboard\", tabName = \"dashboard\", icon = icon(\"gauge\"))\n\n  ) # END sidebarMenu\n\n) # END dashboardSidebar\n\n#..........................dashboardBody.........................\nbody &lt;- dashboardBody(\n  \n  # ---- set theme using {fresh} ----\n  # fresh::use_theme(\"shinydashboard_fresh_theme.css\"),\n  \n  # tabItems ----\n  tabItems(\n\n    # welcome tabItem ----\n    tabItem(tabName = \"welcome\",\n\n            # left-hand column ----\n            column(width = 6,\n\n                   # box ----\n                   box(width = NULL,\n                       \n                       title = tagList(icon(\"water\"), strong(\"Monitoring Fish Creek Watershed\")),\n                       includeMarkdown(\"text/intro.md\"),\n                       tags$img(src = \"FishCreekWatershedSiteMap_2020.jpeg\", \n                           alt = \"A map of Northern Alaksa, showing Fish Creek Watershed located within the National Petroleum Reserve.\",\n                       style = \"max-width: 100%;\"),\n                       tags$h6(tags$em(\"Map Source:\", tags$a(href = \"http://www.fishcreekwatershed.org/\", \"FCWO\")),\n                               style = \"text-align: center;\")\n\n                   ) # END box\n\n            ), # END left-hand column\n\n            # right-hand column ----\n            column(width = 6,\n\n                   # first fluidRow ----\n                   fluidRow(\n\n                     # data source box ----\n                     box(width = NULL,\n                         \n                         title = tagList(icon(\"table\"), strong(\"Data Source\")),\n                         includeMarkdown(\"text/citation.md\")\n\n                     ) # END data source box\n\n                   ), # END first fluidRow\n\n                   # second fluiRow ----\n                   fluidRow(\n\n                     # disclaimer box ----\n                     box(width = NULL,\n\n                         title = tagList(icon(\"triangle-exclamation\"), strong(\"Disclaimer\")),\n                         includeMarkdown(\"text/disclaimer.md\")\n\n                     ) # END disclaimer box\n\n                   ) # END second fluidRow\n\n            ) # END right-hand column\n\n    ), # END welcome tabItem\n\n    # dashboard tabItem ----\n    tabItem(tabName = \"dashboard\",\n\n            # fluidRow ----\n            fluidRow(\n\n              # input box ----\n              box(width = 4,\n                  \n                  title = tags$strong(\"Adjust lake parameter ranges:\"),\n\n                  # sliderInputs ----\n                  sliderInput(inputId = \"elevation_slider_input\", label = \"Elevation (meters above SL):\",\n                              min = min(lake_data$Elevation), max = max(lake_data$Elevation),\n                              value = c(min(lake_data$Elevation), max(lake_data$Elevation))),\n\n                  sliderInput(inputId = \"depth_slider_input\", label = \"Average depth (meters):\",\n                              min = min(lake_data$AvgDepth), max = max(lake_data$AvgDepth),\n                              value = c(min(lake_data$AvgDepth), max(lake_data$AvgDepth))),\n\n                  sliderInput(inputId = \"temp_slider_input\", label = \"Average lake bed temperature (degrees C):\",\n                              min = min(lake_data$AvgTemp), max = max(lake_data$AvgTemp),\n                              value = c(min(lake_data$AvgTemp), max(lake_data$AvgTemp)))\n\n              ), # END input box\n\n              # leaflet box ----\n              box(width = 8,\n\n                  title = tags$strong(\"Monitored lakes within Fish Creek Watershed:\"),\n\n                  # leaflet output ----\n                  leafletOutput(outputId = \"lake_map\") |&gt; withSpinner(type = 1, color = \"#4287f5\")\n\n              ) # END leaflet box\n\n            ) # END fluidRow\n\n    ) # END dashboard tabItem\n\n  ) # END tabItems\n  \n) # END dashboardBody\n\n#..................combine all in dashboardPage..................\ndashboardPage(header, sidebar, body)\n\n\n\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter lake data ----\n  filtered_lakes &lt;- reactive ({\n    \n    lake_data |&gt;\n      filter(Elevation &gt;= input$elevation_slider_input[1] & Elevation &lt;= input$elevation_slider_input[2])  |&gt;\n      filter(AvgDepth &gt;= input$depth_slider_input[1] & AvgDepth &lt;= input$depth_slider_input[2]) |&gt;\n      filter(AvgTemp &gt;= input$temp_slider_input[1] & AvgTemp &lt;= input$temp_slider_input[2])\n    \n  })\n  \n  \n  \n  # build leaflet map ----\n  output$lake_map &lt;- renderLeaflet({\n    \n    leaflet() |&gt;\n      \n      # add tiles\n      addProviderTiles(\"Esri.WorldImagery\") |&gt;\n      \n      # set view over AK\n      setView(lng = -152.048442, lat = 70.249234, zoom = 6) |&gt;\n      \n      # add mini map\n      addMiniMap(toggleDisplay = TRUE, minimized = TRUE) |&gt;\n      \n      # add markers\n      addMarkers(data =  filtered_lakes(),\n                 lng = filtered_lakes()$Longitude, lat = filtered_lakes()$Latitude,\n                 popup = paste(\"Site Name:\", filtered_lakes()$Site, \"&lt;br&gt;\",\n                               \"Elevation:\", filtered_lakes()$Elevation, \"meters (above SL)\", \"&lt;br&gt;\",\n                               \"Avg Depth:\", filtered_lakes()$AvgDepth, \"meters\", \"&lt;br&gt;\",\n                               \"Avg Lake Bed Temperature:\", filtered_lakes()$AvgTemp, \"deg Celsius\"))\n    \n  })\n  \n}\n\n\n\n\n\n\n\nglobal.R\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(shinycssloaders)\nlibrary(leaflet)\nlibrary(markdown)\n\n# READ IN DATA ----\nlake_data &lt;- read_csv(\"data/lake_data_processed.csv\")"
  },
  {
    "objectID": "course-materials/slides/part3-shiny-dashboards-slides.html#end",
    "href": "course-materials/slides/part3-shiny-dashboards-slides.html#end",
    "title": "EDS 430",
    "section": "",
    "text": "End part 3/p&gt;\n\nUp next: styling apps\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#title-slide",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#title-slide",
    "title": "EDS 430",
    "section": "",
    "text": "EDS 430: Part 2.3\nDeploying apps + improving UX\n\nWeek 1 | January 26th, 2024"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploying-apps",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploying-apps",
    "title": "EDS 430",
    "section": "",
    "text": "Deploying apps with shinyapps.io\n\n\nSharing your Shiny app with others isn’t so easy when it just lives on your computer (and your R session has to act as the server that powers it). We’ll now learn how to host your app using shinyapps.io, a free service for sharing your Shiny apps online."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-account",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-account",
    "title": "EDS 430",
    "section": "",
    "text": "Connect your shinyapps.io account to RStudio\n\n\nGo to shinyapps.io and login or create an account (if you don’t already have one) – I created my account and login with GitHub. To use shinyapps.io, you first need to link your account with RStudio on your computer. Follow the instructions on shinyapps.io when you first create your account to install the {rsconnect} package and authorize your account:"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploy-app",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#deploy-app",
    "title": "EDS 430",
    "section": "",
    "text": "Deploy your app to shinyapps.io\n\n\nOnce your account has been authorized, run rsconnect::deployApp(\"&lt;app_directory_name&gt;\") in your console to deploy your app to shinyapps.io. Here, we’ll run rsconnect::deployApp(\"two-file-app\") to deploy the app we’ve been working on.\n\n\nOnce deployed, a browser will open to your application. The URL will take the form: https://username.shinyapps.io/your_app_directory_name. You should also now see an /rsconnect folder within your app’s directory – this is generated when an application bundle is successfully deployed and contains a DCF file with information on the deployed content (i.e. the name, title, server address, account, URL, and time). This /rsconnect folder should be added and committed into version control (i.e. push it to GitHub!) so that future re-deployments target the same endpoint (i.e. your app’s URL)."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-dashboard",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#shinyapps-dashboard",
    "title": "EDS 430",
    "section": "",
    "text": "The shinyapps.io dashboard\n\n\nYour shinyapps.io dashboard provides tons of information about your application metrics, instance (the virtualized server that your app is hosted on) and worker (a special type of R process that an Application Instance runs to service requests to an application) settings, plan management, and more. The free plan (the plan we’re using here today) allows you to deploy five Shiny apps. You are able to archive and/or delete once-deployed apps to make space for new ones.\n\n\n\nCheck out the shinyapps.io user guide for more information on hosting your apps on shinyapps.io."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#other-hosting-options",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#other-hosting-options",
    "title": "EDS 430",
    "section": "",
    "text": "Other ways to host your Shiny apps\n\n\nshinyapps.io is not the only Shiny app hosting service (though it’s the easiest to get started with and the only one we’ll be covering in detail in this workshop).\n\nPosit also offers the following:\n\n Shiny server is an open source server which you can deploy for free on your own hardware. It requires more setup and configuration, but can be used without a fee. The Bren and NCEAS servers are configured with Shiny Server for hosting for some in-house apps.\n\n\n Posit connect is a paid product that provides an advanced suite of services for hosting Shiny apps, Quarto and R Markdown reports, APIs, and more."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#hosting-recommendations",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#hosting-recommendations",
    "title": "EDS 430",
    "section": "",
    "text": "So how should I host my app?\n\n\nThe Bren compute team will work with groups to deploy and maintain apps on in-house servers for up to 6 months after capstone/GP presentations or until they break.\n\n\n\nIf you and/or your client wish to continue using your app after this time, we recommend one of the following two options:\n\n\n\n\n Preferred: Stick with the free tier of shinyapps.io, if you can! This is by far the most straightforward option that requires no server maintenance for you or your client. If your app exceeds the limitations set by the free tier (e.g. requires more active hours, needs more RAM or instances to support high traffic usage, etc.), you/your client have the option to upgrade to a paid tier – there are 5 paid plan types. Check out the shinyapps.io user guide for more information. Consider setting aside your allocated capstone/GP funds to help support a paid shinyapps.io plan.\n\n\n If you have a server-savvy client, they may want to deploy/host your app using their own infrastructure. If your client plans to pursue this option, but does not yet have a their own server configured to do so, we recommend directing them to the online instructions for getting started with Shiny Server. PLEASE NOTE that Bren staff (including the compute team) are unable to provide technical support for clients in server configuration and app deployment/maintenance.\n\n\n\n\nIMPORTANT: Hosting on a server means that shiny applications will be prone to breaking as updates to server software are made. It is important to have an application maintenance plan in place. This may mean identifying who is responsible for maintaining code, or even deciding to decommission applications and archive the code repository when appropriate."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#improving-app2",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#improving-app2",
    "title": "EDS 430",
    "section": "",
    "text": "Improving user experience\n\n\nOur two-file-app is looking pretty good! It’s functional and deployed via shinyapps.io. Next, we’ll focus on making some minor tweaks that can help to improve usability"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#LO-app2v2",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#LO-app2v2",
    "title": "EDS 430",
    "section": "",
    "text": "Learning Objectives - App #2 (two-file app, updated)\n\n\nBy the end of this section, you should:\n\n\n\n understand how to provide users with helpful error messages using validate()\n\n\n\n\n know how to add customizable loading animations to alert users when reactive objects are re-rendering\n\n\n\n\n know how to add alternate (alt) text to rendered plots\n\n\n\n\n understand how to republish an app using shinyapps.io\n\n\n\n\nPackages introduced:\n\n\n\n\nBox Open {shinycssloaders}: add loading animations to shiny outputs"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#roadmap-app2v2",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#roadmap-app2v2",
    "title": "EDS 430",
    "section": "",
    "text": "Roadmap for App #2v2\n\nWe’ll be refining our two-file app with a focus on creating a more user-friendly experience. When finished with v2, we’ll have added:\n\n\n\n\n(a) user-friendly validation error messages that appear when widgets are used to deselect all data\n(b) loading animations for both two reactive plots\n(c) alternate (alt) text for all data visualizations"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#no-guesswork",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#no-guesswork",
    "title": "EDS 430",
    "section": "",
    "text": "Take out any guesswork for your app’s users\n\nIt’s important to remove any possible points of confusion for successfully using your app.\n\nIn version 1 of our published app, you’ll notice that users are able to (1) Deselect All data using the pickerInputs for both the trout and penguin plots, and (2) “uncheck” both clear cut forest and old growth forest sampling section buttons using the checkboxGroupInput. When any of these actions are taken by the user, all data are removed from the plot, leaving a completely blank box behind.\n\n\n \nWhile this response is expected (and normal), we can generate a user-friendly validation error message to provide clear guidance to our users on what is expected by the app in order to display data."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#using-validate",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#using-validate",
    "title": "EDS 430",
    "section": "",
    "text": "Writing validation tests\n\n\nvalidate() tests a condition and returns an error if that conditions fails. It’s used in conjunction with need(), which takes an expression that returns TRUE or FALSE, along with a character string to return if the condition is FALSE.\n\n\nPlace your validation test(s) at the start of any reactive() or render*() expression that calls input$data. For example, we can add two validation tests inside the reactive that generates our trout_filtered_df – we’ll need two separate validation tests, one for each of our inputs where users can deselect all data.\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\"),\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n}"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-prompt-tips",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-prompt-tips",
    "title": "EDS 430",
    "section": "",
    "text": "&  Exercise 4: Add a validation test for your penguin histogram\n\n\nTo Do:\n Construct a validation test that displays a clear but succinct message when a user deselects all islands using the pickerWidget\n\nTips:\n Despite having two inputs, we only need one validation test for our Penguins plot. Why is this?\n \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-solution",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#exercise4-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 4: A solution\n\n\n\n\nserver.R\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n    validate(\n      need(length(input$channel_type_input) &gt; 0, \"Please select at least one channel type to visualize data for.\")\n    )\n\n    validate(\n      need(length(input$section_input) &gt; 0, \"Please select at least one section (clear cut forest or old growth forest) to visualize data for.\")\n    )\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    validate(\n      need(length(input$penguin_island) &gt; 0, \"Please select at least one island to visualize data for.\")\n    )\n\n    penguins %&gt;%\n      filter(island %in% input$penguin_island)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#loading-animations",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#loading-animations",
    "title": "EDS 430",
    "section": "",
    "text": "Add loading animations to re-rendering outputs\n\n\nThe {shinycssloaders} package makes it easy to add visual indicators to outputs as they’re loading or re-rendering. This can be particularly helpful if you have outputs that take a few seconds to render – it alerts users that their updated inputs were recognized and that the app is working to re-render outputs.\n\n\nCheck out the demo app to start designing your own “spinner” (choose style, color, size).\n\n\nWe can pipe the withSpinner() function directly into our plotOutputs in ui.R (be sure to load the package in global.R first) – here, we define the spinner color and style (there are 8 different spinner types to choose from) and adjust the size of the penguin plot spinner.\n\n\n\n\n\n\n\nui.R\n\nplotOutput(outputId = \"trout_scatterplot\") |&gt; \n  withSpinner(color = \"#006792\", type = 1)\n\nplotOutput(outputId = \"flipperLength_histogram\") |&gt; \n  withSpinner(color = \"#4BA4A4\", type = 4, size = 2)"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#include-alt-text",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#include-alt-text",
    "title": "EDS 430",
    "section": "",
    "text": "Include alt text for all data visualizations\n\n\nAlt text are written descriptions added to images, and importantly, to data visualizations, to help more users understand the content. Assistive technologies (e.g. screen readers) read alt text out loud for users to hear. When alt text is successfully added, the alt tag (along with your text) should appear in the HTML (right click on your app’s data viz to Inspect and ensure that it was added).\n\n\n\n  \n\nWe’ll talk a bit more about alt text later on, but for now we can add alt text easily to our data visuzliations using the alt argument. Place this outside of the {} but inside the () of renderPlot{()}. For example, we can add alt text to our trout and penguin plots in server.R:\n\n\n\n\n\nserver.R\n\n# render trout scatterplot ----\noutput$trout_scatterplot &lt;- renderPlot({\n\n  ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n },\n  \n  alt = \"A scatterplot of the relationship between cutthroat trout lengths (mm) (x-axis) and weights (g) (y-axis), with data points colored and shaped based on the water channel type from which they were collected. Trout tend to be longer, but weight less in waterways within the old growth forest. Trout tend to be shorter, but weight more in waterways within the clear cut forest.\"\n  \n) # END render trout scatterplot\n\n\n# render flipperLength hisogram ----\noutput$flipperLength_histogram &lt;- renderPlot({\n\n  ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n    geom_histogram(alpha = 0.6, bins = input$bin_num) +\n    scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n    labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n         fill = \"Penguin species\") +\n    myCustomTheme\n    \n },\n  \n  alt = \"A histogram of penguin flipper lengths (mm), with data colored by penguin species. Flipper lengths tend to be smallest on Adélie penguins and largest on Gentoo penguins.\"\n  \n) # END render flipperLength histogram"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#redeploying-apps",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#redeploying-apps",
    "title": "EDS 430",
    "section": "",
    "text": "Redeploying apps with shinyapps.io\n\n\nNow that we’ve added some updates to our app, it’s time to redeploy our newest version."
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#howto-redeploy",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#howto-redeploy",
    "title": "EDS 430",
    "section": "",
    "text": "Redeploying is similar to deploying for the first time\n\n\nJust a few quick steps before your updates are live at your URL from earlier:\n\n\n1. double check to make sure any required packages are being imported in global.R\n\n\n2. Rerun rsconnect::deployApp(\"&lt;app-directory-nam\")&gt; in your console and type Y when you see the prompt Update application currently deployed at https://githubUserName.shinyapps.io/yourAppName? [Y/n]\n\n\n3. Give it a minute (or few) to deploy. Your deployed app will open in a browser window once processed\n\n\n4. Push all your files (including the /rsconnect directory) to GitHub\n\n\n\n\nCheck out my deployed app at https://samanthacsik.shinyapps.io/two-file-app/"
  },
  {
    "objectID": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#end-section",
    "href": "course-materials/slides/part2.3-deploy-improve-ux-slides.html#end-section",
    "title": "EDS 430",
    "section": "",
    "text": "End part 2.3\n\n\nUp next: building shiny dashboards\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#second-penguins",
    "href": "course-materials/slides/part2.2B.html#second-penguins",
    "title": "EDS 430",
    "section": "",
    "text": "Add data viz: Next up, penguins\n\n\nWe’ll be using the penguins dataset from the {palmerpenguins} package to create our second reactive plot. These data contain penguin (genus Pygoscelis) body size measurements collected from three islands in the Palmer Archipelago, Antarctica, as part of the Palmer Station LTER. Original data can be found on the EDI Data Portal (Adélie data, Gentoo data, and Chinstrap data). Refer back to this slide to revisit our practice data wrangling & visualization script.\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#exercise3-prompt",
    "href": "course-materials/slides/part2.2B.html#exercise3-prompt",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 3: Add a reactive plot to the ‘Penguins’ tab\n\n\nWorking alone or in groups, add a reactive histogram of penguin flipper lengths (using the penguins data set from the {palmerpenguins} package) to the Penguins tab. Your plot should have the following features and look like the example below, when complete:\n\n\n\n\n data colored by penguin species\n\n\n a shinyWidgets::pickerInput that allows users to filter data based on island, and that includes buttons to Select All / Deselect All island options at once\n\n\n a shiny::sliderInput that allows users to change the number of histogram bins and that by default, displays a histogram with 25 bins\n\n\n the two widgets should be placed in the sidebarPanel and the reactive histogram should be placed in the mainPanel of the Penguins tab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for some tips on getting started!"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#exercise3-tips",
    "href": "course-materials/slides/part2.2B.html#exercise3-tips",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 3: Tips\n\n\nTips:\n\n\n Remember to load the palmerpenguins package at the top of global.R so that your app can find the data\n\n\n Add your widgets to the sidebarPanel and your plot output to the mainPanel of the Penguins tab – look for that placeholder text we added earlier to help place your new code in the correct spot within your UI!\n\n\n Try changing the histogram bin number in your practice code script first, before attempting to make it reactive\n\n\nAnd remember to follow the our three steps for building reactive outputs (1. add input to UI, 2. add output to UI, 3. tell server how to assemble inputs into outputs)!\n\n  \n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#exercise3-solution",
    "href": "course-materials/slides/part2.2B.html#exercise3-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 3: A solution\n\n\nglobal.Rui.Rserver.R\n\n\n\n# LOAD LIBRARIES ----\nlibrary(shiny)\nlibrary(lterdatasampler)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shinyWidgets)\n\n# DATA WRANGLING ----\n\n# trout data\nclean_trout &lt;- and_vertebrates |&gt;\n  filter(species == c(\"Cutthroat trout\")) |&gt;\n  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |&gt; \n  mutate(channel_type = case_when(\n    channel_type == \"C\" ~ \"cascade\",\n    channel_type == \"I\" ~ \"riffle\",\n    channel_type ==\"IP\" ~ \"isolated pool\",\n    channel_type ==\"P\" ~ \"pool\",\n    channel_type ==\"R\" ~ \"rapid\",\n    channel_type ==\"S\" ~ \"step (small falls)\",\n    channel_type ==\"SC\" ~ \"side channel\"\n  )) |&gt; \n  mutate(section = case_when(\n    section == \"CC\" ~ \"clear cut forest\",\n    section == \"OG\" ~ \"old growth forest\"\n  )) |&gt; \n  drop_na()\n\n# GGPLOT THEME ----\nmyCustomTheme &lt;- theme_light() +\n  theme(#text = element_text(family = \"mono\"), \n    axis.text = element_text(color = \"black\", size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 13),\n    legend.position = \"bottom\",\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.7))\n\n\n\n\nui &lt;- navbarPage(\n  \n  title = \"LTER Animal Data Explorer\",\n  \n  # (Page 1) intro tabPanel ----\n  tabPanel(title = \"About this App\",\n           \n  ), # END (Page 1) intro tabPanel\n  \n  # (Page 2) data viz tabPanel ----\n  tabPanel(title = \"Explore the Data\",\n           \n           # tabsetPanel to contain tabs for data viz ----\n           tabsetPanel(\n             \n             # trout tabPanel ----\n             tabPanel(title = \"Trout\",\n                      \n                      # trout plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # trout plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # channel type pickerInput ----\n                          pickerInput(inputId = \"channel_type_input\", label = \"Select channel type(s):\",\n                                      choices = unique(clean_trout$channel_type),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"cascade\", \"pool\"),\n                                      multiple = TRUE), # END channel type pickerInput\n                          \n                          # # section checkboxGroupInput ----\n                          checkboxGroupButtons(inputId = \"section_input\", label = \"Select a sampling section(s):\",\n                                               choices = c(\"clear cut forest\", \"old growth forest\"),\n                                               selected = c(\"clear cut forest\", \"old growth forest\"),\n                                               individual = FALSE, justified = TRUE, size = \"sm\",\n                                               checkIcon = list(yes = icon(\"ok\", lib = \"glyphicon\"), no = icon(\"remove\", lib = \"glyphicon\"))), # END section checkboxGroupInput\n                          \n                        ), # END trout plot sidebarPanel\n                        \n                        # trout plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"trout_scatterplot\")\n                          \n                        ) # END trout plot mainPanel\n                        \n                      ) # END trout plot sidebarLayout\n                      \n             ), # END trout tabPanel \n             \n             # penguin tabPanel ----\n             tabPanel(title = \"Penguins\",\n                      \n                      # penguin plot sidebarLayout ----\n                      sidebarLayout(\n                        \n                        # penguin plot sidebarPanel ----\n                        sidebarPanel(\n                          \n                          # island pickerInput ----\n                          pickerInput(inputId = \"penguin_island_input\", label = \"Select an island(s):\",\n                                      choices = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      options = pickerOptions(actionsBox = TRUE),\n                                      selected = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n                                      multiple = T), # END island pickerInput\n                          \n                          # bin number sliderInput ----\n                          sliderInput(inputId = \"bin_num_input\", label = \"Select number of bins:\",\n                                      value = 25, max = 100, min = 1), # END bin number sliderInput\n                          \n                        ), # END penguin plot sidebarPanel\n                        \n                        # penguin plot mainPanel ----\n                        mainPanel(\n                          \n                          plotOutput(outputId = \"flipperLength_histogram\") \n                          \n                        ) # END penguin plot mainPanel\n                        \n                      ) # END penguin plot sidebarLayout\n                      \n             ) # END penguin tabPanel\n             \n           ) # END tabsetPanel\n           \n  ) # END (Page 2) data viz tabPanel\n  \n) # END navbarPage\n\n\n\n\nserver &lt;- function(input, output) {\n  \n  # filter for channel types ----\n  trout_filtered_df &lt;- reactive({\n\n      clean_trout |&gt;\n        filter(channel_type %in% c(input$channel_type_input)) |&gt;\n        filter(section %in% c(input$section_input))\n        \n    })\n\n  # trout scatterplot ----\n  output$trout_scatterplot &lt;- renderPlot({\n\n    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +\n      geom_point(alpha = 0.7, size = 5) +\n      scale_color_manual(values = c(\"cascade\" = \"#2E2585\", \"riffle\" = \"#337538\", \"isolated pool\" = \"#DCCD7D\",\n                                    \"pool\" = \"#5DA899\", \"rapid\" = \"#C16A77\", \"step (small falls)\" = \"#9F4A96\",\n                                    \"side channel\" = \"#94CBEC\")) +\n      scale_shape_manual(values = c(\"cascade\" = 15, \"riffle\" = 17, \"isolated pool\" = 19,\n                                    \"pool\" = 18, \"rapid\" = 8, \"step (small falls)\" = 23,\n                                    \"side channel\" = 25)) +\n      labs(x = \"Trout Length (mm)\", y = \"Trout Weight (g)\", color = \"Channel Type\", shape = \"Channel Type\") +\n      myCustomTheme\n\n  })\n  \n  # filter for island ----\n  island_df &lt;- reactive({\n\n    penguins %&gt;%\n      filter(island %in% input$penguin_island)\n\n  })\n\n  # render the flipper length histogram ----\n  output$flipperLength_histogram &lt;- renderPlot({\n\n    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +\n      geom_histogram(alpha = 0.6, bins = input$bin_num_input) +\n      scale_fill_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      labs(x = \"Flipper length (mm)\", y = \"Frequency\",\n           fill = \"Penguin species\") +\n      myCustomTheme\n    \n  })\n  \n} # END server"
  },
  {
    "objectID": "course-materials/slides/part2.2B.html#break-section2",
    "href": "course-materials/slides/part2.2B.html#break-section2",
    "title": "EDS 430",
    "section": "",
    "text": "Take a break\n\n\nUp next: we’ll finish up by adding some intro text to the landing page\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#title-slide",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#title-slide",
    "title": "EDS 430",
    "section": "",
    "text": "EDS 430: Part 1.1\nWhat is Shiny?\n\nWeek 1 | January 26th, 2024"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#what-is-shiny",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#what-is-shiny",
    "title": "EDS 430",
    "section": "",
    "text": "What is Shiny?\n\n\nThink interactive web pages built by people who love to code in R (i.e. hopefully many of you!), no JavaScript experience necessary."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#easy-web-apps",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#easy-web-apps",
    "title": "EDS 430",
    "section": "",
    "text": "Shiny makes building web apps easy\n\n\n“Shiny is an R package that makes it easy to build interactive web apps straight from R. You can host standalone apps on a webpage or embed them in R Markdown documents or build dashboards. You can also extend your Shiny apps with CSS themes, htmlwidgets, and JavaScript actions.” - RStudio\n\n\n\n\nWorldbank-Shiny app to visualize fertility rate vs. life expectancy from 1960 to 2015, by Andre Duarte"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#app-anatomy",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#app-anatomy",
    "title": "EDS 430",
    "section": "",
    "text": "The anatomy of a Shiny app\n\n\nWhat does a Shiny app look like under the hood?"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#basic-anatomy",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#basic-anatomy",
    "title": "EDS 430",
    "section": "",
    "text": "The basic anatomy of a Shiny app\n\n\nShiny apps are composed in two parts: (1) a web page that displays the app to a user (i.e. the user interface, or UI for short), and (2) a computer that powers the app (i.e. the server)\n\n\n\nThe UI controls the layout and appearance of your app and is written in HTML (except we use functions from the {shiny} package to write that HTML). The server handles the logic of the app – in other words, it is a set of instructions that tells the webpage what to display when a user interacts with it."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#widgets",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#widgets",
    "title": "EDS 430",
    "section": "",
    "text": "Widgets are web elements that users can interact with via the UI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Widgets collect information from the user which is then used to update outputs created in the server.\n\n\n Shiny comes with a set of of standard widgets (see left), but you can also explore widget extensions using a variety of other packages (e.g. {shinyWidgets}, {DT}, {plotly})"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#reactivity-intro",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#reactivity-intro",
    "title": "EDS 430",
    "section": "",
    "text": "Reactivity: a brief intro\n\n\nReactivity is what makes Shiny apps responsive i.e. it lets the app instantly update itself whenever the user makes a change. At a very basic level, it looks something like this:\n\n\n\nCheck out Garrett Grolemund’s article, How to understand reactivity in R for a more detailed overview of Shiny reactivity."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#examples-please",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#examples-please",
    "title": "EDS 430",
    "section": "",
    "text": "Can I see an example please?\n\n\nI’m glad you asked! There are lots of great examples online, including those developed by Bren alumni, as well as built-in teaching examples."
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#shinyapp-examples",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#shinyapp-examples",
    "title": "EDS 430",
    "section": "",
    "text": "Example shiny apps (built by some familiar folks)\n\nLive apps:\n HydroTech Helper (video tutorial), by MEDS 2022 alumn, Daniel Kerstan, developed during his time as a USGS Hydrologic Technician – access real-time monitoring of USGS hydrology sites and equipment\n Marine Mammal Bycatch Impacts Exploration Tool (source code) by Dr. Megsie Siple and colleagues – compute population projections under different bycatch mortality levels\n Novel-gazing (source code) by Dr. Megsie Siple – a fun app for exploring your Goodreads data, inspired by community ecology\n\nApps which are no longer deployed:\n Moorea Coral Reef LTER Shiny Application (source code), by MEDS 2022 alumni, Allie Cole, Felicia Cruz, Jake Eisaguirre & Charles Henrickson as part of their MEDS capstone project – visualize spatial and temporal patterns of coral reef stressors surrounding Moorea, French Polynesia"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#built-in-examples",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#built-in-examples",
    "title": "EDS 430",
    "section": "",
    "text": "The Shiny packages comes with 11 built-in examples\n\n\n Check out the available Shiny app examples by running this code in your console:\n\n\nlibrary(shiny)\nrunExample(example = NA)\n\n\n\n Run the first example, which plots R’s built-in faithful data set with a configurable number of bins:\n\n\nrunExample(\"01_hello\")\n\n\nChange the number of bins using the sliderInput widget and watch the histogram re-render.\n\n\n\n\n These working examples also come paired with source code for you to see how the app is built. For example, the sliderInput is built with the following code:\n\n\n# Input: Slider for the number of bins ----\nsliderInput(inputId = \"bins\",\n            label = \"Number of bins:\",\n             min = 1,\n             max = 50,\n             value = 30)\n\n\n\n\n\nNow let’s build our own!"
  },
  {
    "objectID": "course-materials/slides/part1.1-shiny-overview-slides.html#end-section",
    "href": "course-materials/slides/part1.1-shiny-overview-slides.html#end-section",
    "title": "EDS 430",
    "section": "",
    "text": "End part 1.1\n\n\nUp next: building our own apps & dashboards\n\n\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#title-slide",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#title-slide",
    "title": "EDS 430",
    "section": "",
    "text": "EDS 430: Part 2.1\nBuilding a single-file app\n\nWeek 1 | January 26th, 2024"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#build-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#build-app1",
    "title": "EDS 430",
    "section": "",
    "text": "Building out your 1st app\n\n\nHere, we’ll create our first reactive objects and establish a general Shiny coding workflow."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#LO-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#LO-app1",
    "title": "EDS 430",
    "section": "",
    "text": "Learning Objectives - App #1 (single-file app)\n\n\nBy the end of building out this first app, you should be a bit more familiar with:\n\n\n\n writing a single-file (app.R) shiny app\n\n\n\n\n adding and styling text in the UI using tags\n\n\n\n\n practicing data wrangling and visualization outside of your shiny app\n\n\n\n\n following a general workflow for building reactive apps, which includes adding inputs and outputs to the UI, then writing the server instructions on how to assemble user input values into outputs\n\n\n\n\n running and quitting apps in RStudio\n\n\n\n\nPackages introduced:\n\n\n\n\n {shiny}: framework for building our reactive app + standard widgets\n\n\n\n\n {DT}: interactive datatable widgets (that can be made reactive using shiny!)\n\n\n\n\n {tidyverse}: collection of packages for wrangling & visualizing data\n\n\n\n\n {palmerpenguins}: data"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#roadmap-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#roadmap-app1",
    "title": "EDS 430",
    "section": "",
    "text": "Roadmap for App #1\n\n\nWe’ll start by building a small single-file app using data from the {palmerpenguins} package. We’ll build out the the following features:\n\n\n\n  \n\n(a) A title and subtitle\n\n\n(b) A slider widget for users to select a range of penguin body masses\n\n\n(c) A reactive scatterplot that updates based on user-supplied values"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-plain",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-plain",
    "title": "EDS 430",
    "section": "",
    "text": "Add text in the UI\n\nWe’ll do this in the UI within fluidPage(), a layout function that sets up the basic visual structure of the page and scales components in real time to fill all available browser width. Add a title and subtitle to your app (be sure to separate each with a comma, ,), save, and run:\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # app title ----\n  \"My App Title\",\n  \n  # app subtitle ----\n  \"Exploring Antarctic Penguin Data\"\n  \n  )"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-tags",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#adding-text-tags",
    "title": "EDS 430",
    "section": "",
    "text": "Add text in the UI\n\nRecall that the UI is actually just an HTML document. We can style our text by adding static HTML elements using tags – a list of functions that parallel common HTML tags (e.g. &lt;h1&gt; == tags$h1()) The most common tags also have wrapper functions (e.g. h1()).\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # app title ----\n  tags$h1(\"My App Title\"), # alternatively, you can use the `h1()` wrapper function\n  \n  # app subtitle ----\n  p(strong(\"Exploring Antarctic Penguin Data\")) # alternatively, `tags$p(tags$strong(\"text\"))`\n  \n  )"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#inputs-outputs",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#inputs-outputs",
    "title": "EDS 430",
    "section": "",
    "text": "What are inputs and outputs?\n\nNext, we will begin to add some inputs and outputs to our UI inside fluidPage() (anything that you put into fluidPage() will appear in our app’s user interface…and we want inputs and outputs to show up there!).\nInputs (or widgets) are the things that users can interact with (e.g. toggle, slide) and provide values to your app. The input functions below correspond to the widgets we saw in lecture 1.2?.\nOutputs are the R objects that your user sees (e.g. tables, plots) and are what respond when a user interacts with/changes an input value."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#input-output-fxns",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#input-output-fxns",
    "title": "EDS 430",
    "section": "",
    "text": "Examples of input & output functions\n\nThe shiny package comes with a number of input and output functions, but you can extend these with additional packages (e.g. shinyWidgets, plotly, DT, etc.; more on those later).\n\n\nExamples of Input Functions:\n actionButton()\n checkboxInput()\n checkboxGroupInput()\n dateInput()\n dateRangeInput()\n radioButtons()\n selectInput()\n sliderInput()\n textInput()\n See a full list of shiny input functions\n\n\n\nExamples of Output Functions:\n dataTableOutput() (inserts an interactive table)\n imageOutput() (inserts an image)\n plotOutput() (inserts a plot)\n tableOutput() (inserts a table)\n textOutput() (inserts text)\n See a full list of shiny output functions"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#reactive-plot-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#reactive-plot-app1",
    "title": "EDS 430",
    "section": "",
    "text": "Adding our reactive plot\n\n\nNext, we’ll create a scatterplot of penguin bill lengths vs. penguin flipper lengths using the penguins data set from the {palmerpengiuns} package. We will make this scatterplot reactive by adding a sliderInput that allows users to filter the displayed data points by selecting a range of penguin body masses (e.g. only plot bill and flipper lengths for penguins with body masses ranging from 4,500 grams to 6,000 grams).\n\n\n\n\n\nTo create a reactive plot, we will follow these steps:\n\n\n1. Add an input (e.g. sliderInput) to the UI that users can interact with\n\n\n2. Add an output (e.g. plotOutput) to the UI that creates a placeholder space to fill with our eventual reactive output\n\n\n3. Tell the server how to assemble inputs into outputs"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#input-syntax",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#input-syntax",
    "title": "EDS 430",
    "section": "",
    "text": "Input function syntax\n\n\n All input functions have the same first argument, inputId (NOTE: Id not ID), which is used to connect the front end of your app (the UI) with the back end (the server). For example, if your UI has an inputId = \"name\", the server function will access that input value using the syntax input$name. The inputId has two constraints: (1) it must be a simple string containing only letters, numbers, and underscores, (2) it must be unique within your app.\n\n\n Most input functions have a second parameter called label, which is used to create a human-readable label for the control, which will appear in the UI.\n\n\n The remaining arguments are unique to each input function. Oftentimes, these include a value parameter, which lets you set the default value of your widget, where applicable.\n\n\nA couple examples:\n\n\nsliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\", value = c(3000, 4000), ...)\n\nselectInput(inputId = \"island_input\", label = \"Choose and island:\", ...)\n\n\n\nCheck out the interactive Shiny Widgets Gallery to learn how to implement the most common widgets."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#add-input",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#add-input",
    "title": "EDS 430",
    "section": "",
    "text": "Step 1: Add an input to your app\n\n\nFirst let’s add a sliderInput() that will allow users to select a range of penguin body masses (g).\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider input ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000))\n  )\n\n\n\n\nWhen you run your app, you should see something similar to the image below. It’s operable, but does not yet have an associated output."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#output-syntax",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#output-syntax",
    "title": "EDS 430",
    "section": "",
    "text": "Output function syntax\n\n\nOutputs in the UI create placeholders which are later filled by the server function.\n\n\nSimilar to input functions, all output functions take the same first argument, outputId (again, note Id not ID), which connects the front end UI with the back end server. For example, if your UI contains an output function with an outputId = \"plot\", the server function will access it (or in other words, know to place the plot in that particular placeholder) using the syntax output$plot.\n\n\n\nA couple examples:\n\n\nplotOutput(outputId = \"bodyMass_scatterPlot\")\n\ndataTableOutput(outputId = \"penguin_data\")"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#add-output",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#add-output",
    "title": "EDS 430",
    "section": "",
    "text": "Step 2: Add an output to your app\n\n\nLet’s now add a plotOutput(), which will be updated based on the user inputs via the sliderInput(), then run the app.\n\n\n\n\n~/one-file-app/app.R\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider input ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot ouput ----\n  plotOutput(outputId = \"bodyMass_scatterPlot\")\n  \n  )"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#wheres-my-output",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#wheres-my-output",
    "title": "EDS 430",
    "section": "",
    "text": "Where’s my output??\n\nOkay, it looks like nothing changed?? Remember, *Output() functions create placeholders, but we have not yet written the server instructions on how to fill and update those placeholders. We can inspect the HTML and see that there is, in fact, a placeholder area awaiting our eventual output, which will be a plot named “bodyMass_scatterPlot”:"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rendering-outputs",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rendering-outputs",
    "title": "EDS 430",
    "section": "",
    "text": "Rendering outputs\n\n\nEach *Output() function in the UI is coupled with a render*() function in the server, which contains the “instructions” for creating the output based on user inputs (or in other words, the instructions for making your output reactive).\n\n\n\nExamples of *Output() functions and their corresponding render*() functions:\n\n\n\n\n\nOutput function\nRender function\n\n\n\n\ndataTableOutput()\nrenderDataTable()\n\n\nimageOutput()\nrenderImage()\n\n\nplotOutput()\nrenderPlot()\n\n\ntableOutput()\nrenderTable()\n\n\ntextOutput()\nrenderText()"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#assemble",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#assemble",
    "title": "EDS 430",
    "section": "",
    "text": "Step 3: Tell the server how to assemble inputs into outputs\n\n\nNow that we’ve designed our input/output in the UI, we need to write the server instructions (i.e. write the server function) on how to use the input value(s) (i.e. penguin body mass range via a slider input) to update the output (scatter plot).\n\n\nThe server function is defined with two arguments, input and output, both of which are list-like objects. You must define both of these arguments within the server function. input contains the values of all the different inputs at any given time, while output is where you’ll save output objects to display in the app.\n\nThis part can be intimidating, but if you follow these three rules, you will successfully create reactivity within your shiny app!\n\n\nRules:\n\n\n\n1. Save objects you want to display to output$&lt;id&gt;\n\n\n2. Build reactive objects using a render*() function\n\n\n3. Access input values with input$&lt;id&gt;"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule1",
    "title": "EDS 430",
    "section": "",
    "text": "Rule 1: Save objects you want to display to output$&lt;id&gt;\n\n\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterPlot\") \n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # render the scatter plot ----\n  output$bodyMass_scatterPlot &lt;- # code to generate plot here\n  \n}\n\n\n\n\n\n\n\nIn our UI, we created a placeholder for our plot using the plotOutput() function and gave it the Id \"bodyMass_scatterplot\". In our server, we will save our plot to the output argument by its outputId.\n\n\nNote: In the UI, our outputId is quoted (\"bodyMass_scatterPlot\"), but not in the server (bodyMass_scatterPlot)."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.1",
    "title": "EDS 430",
    "section": "",
    "text": "Rule 2: Build reactive objects with render*()\n\n\nUse the appropriate render*() function to make your output reactive (e.g. if you have a plotOutput in your UI, you will need to use renderPlot() in your server). Within your render*(), write any code inside a set of curly braces, {}. This allows you to include as many lines of code as it takes to build your object.\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterPlot\") \n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # render the scatter plot ----\n  output$bodyMass_scatterPlot &lt;- renderPlot({\n    \n     # code to generate plot here\n    \n  }) \n}"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.2",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.2",
    "title": "EDS 430",
    "section": "",
    "text": "An Aside: Draft objects in a separate script first\n\n\nI find it easier to experiment and draft my objects (e.g. plots) first in a separate script (outside by app directory), then copy the code over to the server after. I want to make a plot that looks like this:\n\n\nCodeOutput\n\n\n\n\n\n~/scratch/practice-script-app1-penguins.R\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(na.omit(penguins), \n       aes(x = flipper_length_mm, y = bill_length_mm, \n           color = species, shape = species)) +\n  geom_point() +\n  scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n  labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\", \n       color = \"Penguin species\", shape = \"Penguin species\") +\n  theme_minimal() +\n  theme(legend.position = c(0.85, 0.2),\n        legend.background = element_rect(color = \"white\"))"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.3",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule2.3",
    "title": "EDS 430",
    "section": "",
    "text": "Copy your plot code into the server\n\n\nCopy your code over to your app, placing it inside the {} (and make sure to add any additional required packages to the top of your app.R script). Run your app. What do you notice?\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterPlot\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # render the scatter plot ----\n  output$bodyMass_scatterPlot &lt;- renderPlot({ \n      ggplot(na.omit(penguins),\n             aes(x = flipper_length_mm, y = bill_length_mm,\n                 color = species, shape = species)) + \n        geom_point() + \n        scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n        scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n        labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\", \n             color = \"Penguin species\", shape = \"Penguin species\") + \n        theme_minimal() + \n        theme(legend.position = c(0.85, 0.2), \n              legend.background = element_rect(color = \"white\")) \n  })"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#non-reactive-plot",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#non-reactive-plot",
    "title": "EDS 430",
    "section": "",
    "text": "A non-reactive plot now lives in our plotOutput() placeholder\n\n\nWe have a plot (yay!), but it isn’t reactive. We have not yet told the server how to update the plot based on user inputs via the sliderInput() in the UI. Let’s do that next…"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#practice-filtering",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#practice-filtering",
    "title": "EDS 430",
    "section": "",
    "text": "Practice filtering data in our separate script\n\n\nFirst, create a new data frame where we filter the body_mass_g column for observations within a specific range of values (in this example, values ranging from 3000 - 4000):\n\n\n\n\n\n~/scratch/practice-script-app1-penguins.R\n\n# load packages\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n# filter penguins df for observations where body_mass_g &gt;= 3000 & &lt;= 4000\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% 3000:4000)\n\n\n\n\n\nThen, plot the new filtered data frame:\n\n\n\n\n\n\n~/scratch/practice-script-app1-penguins.R\n\n# plot new, filtered data\nggplot(na.omit(body_mass_df), # plot 'body_mass_df' rather than 'penguins' df\n       aes(x = flipper_length_mm, y = bill_length_mm, \n           color = species, shape = species)) +\n  geom_point() +\n  scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n  scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n  labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\", \n       color = \"Penguin species\", shape = \"Penguin species\") +\n  theme_minimal() +\n  theme(legend.position = c(0.85, 0.2),\n        legend.background = element_rect(color = \"white\"))"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#what-needs-updating",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#what-needs-updating",
    "title": "EDS 430",
    "section": "",
    "text": "Which part of our code needs to be updated when a user changes the slider range input?\n\n\n\n\n\n~/scratch/practice-script-app1-penguins.R\n\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% 3000:4000) # 3000:4000 needs to be update-able (or in other words, reactive)!\n\n\n\n\n\nFor example:\n\n\n\n\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% 2857:5903)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbody_mass_df &lt;- penguins |&gt; \n  filter(body_mass_g %in% 3725:5191)"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.1",
    "title": "EDS 430",
    "section": "",
    "text": "Rule 3: Access input values with input$&lt;id&gt;\n\n\nRecall that in our UI, we gave our sliderInput() an inputId = \"body_mass_input\".\n\n\n\n\n~/one-file-app/app.R\n\n# load packages (omitted for brevity) ----\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\", \n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterPlot\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n      \n  # render the scatter plot ----\n  output$bodyMass_scatterPlot &lt;- renderPlot({ \n      ggplot(na.omit(penguins, aes(...)) + # etc. (omitted for brevity)\n  }) \n    \n}"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.2",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#rule3.2",
    "title": "EDS 430",
    "section": "",
    "text": "Rule 3: Access input values with input$&lt;id&gt;\n\n\n\n\n\n\n~/one-file-app/app.R\n\n# load packages (omitted for brevity) ----\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # ~ previous code omitted for brevity ~\n  \n  # body mass slider ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g):\", \n              min = 2700, max = 6300, value = c(3000, 4000)),\n  \n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterPlot\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # filter body masses ----\n  body_mass_df &lt;- reactive({ \n    penguins |&gt; \n      filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2]) \n  })\n      \n  # render the scatter plot ----\n  output$bodyMass_scatterPlot &lt;- renderPlot({ \n      ggplot(na.omit(body_mass_df(), aes(...)) + # etc. (omitted for brevity)\n  }) \n    \n}\n\n\n\n\nIn our server, we can access the values of that slider input using the syntax, input$body_mass_input. If you want your output to change according to the input values, substitute hard-coded values (e.g. 3725:5191) with the input values from the UI (e.g. input$body_mass_input[1]:input$body_mass_input[2]).\n\n\nImportantly, we need to use reactive() to create reactive data frames that update with user inputs. When you call your reactive data frame in your ggplot, the data frame name must be followed by ()."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#run-that-app",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#run-that-app",
    "title": "EDS 430",
    "section": "",
    "text": "Okay, RUN THAT APP!\n\n\nYou should now have a reactive Shiny app! Note that reactivity automatically occurs whenever you use an input value to render an output object."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#recapp-app1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#recapp-app1",
    "title": "EDS 430",
    "section": "",
    "text": "Recap: We created our first reactive Shiny app following these steps:\n\n\n\n1. We created an app.R file in it’s own directory and began our app with the template, though you can also create a two-file Shiny app by using separate ui.R and server.R files.\n\n\n\n\n2. We added an input to the fluidPage() in our UI using an *Input() function and gave it a unique inputId (e.g. inputId = \"unique_input_Id_name\")\n\n\n\n\n3. We created a placeholder for our reactive object by using an *Output() function in the fluidPage() of our UI and gave it an outputId (e.g. outputId = \"output_Id_name\")\n\n\n\n\n4. We wrote the server instructions for how to assemble inputs into outputs, following these rules:\n\n\n save objects that you want to display to output$&lt;id&gt;\n\n\n build reactive objects using a render*() function (and similarly, build reactive data frames using reactive()\n\n\n access input values with input$&lt;id&gt;\n\n\n\n\n\nAnd we saw that reactivity automatically occurs whenever we use an input value to render an output object."
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1",
    "title": "EDS 430",
    "section": "",
    "text": "Question Exercise 1: Add another reactive widget\n\n\nThe {DT} package provides an R interface to the JavaScript library DataTables (you may have already used the DT package in your knitted RMarkdown/Quarto HTML documents). DT datatables allow for filtering, pagination, sorting, and lots of other neat features for tables on your HTML pages.\n\n\n\n\n\nWorking alone or in groups, add a reactive DT datatable to your app with a checkboxGroupInput that allows users to select which year(s) to include in the table. Configure your checkboxGroupInput so that the years 2007 and 2008 are pre-selected.\n\n\nIn the end, your app should look something like the example to the right.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee next slide for some tips on getting started!"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-tips",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-tips",
    "title": "EDS 430",
    "section": "",
    "text": "Lightbulb Exercise 1: Tips\n\nTips:\n\n Use ?checkboxGroupInput to learn more about which arguments you need (remember, all inputs require an inputId and oftentimes a label, but there are others required to make this work as well)\n\n\n Both {shiny} and {DT} packages have functions named dataTableOutput() and renderDataTable() – DT::renderDataTable() allows you to create both server-side and client-side DataTables and supports additional DataTables features while shiny::renderDataTable() only provides server-side DataTables. Be sure to use the one from the {DT} package using the syntax packageName::functionName().\n\n\n There are lots of ways to customize DT tables, but to create a basic one, all you need is DT::dataTable(your_dataframe)\n\nAnd remember to follow the steps outlined on the previous slides:\n\n1. Add an input (e.g. checkboxGroupInput) to the UI that users can interact with\n\n\n2. Add an output (e.g. DT::datatableOutput) to the UI that creates a placeholder space to fill with our eventual reactive output\n\n\n3. Tell the server how to assemble inputs into outputs following 3 rules:\n\n\n3.1 Save objects you want to display to output$&lt;id&gt;\n\n\n3.2 Build reactive objects using a render*() function\n\n\n3.3 Access input values with input$&lt;id&gt;\n\n\n\nSee next slide for a solution!"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-solution",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#app1-ex1-solution",
    "title": "EDS 430",
    "section": "",
    "text": "Exercise 1: A solution\n\n\nPress the right arrow key to advance through the newly added lines of code.\n\n\n\n\n~/one-file-app/app.R\n\n# load packages ----\nlibrary(shiny)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(DT)\n\n# user interface ----\nui &lt;- fluidPage(\n  \n  # app title ----\n  tags$h1(\"My App Title\"),\n  \n  # app subtitle ----\n  p(strong(\"Exploring Antarctic Penguin Data\")),\n  \n  # body mass slider input ----\n  sliderInput(inputId = \"body_mass_input\", label = \"Select a range of body masses (g)\",\n              min = 2700, max = 6300, value = c(3000, 4000)),\n\n  # body mass plot output ----\n  plotOutput(outputId = \"bodyMass_scatterPlot\"),\n  \n  # year input ----\n  checkboxGroupInput(inputId = \"year_input\", label = \"Select year(s):\",\n                     choices = c(\"2007\", \"2008\", \"2009\"), # or `unique(penguins$year_input)` | NOTE: update checkbox display name by using \"New name\" = \"observation name\" (e.g \"The year 2007\" = \"2007\")\n                     selected = c(\"2007\", \"2008\")),\n  \n  # DT output ----\n  DT::dataTableOutput(outputId = \"penguin_data\")\n  \n)\n\n# server instructions ----\nserver &lt;- function(input, output) {\n  \n  # filter body masses ----\n  body_mass_df &lt;- reactive({\n    penguins |&gt;\n      filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2]) # return observations where body_mass_g is \"in\" the set of options provided by the user in the sliderInput\n  })\n\n  # render the scatterplot output ----\n  output$bodyMass_scatterPlot &lt;- renderPlot({\n\n    ggplot(na.omit(body_mass_df()),\n           aes(x = flipper_length_mm, y = bill_length_mm,\n               color = species, shape = species)) +\n      geom_point() +\n      scale_color_manual(values = c(\"Adelie\" = \"#FEA346\", \"Chinstrap\" = \"#B251F1\", \"Gentoo\" = \"#4BA4A4\")) +\n      scale_shape_manual(values = c(\"Adelie\" = 19, \"Chinstrap\" = 17, \"Gentoo\" = 15)) +\n      labs(x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n           color = \"Penguin species\", shape = \"Penguin species\") +\n      theme_minimal() +\n      theme(legend.position = c(0.85, 0.2),\n            legend.background = element_rect(color = \"white\"))\n    \n  }, alt = \"A scatterplot of penguin Bill length (mm) vs. Flipper length (mm) for Adelie (orange circles), Chinstrap (purple triangles), and Gentoo (green squares) penguins.\"\n  )\n  \n  # filter for years ----\n  years_df &lt;- reactive({\n    penguins |&gt; \n      filter(year %in% input$year_input) # return observations where year is \"in\" the set of options provided by the user via the checkboxGroupInput\n  })\n  \n  # render the DT::datatable ----\n  output$penguin_data &lt;- DT::renderDataTable({\n    \n    DT::datatable(years_df(),\n                  options = list(pagelength = 10),\n                  rownames = FALSE)\n    \n  })\n  \n}\n\n# combine UI & server into an app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#common-mistakes",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#common-mistakes",
    "title": "EDS 430",
    "section": "",
    "text": "Common mistakes to look out for\n\n\nIt’s inevitable that you’ll make mistakes here and there as you build out your app…and they can be frustrating to catch. A few that I find myself making over and over again are:\n\n\n\n\n\n misspelling inputId as inputID (or outputId as outputID)\n\n\n misspelling your inputId (or outputId) name in the server (e.g. UI: inputId = \"myInputID\", server: input$my_Input_ID)\n\n\n repeating inputIds (each must be unique)\n\n\n forgetting to separate UI elements with a comma, ,\n\n\n forgetting the set of parentheses when calling the name of a reactive data frame in a plot (e.g. ggplot(my_reactive_df(), aes(...)))"
  },
  {
    "objectID": "course-materials/slides/part2.1-single-file-app-slides.html#end-section",
    "href": "course-materials/slides/part2.1-single-file-app-slides.html#end-section",
    "title": "EDS 430",
    "section": "",
    "text": "End part 2.1\n\n\nUp next: building out a two-file app\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/part0-setup.html#prerequisites",
    "href": "course-materials/part0-setup.html#prerequisites",
    "title": "Setup",
    "section": "Prerequisites",
    "text": "Prerequisites\nNo prior Shiny experience necessary for this course! However, we do assume that participants have the following:\n\nR / RStudio installed & a basic familiarity with the language\nA GitHub profile & git installed / configured\nYou have the required R packages installed. You can install/update them all at once by running:\n\n\ninstall.packages(pkgs = c(\"shiny\", \"shinydashboard\", \"shinyWidgets\", \"DT\", \"leaflet\", \"shinycssloaders\", \"tidyverse\", \"bslib\", \"fresh\", \"sass\", \"reactlog\", \"shinytest2\", \"palmerpenguins\", \"lterdatasampler\", \"gapminder\", \"markdown\"))\n\n\nPlease see the MEDS Installation Guide for instructions on installing the above software."
  },
  {
    "objectID": "course-materials/part0-setup.html#reference-code",
    "href": "course-materials/part0-setup.html#reference-code",
    "title": "Setup",
    "section": "Reference code",
    "text": "Reference code\nWe’ll be building / playing with a number of small apps and dashboards throughout this workshop. You can reference the complete source code for each of them on GitHub.\nWe’ll be creating our own GitHub repositories to house our apps, so you do not need to fork this repo (unless you want to, of course)."
  }
]