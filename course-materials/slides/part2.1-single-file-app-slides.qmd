---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 430: Part 2.1]{.custom-title}

[*Building a single-file app*]{.custom-subtitle}

<hr class="hr-teal">

[Week 1 | January 26^th^, 2024]{.custom-subtitle3}

---

##  {#build-app1 data-menu-title="~~~ Building App #1 ~~~" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa tools title="a wrench and screwdriver" >}} Building out your 1<sup>st</sup> app</p>
<p class="caption-text">*Here, we'll create our first reactive objects and establish a general Shiny coding workflow*</p>
</div>

---

##  {#LO-app1 data-menu-title="Learning Objectives - App #1"}

[{{< fa book-open title="an open book" >}} Learning Objectives - App #1 (single-file app)]{.slide-title}

<hr>

<p class="body-text-m teal-text bottombr">By the end of building out this first app, you should be a bit more familiar with:</p>

. .  .

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} writing a single-file (`app.R`) shiny app</p>

. . . 

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} adding and styling text in the UI using `tags`</p>

. . . 

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} practicing data wrangling and visualization *outside* of your shiny app</p>

. . . 

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} following a general workflow for building reactive apps, which includes adding **inputs** and **outputs** to the **UI**, then writing the **server instructions** on how to assemble user input values into outputs</p>

. .  .

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} running and quitting apps in RStudio</p>

. . . 

<p class="body-text-m teal-text topbr">Packages introduced:</p> 

. . . 

<p class="body-text-s">[{{< fa box-open title="an open box" >}}]{.teal-text} `{shiny}`: framework for building our reactive app + standard widgets</p>

. . . 

<p class="body-text-s">[{{< fa box-open title="an open box" >}}]{.teal-text} `{DT}`: interactive datatable widgets (that can be made reactive using shiny!)</p>

. . . 

<p class="body-text-s">[{{< fa box-open title="an open box" >}}]{.teal-text} `{tidyverse}`: collection of packages for wrangling & visualizing data</p>   

. . . 

<p class="body-text-s">[{{< fa box-open title="an open box" >}}]{.teal-text} `{palmerpenguins}`: data</p>

---

##  {#roadmap-app1 data-menu-title="Roadmap App#1"}

[Roadmap for App #1]{.slide-title}

<hr>

<p class="body-text">We'll start by building a small **single-file app** using data from the `{palmerpenguins}` package. We'll build out the the following features:</p>

:::: {.columns}

::: {.column width="45%"}
<br>
<br>
<br>

<p class="body-text">**(a)** A title and subtitle</p>

<p class="body-text topbr">**(b)** A slider widget for users to select a range of penguin body masses</p>

<p class="body-text topbr">**(c)** A reactive scatterplot that updates based on user-supplied values</p>
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A gif of our current Shiny app, demonstrating reactivity. At the top left of our app is the title, 'My App Title' in large header font. Beneath it is a subtitle, 'Exploring Antarctic Penguins and Temperatures'. Below the subtitle is the slider input with the label, 'Select a range of body masses (g)'. A gray horizontal slider bar ranges from the values 2,700 to 6,300. The interactive slider value selectors are two round white circles, which, when moved apart from one another highlight the selected value range in blue. The user is adjusting the slider value selectors and the scatterplot of penguin bill length (mm) vs. flipper length (mm) is automatically updating."
knitr::include_graphics("images/part2/reactive-app-v1.gif")
```
:::

::::

---

##  {#adding-text-plain data-menu-title="Adding text (plain)"}

[Add text in the UI]{.slide-title}

<hr>

We'll do this in the **UI** within `fluidPage()`, a layout function that sets up the basic visual structure of the page and scales components in real time to fill all available browser width. Add a title and subtitle to your app (be sure to separate each with a comma, `,`), save, and run:

<br>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
# user interface ----
ui <- fluidPage(
  
  # app title ----
  "My App Title",
  
  # app subtitle ----
  "Exploring Antarctic Penguin Data"
  
  )
```

---

##  {#adding-text-tags data-menu-title="Adding text (tags)"}

[Style text in the UI]{.slide-title}

<hr>

Recall that the UI is actually just an HTML document. We can **style our text by adding static HTML elements [using `tags`](https://shiny.rstudio.com/articles/tag-glossary.html)** -- a list of functions that parallel common HTML tags (e.g. `<h1>` == `tags$h1()`) The most common tags also have wrapper functions (e.g. `h1()`).

<br>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
# user interface ----
ui <- fluidPage(
  
  # app title ----
  tags$h1("My App Title"), # alternatively, you can use the `h1()` wrapper function
  
  # app subtitle ----
  h4(strong("Exploring Antarctic Penguin Data")) # alternatively, `tags$h4(tags$strong("text"))`
  
  )
```


---

##  {#inputs-outputs data-menu-title="Inputs & Outputs"}

[What are inputs and outputs?]{.slide-title}

<hr>

Next, we will begin to add some inputs and outputs to our UI inside `fluidPage()` (anything that you put into `fluidPage()` will appear in our app's user interface...and we want inputs and outputs to show up there!).

[**[Inputs]{.teal-text}** (or widgets) are the things that users can interact with (e.g. toggle, slide) and provide values to your app.]{.body-text-s}

[**[Outputs]{.teal-text}** are the R objects that your user sees (e.g. tables, plots). Outputs respond when a user interacts with / changes an input value.]{.body-text-s}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/part2/input-output-app.png")
```

---

##  {#input-output-fxns data-menu-title="Input & Output functions"}

[Examples of input & output functions]{.slide-title}

<hr>

The `shiny` package comes with a number of input and output functions, but you can extend these with additional packages (e.g. `shinyWidgets`, `plotly`, `DT`, etc.; more on those later).

:::: {.columns}

::: {.column width="45%"}
[**Examples of Input Functions:**]{.teal-text}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `actionButton()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `checkboxInput()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `checkboxGroupInput()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `dateInput()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `dateRangeInput()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `radioButtons()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `selectInput()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `sliderInput()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `textInput()`]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} See a [full list](https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/) of `shiny` input functions]{.body-text-s}
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
[**Examples of Output Functions:**]{.teal-text}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `dataTableOutput()` (inserts an interactive table)]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `imageOutput()` (inserts an image)]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `plotOutput()` (inserts a plot)]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `tableOutput()` (inserts a table)]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} `textOutput()` (inserts text)]{.body-text-s}

[[{{< fa angle-right title="a bullet point" >}}]{.teal-text} See a [full list](https://shiny.rstudio.com/tutorial/written-tutorial/lesson4/) of `shiny` output functions]{.body-text-s}
:::

::::

---

##  {#reactive-plot-app1 data-menu-title="Adding reactive plot (app #1)"}

[Adding our reactive plot]{.slide-title}

<hr>

<p class="body-text-s">Next, we'll create a **scatterplot of penguin bill lengths vs. penguin flipper lengths** using the `penguins` data set from the `{palmerpengiuns}` package. We will make this scatterplot *reactive* by adding a `sliderInput` that allows users to filter the displayed data points by **selecting a range of penguin body masses** (e.g. only plot bill and flipper lengths for penguins with body masses ranging from 4,500 grams to 6,000 grams).</p>

:::: {.columns}

::: {.column width="45%"}
<br>
<p class="body-text-s">[**To create a reactive plot, we will follow these steps:**]{.teal-text}</p>
<p class="body-text-s topbr">[**(1)**]{.teal-text} Add an input (e.g. `sliderInput`) to the **UI** that users can interact with</p>
<p class="body-text-s">[**(2)**]{.teal-text} Add an output (e.g. `plotOutput`) to the **UI** that creates a *placeholder space* to fill with our eventual reactive output</p>
<p class="body-text-s">[**(3)**]{.teal-text} Tell the **server** how to assemble inputs into outputs</p>
:::

::: {.column width="5%"}
::: 

::: {.column width="45%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A gif of our current Shiny app, demonstrating reactivity. At the top left of our app is the title, 'My App Title' in large header font. Beneath it is a subtitle, 'Exploring Antarctic Penguins and Temperatures'. Below the subtitle is the slider input with the label, 'Select a range of body masses (g)'. A gray horizontal slider bar ranges from the values 2,700 to 6,300. The interactive slider value selectors are two round white circles, which, when moved apart from one another highlight the selected value range in blue. The user is adjusting the slider value selectors and the scatterplot of penguin bill length (mm) vs. flipper length (mm) is automatically updating."
knitr::include_graphics("images/part2/reactive-app-v1.gif")
```
:::

::::

---

##  {#input-syntax data-menu-title="Input Syntax"}

[Input function syntax]{.slide-title}

<hr>

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} **All input functions have the same first argument, `inputId`** (**NOTE:** `Id` *not* `ID`), **which is used to connect the front end of your app (the UI) with the back end (the server).** For example, if your UI has an `inputId = "name"`, the server function will access that input value using the syntax `input$name`. The `inputId` has two constraints:</p>

[[**(1)**]{.teal-text} it must be a simple string containing only letters, numbers, and underscores,]{.body-text-s}

[[**(2)**]{.teal-text} it must be unique within your app.]{.body-text-s}

<p class="body-text-s topbr">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Most input functions have a second parameter called `label`, which is used to create a human-readable label for the control, which will appear in the UI.</p>

<p class="body-text-s topbr">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} The remaining arguments are unique to each input function. Oftentimes, these include a `value` parameter, which lets you set the default value of your widget, where applicable.</p>

[**A couple examples:**]{.teal-text}
```{r}
#| eval: false
#| echo: true
sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):", value = c(3000, 4000), ...)

selectInput(inputId = "island_input", label = "Choose and island:", ...)
```

<br>

::: {.footer}
Check out the interactive [Shiny Widgets Gallery](https://shiny.rstudio.com/gallery/widget-gallery.html) to learn how to implement the most common widgets.
:::

---

##  {#add-input data-menu-title="Add an Input"}

[**Step 1:** Add an input to your app]{.slide-title}

<hr>

<p class="body-text">First let's add a `sliderInput()` that will allow users to select a range of penguin body masses (g).</p>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "6-8"
# user interface ----
ui <- fluidPage(
  
  # ~ previous code omitted for brevity ~
  
  # body mass slider input ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):",
              min = 2700, max = 6300, value = c(3000, 4000))
  )
```

. . . 

<p class="body-text">When you run your app, you should see something similar to the image below. It's operable, but does not yet have an associated output.</p>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "40%"
#| fig-alt: "A basic Shiny app, with a title that says 'My App Title', a subtitle that says, 'Exploring Palmer Penguins and Antarctic Temperatures, and a slider input with a label that says 'Select a range of body masses (g)'. The slider bar has a minimum value of 2,700 and a maximum value of 6,300, and the moveable slider selectors currently range from 3,000 to 4,000."
knitr::include_graphics("images/part2/3000-4000.png")
```

---

##  {#output-syntax data-menu-title="Output Syntax"}

[Output function syntax]{.slide-title}

<hr>

<p class="body-text">Outputs in the UI create **placeholders** which are later filled by the server function.</p>

<p class="body-text topbr"> Similar to input functions, **all output functions take the same first argument, `outputId`** (again, note `Id` not `ID`), **which connects the front end UI with the back end server.** For example, if your UI contains an output function with an `outputId = "plot"`, the server function will access it (or in other words, know to place the plot in that particular placeholder) using the syntax `output$plot`.</p>

</p>

<p class="body-text topbr">**A couple examples:**</p>
```{r}
#| eval: false
#| echo: true
plotOutput(outputId = "bodyMass_scatterplot_output")

dataTableOutput(outputId = "penguin_data_output")
```

---

##  {#add-output data-menu-title="Add Output"}

[**Step 2:** Add an output to your app]{.slide-title}

<hr>

<p class="body-text-s">Let's now add a `plotOutput()`, which will be updated based on the user inputs via the `sliderInput()`, then run the app.</p>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "10-11"

# user interface ----
ui <- fluidPage(
  
  # ~ previous code omitted for brevity ~
  
  # body mass slider input ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):",
              min = 2700, max = 6300, value = c(3000, 4000)),
  
  # body mass plot ouput ----
  plotOutput(outputId = "bodyMass_scatterplot_output")
  
  )
```

---

##  {#wheres-my-output data-menu-title="Where's my output?"}

[Where's my output??]{.slide-title}

<hr>

Okay, it looks like nothing changed?? **Remember, `*Output()` functions create placeholders, but we have not yet written the server instructions on how to fill and update those placeholders.** We can inspect the HTML and see that there is, in fact, a placeholder area awaiting our eventual output, which will be a plot named "*bodyMass_scatterplot_output*":

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A Google Chrome browser window with our Shiny app open on the left-hand side and the underlying HTML document open on the right. The app looks the same as before, except hovering over the HTML associated with our new plotOutput highlights a blue square region beneath the sliderInput. This highlighted region is the placeholder where our plot will eventually be rendered."
knitr::include_graphics("images/part2/output-placeholder.png")
```

---

##  {#rendering-outputs data-menu-title="Rendering outputs"}

[Render outputs with `*render*()` functions]{.slide-title}

<hr>

<p class="body-text">Each `*Output()` function in the UI is coupled with a `render*()` function in the server, which contains the "instructions" for creating the output based on user inputs (or in other words, the instructions for making your output *reactive*).</p>

<br>

<p class="body-text-m teal-text center-text topbr">Examples of `*Output()` functions and their corresponding `render*()` functions:</p>

<br>

| Output function     | Render function      |
|---------------------|----------------------|
| `dataTableOutput()` | `renderDataTable()`  |  
| `imageOutput()`     | `renderImage()`      |   
| `plotOutput()`      | `renderPlot()`       |  
| `tableOutput()`     | `renderTable()`      |  
| `textOutput()`      | `renderText()`       |  

---

##  {#assemble data-menu-title="Assemble Inputs into Outputs"}

[**Step 3:** Tell the server how to assemble inputs into outputs]{.slide-title3}

<hr>

<p class="body-text-s">Now that we've designed our input / output in the UI, we need to write the server instructions (i.e. write the server function) on how to use the input value(s) (i.e. penguin body mass range via a slider input) to update the output (scatter plot).</p>

<p class="body-text-s">The **server function** is defined with two arguments, `input` and `output`, both of which are list-like objects. You *must* define both of these arguments within the server function. `input` contains the values of all the different inputs at any given time, while `output` is where you'll save output objects to be displayed in the app.</p>

[***This part can be intimidating, but if you follow these three rules, you will successfully create reactivity within your shiny app!***]{.body-text-s .teal-text}

<br>

<p class="body-text-xl teal-text">**Rules:**</p>

. . . 

<p class="body-text">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Save objects you want to display to `output$<id>`</p>

<p class="body-text">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Build reactive objects using a `render*()` function</p>

<p class="body-text">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Access input values with `input$<id>`</p>

---

##  {#rule1 data-menu-title="Rule #1"}

[**Rule 1:** Save objects you want to display to `output$<id>`]{.slide-title3}

<hr>

<br>

:::: {.columns}

::: {.column width="65%"}
```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "21-22"

# load packages ----
library(shiny)

# user interface ----
ui <- fluidPage(
  
  # ~ previous code omitted for brevity ~
  
  # body mass slider ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):",
              min = 2700, max = 6300, value = c(3000, 4000)),
  
  # body mass plot output ----
  plotOutput(outputId = "bodyMass_scatterplot_output") 
  
)

# server instructions ----
server <- function(input, output) {
  
  # render penguin scatter plot ----
  output$bodyMass_scatterplot_output <- # code to generate plot here
  
}
```
:::

::: {.column width="35%"}

<br>

[In our **UI**, we created a placeholder for our plot using the `plotOutput()` function and gave it the Id `"bodyMass_scatterplot_output"`.]{.body-text-s} 

[In our **server**, we will save our plot to the output argument by its `outputId`.]{.body-text-s} 

[**Note: In the *UI*, our `outputId` is quoted (`"bodyMass_scatterplot_output"`), but not in the *server* (`bodyMass_scatterplot_output`).**]{.body-text-s .teal-text}
:::

::::

---

##  {#rule2.1 data-menu-title="Rule #2a"}

[**Rule 2:** Build reactive objects with `render*()`]{.slide-title2}

<hr>

<p class="body-text-s">Use the appropriate `render*()` function to make your output reactive (e.g. if you have a `plotOutput` in your UI, you will need to use `renderPlot()` in your server). Within your `render*()`, write any code inside a set of curly braces, `{}`. This allows you to include as many lines of code as it takes to build your object.</p>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "22-26"

# load packages ----
library(shiny)

# user interface ----
ui <- fluidPage(
  
  # ~ previous code omitted for brevity ~
  
  # body mass slider ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):",
              min = 2700, max = 6300, value = c(3000, 4000)),
  
  # body mass plot output ----
  plotOutput(outputId = "bodyMass_scatterplot_output") 
  
)

# server instructions ----
server <- function(input, output) {
  
  # render penguin scatter plot ----
  output$bodyMass_scatterplot_output <- renderPlot({
    
     # code to generate plot here
    
  }) 
}
```

---

##  {#rule2.2 data-menu-title="Practice in seperate script"}

[**An Aside:** Draft objects in a separate script first]{.slide-title3}

<hr>

<p class="body-text bottombr">I find it easier to experiment and draft my objects (e.g. plots) first in a separate script (*outside* my app directory), then copy the code over to the server after. I want to make a plot that looks like this:</p>

::: {.panel-tabset}

## Code

```{r filename="~/scratch/practice-script-app1.R"}
#| eval: false
#| echo: true
# load packages ----
library(palmerpenguins)
library(tidyverse)

# create scatterplot ----
ggplot(na.omit(penguins), 
       aes(x = flipper_length_mm, y = bill_length_mm, 
           color = species, shape = species)) +
  geom_point() +
  scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
  scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
  labs(x = "Flipper length (mm)", y = "Bill length (mm)", 
       color = "Penguin species", shape = "Penguin species") +
  theme_minimal() +
  theme(legend.position = c(0.85, 0.2),
        legend.background = element_rect(color = "white"))
```

## Output
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
#| fig-alt: "A scatterplot with Flipper length (mm) on the x-axis and Bill length (mm) on the y-axis. Data points are colored by penguins species: Adelie in orange circles, Chinstrap in purple triangles, and Gentoo in green squares."
knitr::include_graphics("images/part2/penguin-scatterplot.png")
```

:::
 
---

##  {#rule2.3 data-menu-title="Copy code into server"}

[Copy your plot code into the server]{.slide-title}

<hr>

<p class="body-text-s">Copy your code over to your app, placing it inside the `{}` (and make sure to add any additional required packages to the top of your `app.R` script). Run your app. What do you notice?</p>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "25-35" 

# load packages ----
library(shiny)
library(palmerpenguins)
library(tidyverse)

# user interface ----
ui <- fluidPage(
  
  # ~ previous code omitted for brevity ~
  
  # body mass slider ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):",
              min = 2700, max = 6300, value = c(3000, 4000)),
  
  # body mass plot output ----
  plotOutput(outputId = "bodyMass_scatterplot_output")
  
)

# server instructions ----
server <- function(input, output) {
  
  # render penguin scatter plot ----
  output$bodyMass_scatterplot_output <- renderPlot({ 
      ggplot(na.omit(penguins),
             aes(x = flipper_length_mm, y = bill_length_mm,
                 color = species, shape = species)) + 
        geom_point() + 
        scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
        scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
        labs(x = "Flipper length (mm)", y = "Bill length (mm)", 
             color = "Penguin species", shape = "Penguin species") + 
        theme_minimal() + 
        theme(legend.position = c(0.85, 0.2), 
              legend.background = element_rect(color = "white")) 
  }) 
```

---

##  {#non-reactive-plot data-menu-title="Non-reactive plot appears"}

[A non-reactive plot now lives in our `plotOutput()` placeholder]{.slide-title3}

<hr>

<p class="body-text bottombr">**We have a plot (yay!), but it isn't reactive.** We have not yet told the server how to update the plot based on user inputs via the `sliderInput()` in the UI. Let's do that next...</p>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A user changes the sliderInput meant associated with the penguin data scatterplot, but the plot does not update (i.e. it is not yet reactive)."
knitr::include_graphics("images/part2/nonreactive-app.gif")
```

---

##  {#practice-filtering data-menu-title="Practice filtering data"}

[Practice filtering data in our separate script]{.slide-title2}

<hr>

<p class="body-text-s">First, create a new data frame where we filter the `body_mass_g` column for observations within a specific range of values (in this example, values ranging from 3000 - 4000):</p>

. . . 

```{r filename="~/scratch/practice-script-app1.R"}
#| eval: true
#| echo: true
# load packages ----
library(palmerpenguins)
library(tidyverse)

# filter penguins df for observations where body_mass_g >= 3000 & <= 4000 ----
body_mass_df <- penguins |> 
  filter(body_mass_g %in% c(3000:4000))
```

. . .

<p class="body-text-s">Then, plot the new filtered data frame:</p>

:::: {.columns}

:::{.column width="55%"}
```{r filename="~/scratch/practice-script-app1.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "2"

# plot new, filtered data ----
ggplot(na.omit(body_mass_df), # plot 'body_mass_df' rather than 'penguins' df
       aes(x = flipper_length_mm, y = bill_length_mm, 
           color = species, shape = species)) +
  geom_point() +
  scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
  scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
  labs(x = "Flipper length (mm)", y = "Bill length (mm)", 
       color = "Penguin species", shape = "Penguin species") +
  theme_minimal() +
  theme(legend.position = c(0.85, 0.2),
        legend.background = element_rect(color = "white"))
```
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A scatterplot of penguin Bill length (mm) vs. Flipper length (mm) for Adelie (orange circles), Chinstrap (purple triangles), and Gentoo (green squares) penguins. For all species, bill length tends to increase with flipper length."
knitr::include_graphics("images/part2/filtered-penguin-plot.png")
```
:::

::::

---

##  {#what-needs-updating data-menu-title="What needs to be reactive?"}

[Which part of our code needs to be updated when a user changes the slider range input?]{.slide-title3}

<hr>

. . . 

```{r filename="~/scratch/practice-script-app1.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "2"
body_mass_df <- penguins |> 
  filter(body_mass_g %in% c(3000:4000)) # 3000:4000 needs to be update-able (or in other words, reactive)!
```

. . . 

<br>

<p class="body-text">**For example:**</p>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
body_mass_df <- penguins |> 
  filter(body_mass_g %in% c(2857:5903))
```

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Our Shiny app with just a title, subtitle, and slider input, where the input values are at a minimum of 2,857 and a maximum of 5,903."
knitr::include_graphics("images/part2/2857-5903.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
body_mass_df <- penguins |> 
  filter(body_mass_g %in% c(3725:5191))
```

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Our Shiny app with just a title, subtitle, and slider input, where the input values are at a minimum of 3,725 and a maximum of 5,191."
knitr::include_graphics("images/part2/3725-5191.png")
```
:::

::::

---

##  {#rule3.1 data-menu-title="Rule #3a"}

[**Rule 3:** Access input values with `input$<id>`]{.slide-title2}

<hr>

<p class="body-text-s">Recall that in our **UI**, we gave our `sliderInput()` an `inputId = "body_mass_input"`.</p>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "9"

# load packages (omitted for brevity) ----

# user interface ----
ui <- fluidPage(
  
  # ~ previous code omitted for brevity ~
  
  # body mass slider ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):", 
              min = 2700, max = 6300, value = c(3000, 4000)),
  
  # body mass plot output ----
  plotOutput(outputId = "bodyMass_scatterplot_output")
  
)

# server instructions ----
server <- function(input, output) {
      
  # render the scatter plot ----
  output$bodyMass_scatterplot_output <- renderPlot({ 
      ggplot(na.omit(penguins, aes(...)) + # etc. (omitted for brevity)
  }) 
    
}
```

---

##  {#rule3.2 data-menu-title="Rule #3b"}

[**Rule 3:** Access input values with `input$<id>`]{.slide-title2}

<hr>

:::: {.columns}

::: {.column width="50%"}
```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "20-24|28"

# load packages (omitted for brevity) ----

# user interface ----
ui <- fluidPage(
  
  # ~ previous code omitted for brevity ~
  
  # body mass slider ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g):", 
              min = 2700, max = 6300, value = c(3000, 4000)),
  
  # body mass plot output ----
  plotOutput(outputId = "bodyMass_scatterplot_output")
  
)

# server instructions ----
server <- function(input, output) {
  
  # filter body masses ----
  body_mass_df <- reactive({ 
    penguins |> 
      filter(body_mass_g %in% c(input$body_mass_input[1]:input$body_mass_input[2])) 
  })
      
  # render the scatter plot ----
  output$bodyMass_scatterplot_output <- renderPlot({ 
      ggplot(na.omit(body_mass_df(), aes(...)) + 
        # etc. (omitted for brevity)
  }) 
    
}
```

:::

::: {.column width="50%"}

<br>

[In our server, we can access the values of that slider input using the syntax, `input$body_mass_input`. *If you want your output to change according to the input values, substitute hard-coded values (e.g. 3725:5191) with the input values from the UI. For example, `c(input$body_mass_input[1]:input$body_mass_input[2])`*.]{.body-text-s}

<br>

<p class="important-text-bg">**Importantly**, we need to use `reactive()` to create reactive data frames that update with user inputs. When you call your reactive data frame in your ggplot, **the data frame name must be followed by `()`**.</p>
:::

::::

---

##  {#run-that-app data-menu-title="Run that app!"}

[Okay, RUN THAT APP!]{.slide-title}

<hr>

<p class="body-text">You should now have a reactive Shiny app! *Note that reactivity automatically occurs whenever you use an **input value** to **render** an **output object**.*</p>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A gif of our current Shiny app, demonstrating reactivity. At the top left of our app is the title, 'My App Title' in large header font. Beneath it is a subtitle, 'Exploring Antarctic Penguins and Temperatures'. Below the subtitle is the slider input with the label, 'Select a range of body masses (g)'. A gray horizontal slider bar ranges from the values 2,700 to 6,300. The interactive slider value selectors are two round white circles, which, when moved apart from one another highlight the selected value range in blue. The user is adjusting the slider value selectors and the scatterplot of penguin bill length (mm) vs. flipper length (mm) is automatically updating."

knitr::include_graphics("images/part2/reactive-app-v1.gif")
```

---

##  {#recapp-app1 data-menu-title="Recap: app #1"}

[Recap: We created our first *reactive* Shiny app following these steps:]{.slide-title3}

<hr>

. . . 

<p class="body-text">[**(1)**]{.teal-text} We created an `app.R` file in it's own directory and began our app with the [template](https://ucsb-meds.github.io/EDS430-Shiny/#/single-file), though you can also create a [two-file Shiny app](https://ucsb-meds.github.io/EDS430-Shiny/#/two-file) by using separate `ui.R` and `server.R` files.</p>

. . .

<p class="body-text topbr">[**(2)**]{.teal-text} We added an input to the `fluidPage()` in our **UI** using an `*Input()` function and gave it a *unique* `inputId` (e.g. `inputId = "unique_input_Id_name"`)</p>

. . . 

<p class="body-text topbr">[**(3)**]{.teal-text} We created a placeholder for our reactive object by using an `*Output()` function in the `fluidPage()` of our **UI** and gave it an `outputId` (e.g. `outputId = "output_Id_name"`)</p>

. . .

<p class="body-text topbr">[**(4)**]{.teal-text} We wrote the **server** instructions for how to assemble inputs into outputs, following these rules:</p>

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} save objects that you want to display to `output$<id>`</p>
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} build reactive objects using a `render*()` function (and similarly, build reactive data frames using `reactive()`</p>
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} access input values with `input$<id>`</p>

. . . 

::: {.center-text .teal-text .body-text-m}
And we saw that reactivity automatically occurs whenever we use an ***input value*** to ***render*** an ***output object***.
:::

---

##  {#app1-ex1 data-menu-title="** Exercise 1 Prompt **" background="#d2e3f3"}

[`r fontawesome::fa("question", fill = "#05859B", a11y = "sem")` Exercise 1: Add another reactive widget]{.slide-title2}

<hr>

<p class="body-text-s bottombr"> The [`{DT}` package](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) (you may have already used the `{DT}` package in your knitted RMarkdown / Quarto HTML documents). DT datatables allow for filtering, pagination, sorting, and lots of other neat features for tables on your HTML pages.</p>

<br>

:::: {.columns}

::: {.column width="50%"}
<br>
<p class="body-text-s topbr">**Working alone or in groups, add a reactive `DT` datatable to your app with a `checkboxGroupInput` that allows users to select which year(s) to include in the table. Configure your `checkboxGroupInput` so that the years 2007 and 2008 are pre-selected.**</p>
<p class="body-text-s topbr">In the end, your app should look something like the example to the right.</p>
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A gif of our current Shiny app, demonstrating the newly added DT::datatable. The user is able to select which years (2007, 2008, 2009) to display data for by clicking on one more more checkboxes."
knitr::include_graphics("images/part2/DT.gif")
```
:::

::::

::: {.center-text .body-text-l .teal-text}
See next slide for some tips on getting started!
:::

---

##  {#app1-ex1-tips data-menu-title="** Exercise 1 Tips **" background="#d2e3f3"}

[`r fontawesome::fa("lightbulb", fill = "#05859B", a11y = "sem")` Exercise 1: Tips]{.slide-title}

<hr>

**Tips:**
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Use `?checkboxGroupInput` to learn more about which arguments you need (remember, all inputs require an `inputId` and oftentimes a `label`, but there are others required to make this work as well)</p>
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Both `{shiny}` and `{DT}` packages have functions named `dataTableOutput()` and `renderDataTable()` -- `DT::renderDataTable()` allows you to create both server-side and client-side DataTables and supports additional DataTables features while `shiny::renderDataTable()` only provides server-side DataTables. Be sure to use the one from the `{DT}` package using the syntax `packageName::functionName()`.</p>
<p class="body-text-s bottombr">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} There are lots of ways to customize DT tables, but to create a basic one, all you need is `DT::dataTable(your_dataframe)`<p>


**And remember** to follow the steps outlined on the previous slides:

<p class="body-text-s">[**(1)**]{.teal-text} Add an input (e.g. `checkboxGroupInput`) to the **UI** that users can interact with<p>
<p class="body-text-s">[**(2)**]{.teal-text} Add an output (e.g. `DT::datatableOutput`) to the **UI** that creates a placeholder space to fill with our eventual reactive output<p>
<p class="body-text-s">[**(3)**]{.teal-text} Tell the **server** how to assemble inputs into outputs following 3 rules:<p>
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Save objects you want to display to `output$<id>`<p>
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Build reactive objects using a `render*()` function<p>
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} Access input values with `input$<id>`<p>

<center><p class="body-text-l teal-text topbr">See next slide for a solution!</p></center>

---

##  {#app1-ex1-solution data-menu-title="** Exercise 1 Solution **" background="#d2e3f3"}

[{{< fa check title="check mark" >}} Exercise 1: A solution]{.slide-title}

<hr>

<p class="body-text-s">Press the right arrow key to advance through the newly added lines of code.</p>

```{r filename="~/one-file-app/app.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "5|23-29|59-72i"
# load packages ----
library(shiny)
library(palmerpenguins)
library(tidyverse)
library(DT)

# user interface ----
ui <- fluidPage(
  
  # app title ----
  tags$h1("My App Title"),
  
  # app subtitle ----
  h4(strong("Exploring Antarctic Penguin Data")),
  
  # body mass slider input ----
  sliderInput(inputId = "body_mass_input", label = "Select a range of body masses (g)",
              min = 2700, max = 6300, value = c(3000, 4000)),

  # body mass plot output ----
  plotOutput(outputId = "bodyMass_scatterplot_output"),
  
  # year input ----
  checkboxGroupInput(inputId = "year_input", label = "Select year(s):",
                     choices = c("2007", "2008", "2009"), # or `unique(penguins$year_input)` | NOTE: update checkbox display name by using "New name" = "observation name" (e.g "The year 2007" = "2007")
                     selected = c("2007", "2008")),
  
  # DT output ----
  DT::dataTableOutput(outputId = "penguin_DT_output")
  
)

# server instructions ----
server <- function(input, output) {
  
  # filter body masses ----
  body_mass_df <- reactive({
    penguins |>
      filter(body_mass_g %in% input$body_mass_input[1]:input$body_mass_input[2]) # return observations where body_mass_g is "in" the set of options provided by the user in the sliderInput
  })

  # render the scatterplot output ----
  output$bodyMass_scatterplot_output <- renderPlot({

    ggplot(na.omit(body_mass_df()),
           aes(x = flipper_length_mm, y = bill_length_mm,
               color = species, shape = species)) +
      geom_point() +
      scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
      labs(x = "Flipper length (mm)", y = "Bill length (mm)",
           color = "Penguin species", shape = "Penguin species") +
      theme_minimal() +
      theme(legend.position = c(0.85, 0.2),
            legend.background = element_rect(color = "white"))
    
  })
  
  # filter for years ----
  years_df <- reactive({
    penguins |> 
      filter(year %in% c(input$year_input)) # return observations where year is "in" the set of options provided by the user via the checkboxGroupInput
  })
  
  # render the DT::datatable ----
  output$penguin_DT_output <- DT::renderDataTable({
    
    DT::datatable(years_df(),
                  options = list(pagelength = 10),
                  rownames = FALSE)
    
  })
  
}

# combine UI & server into an app ----
shinyApp(ui = ui, server = server)
```

---

##  {#common-mistakes data-menu-title="Common Mistakes"}

[Common mistakes to look out for]{.slide-title}

<hr>

It's inevitable that you'll make mistakes here and there as you build out your app...and they can be frustrating to catch. A few that I find myself making over and over again:

<br>

:::: {.columns}

::: {.column width="50%"}
<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} misspelling `inputId` as `inputID` (or `outputId` as `outputID`)</p>

<p class="body-text-s topbr">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} misspelling your inputId (or outputId) name in the server (e.g. UI: `inputId = "myInputID"`, server: `input$my_Input_ID`)</p>

<p class="body-text-s topbr">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} repeating `inputId`s (each *must* be unique)</p>

<p class="body-text-s topbr">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} forgetting to separate UI elements with a comma, `,`</p>

<p class="body-text-s topbr">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} forgetting the set of parentheses when calling the name of a reactive data frame (e.g. `ggplot(my_reactive_df(), aes(...))`)</p>
:::

::: {.column width="50%"}
<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A gif of Britney Spears in her iconic red spandex outfit singing 'Oops I did it again.'"
knitr::include_graphics("images/part2/oops.gif")
```

:::

::::

---

##  {#end-section data-menu-title="~~~ BREAK ~~~" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">End part 2.1</p>
<p class="caption-text">***Up next:** building out a two-file app*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  # play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

