---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 430: Part 7.1]{.custom-title}

[*Functions*]{.custom-subtitle}

<hr class="hr-teal">

[Week 2 | February 2^nd^, 2024]{.custom-subtitle3}

---

##  {#functions data-menu-title="~~~ Functions ~~~" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa code title="the symbol for code, </>" >}} Writing functions</p>
<p class="caption-text">*Functions have many benefits and can improve your code base, particularly as your app grows in complexity*</p>
</div>

---

##  {#LO-functions data-menu-title="Learning Objectives - Functions"}

[{{< fa book-open title="an open book" >}} Learning Objectives - Functions]{.slide-title}

<hr>

<p class="body-text-l teal-text bottombr">By the end of this section, you should:</p>

. . . 

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} understand the benefits of turning UI elements and server logic into functions</p>

. . . 

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} know where to write / save your functions</p>

. . . 

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} successfully turn a repeated input into a function</p>

. . . 

<p class="body-text-s">[{{< fa angle-right title="a bullet point" >}}]{.teal-text} successfully turn a piece of server logic into a function</p>


---

##  {#why-functions data-menu-title="Why write functions?"}

[Why write functions?]{.slide-title}

<hr>

<br>

[Functions are useful for a wide variety of reasons. Most notably:]{.body-text-m}

<br>

. . . 

[{{< fa angle-right title="a bullet point" >}}]{.teal-text} reducing redundancy

. . . 

[{{< fa angle-right title="a bullet point" >}}]{.teal-text} reducing complexity

. . . 

[{{< fa angle-right title="a bullet point" >}}]{.teal-text} increasing code comprehension

. . . 

[{{< fa angle-right title="a bullet point" >}}]{.teal-text} increasing testability

---

##  {#storing-functions data-menu-title="Where to store functions?"}

[Where do I store my function(s)?]{.slide-title}

<hr>

<br>

**Importantly, functions can live outside of your app file(s)** (i.e. `app.R` or `ui.R` / `server.R` / `global.R`), helping you to break up / streamline your code. Hadley Wickham [recommends](https://mastering-shiny.org/scaling-functions.html#file-organisation) creating a folder called `/R` **inside** your app's directory (e.g. `~/<app-directory>/R/...`) and:

<br>

<p class="body-text-s bottombr">[**(a)**]{.teal-text} storing larger functions in their own files (e.g. `~/<app-directory>/R/function-name.R`) and / or</p> 
<p class="body-text-s bottombr">[**(b)** ]{.teal-text} creating a `utils.R` file (e.g `~/<app-directory>/R/utils.R`) to store smaller, simpler functions all in one script.</p> 

<br>

. . . 

You can **source your function files into `global.R`** so that your functions are made available for use throughout your app. 

**NOTE:** As of Shiny version 1.5.0, any scripts stored in `~/<app-directory>/R/` will be [**automatically sourced**]{.teal-text} when your application is loaded (meaning you don't *need* to `source()` them into `global.R`, if you're running at least Shiny v1.5.0).

---

##  {#app-for-practicing-fxns data-menu-title="Example App for Fxn Practice"}

[Create a small app for function practice]{.slide-title2}

<hr>

::: {.panel-tabset}

## App preview

<p class="body-text-s">Add the following files (+ code) to a new subdirectory called `~/functions-app/`, and check out the resulting app:</p>

```{r}
#| eval: true
#| echo: false
#| out-width: "55%"
#| fig-align: "center"
#| fig-alt: "A shiny app with two tabs. The first tab contains a pickerInput that allows the user to select which penguin species they want to visualize data for, along with a scatterplot. The second tab also contains a pickerInput with the exact same penguin species options, along with a histogram."
knitr::include_graphics("images/part7/functions_demo_app.gif")
```

## `global.R`
```{r filename="~/functions-app/global.R"}
#| eval: false
#| echo: true
# load packages ----
library(shiny)
library(shinyWidgets)
library(palmerpenguins)
library(tidyverse)
```

## `ui.R`
```{r filename="~/functions-app/ui.R"}
#| eval: false
#| echo: true
ui <- fluidPage(
  
  tags$h1("Demoing Functions"),
  
  # tabsetPanel ----
  tabsetPanel(
    
    # scatterplot tab ----
    tabPanel(title = "Scatterplot",
             
             # species (scatterplot) pickerInput ----
             pickerInput(inputId = "penguinSpp_scatterplot_input", label = "Select a species:",
                         choices = c("Adelie", "Chinstrap", "Gentoo"),
                         selected = c("Adelie", "Chinstrap", "Gentoo"),
                         options = pickerOptions(actionsBox = TRUE),
                         multiple = TRUE),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_scatterplot_output")
             
             ), # END scatterplot tab
    
    
    # histogram tab ----
    tabPanel(title = "Histogram",
             
             # species (histogram) pickerInput ----
             pickerInput(inputId = "penguinSpp_histogram_input", label = "Select a species:",
                         choices = c("Adelie", "Chinstrap", "Gentoo"),
                         selected = c("Adelie", "Chinstrap", "Gentoo"),
                         options = pickerOptions(actionsBox = TRUE),
                         multiple = TRUE),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_histogram_output")
             
             ) # END histogram tab
    
  ) # END tabsetPanel
  
) # END fluidPage

```

## `server.R`
```{r filename="~/functions-app/server.R"}
#| eval: false
#| echo: true
server <- function(input, output) {
  
  
  # filter penguin species (scatterplot) ----
  filtered_spp_scatterplot_df <- reactive ({

    penguins |>
      filter(species %in% input$penguinSpp_scatterplot_input)

  })

  
  # render the scatterplot output ----
  output$penguin_scatterplot_output <- renderPlot({
    
    ggplot(na.omit(filtered_spp_scatterplot_df()),
           aes(x = bill_length_mm, y = bill_depth_mm,
               color = species, shape = species)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE, aes(color = species)) + 
      scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
      labs(x = "Flipper length (mm)", y = "Bill length (mm)",
           color = "Penguin species", shape = "Penguin species")
    
  })
  
  
  # filter penguin species (histogram) ----
  filtered_spp_histogram_df <- reactive ({
    
    penguins |>
      filter(species %in% input$penguinSpp_histogram_input)
    
  })
  
  # render the histogram output ----
  output$penguin_histogram_output <- renderPlot({
    
    ggplot(na.omit(filtered_spp_histogram_df()),
           aes(x = flipper_length_mm, fill = species)) +
      geom_histogram(alpha = 0.5, position = "identity") +
      scale_fill_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      labs(x = "Flipper length (mm)", y = "Frequency",
           fill = "Penguin species")
    
  })
  
} # END server
```

:::

---

##  {#id-ui-duplication data-menu-title="Identify code duplication in UI"}

[Identify code duplication in `ui.R`]{.slide-title}

<hr>

Let's first focus on the UI -- where do we have nearly identically duplicated code?

. . . 

```{r filename="~/functions-app/ui.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "11-16|27-32"
ui <- fluidPage(
  
  tags$h1("Demoing Functions"),
  
  # tabsetPanel ----
  tabsetPanel(
    
    # scatterplot tab ----
    tabPanel(title = "Scatterplot",
             
             # species (scatterplot) pickerInput ----
             pickerInput(inputId = "penguinSpp_scatterplot_input", label = "Select a species:",
                         choices = c("Adelie", "Chinstrap", "Gentoo"),
                         selected = c("Adelie", "Chinstrap", "Gentoo"),
                         options = pickerOptions(actionsBox = TRUE),
                         multiple = TRUE),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_scatterplot_output")
             
             ), # END scatterplot tab
    
    
    # histogram tab ----
    tabPanel(title = "Histogram",
             
             # species (histogram) pickerInput ----
             pickerInput(inputId = "penguinSpp_histogram_input", label = "Select a species:",
                         choices = c("Adelie", "Chinstrap", "Gentoo"),
                         selected = c("Adelie", "Chinstrap", "Gentoo"),
                         options = pickerOptions(actionsBox = TRUE),
                         multiple = TRUE),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_histogram_output")
             
             ) # END histogram tab
    
  ) # END tabsetPanel
  
) # END fluidPage
```

##  {#ui-functions data-menu-title="Write a UI function"}

[We can turn these `pickerInput`s into a function]{.slide-title2}

<hr>

This app includes two `pickerInputs`, both of which allow users to select which penguin species to display data for. The only difference between both `pickerInput`s is the `inputId`.

<br>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2,9"
# Scatterplot pickerInput for selecting penguin species:
pickerInput(inputId = "penguinSpp_scatterplot_input", label = "Select a species:",
            choices = c("Adelie", "Chinstrap", "Gentoo"),
            selected = c("Adelie", "Chinstrap", "Gentoo"),
            options = pickerOptions(actionsBox = TRUE),
            multiple = TRUE)

# Histogram pickerInput for selecting penguin species:
pickerInput(inputId = "penguinSpp_histogram_input", label = "Select a species:",
            choices = c("Adelie", "Chinstrap", "Gentoo"),
            selected = c("Adelie", "Chinstrap", "Gentoo"),
            options = pickerOptions(actionsBox = TRUE),
            multiple = TRUE)
```

<br>

. . . 

::: {.teal-text .body-text-m .center-text}
Let's write a function for our **penguin species pickerInput** that we can use in place of these two, rather long, chunks of code.
:::

---

##  {#write-ui-function data-menu-title="Write a UI function"}

[Write a function for adding a `pickerInput` to select for penguin species]{.slide-title3}

<hr> 

<p class="body-text-s">First, create an `R/` folder inside your `functions-app/` directory, then add a new script to this folder. I'm calling mine `penguinSpp-pickerInput.R`.</p>

<p class="body-text-s">Since the only difference between our original two `pickerInput`s are their `inputId`s, we can write a function that takes `inputId` as an argument (**Recall** that `inputId`s must be unique within an app, so it makes sense that both of our `pickerInput`s have different `inputId`s).</p>

<p class="body-text-s">Once written, `source()` your function script into `global.R` (if necessary) to make your function available for use in your app.</p>

::: {.panel-tabset}

## `penguinSpp-pickerInput.R`
```{r filename="~/functions-app/R/penguinSpp-pickerInput.R"}
#| eval: false  
#| echo: true
penguinSpp_pickerInput <- function(inputId) {
  pickerInput(inputId = inputId, label = "Select a species:",
              choices = c("Adelie", "Chinstrap", "Gentoo"),
              selected = c("Adelie", "Chinstrap", "Gentoo"),
              options = pickerOptions(actionsBox = TRUE),
              multiple = TRUE)
}
```

## `global.R` 
```{r filename="~/functions-app/global.R"}
#| eval: false  
#| echo: true
#| code-line-numbers: "7-8"
# load packages ----
library(shiny)
library(shinyWidgets)
library(palmerpenguins)
library(tidyverse)

# IMPORT FUNCTIONS (ONLY IF NECESSARY) ----
source("R/penguinSpp-pickerInput.R") # will source automatically with Shiny v1.5.0
```

:::

---

##  {#apply-ui-fxn data-menu-title="Apply UI function"}

[Apply your function in `ui.R`]{.slide-title}

<hr>

<p class="body-text-s">Finally, replace your original UI code for building both `pickerInput`s with our `penguinSpp_pickerInput()` function, save, and run your app. It should look exactly the same as before!</p>

```{r filename="~/functions-app/ui.R"}
#| eval: false  
#| echo: true
#| code-line-numbers: "11-12|23-24"
ui <- fluidPage(
  
  tags$h1("Demoing Functions"),
  
  # tabsetPanel ----
  tabsetPanel(
    
    # scatterplot tab ----
    tabPanel(title = "Scatterplot",
             
             # species (scatterplot) pickerInput ---- 
             penguinSpp_pickerInput(inputId = "penguinSpp_scatterplot_input"),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_scatterplot_output")
             
             ), # END scatterplot tab
    
    
    # histogram tab ----
    tabPanel(title = "Histogram",
             
             # species (histogram) pickerInput ----
             penguinSpp_pickerInput(inputId = "penguinSpp_histogram_input"),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_histogram_output")
             
             ) # END histogram tab
    
  ) # END tabsetPanel
  
) # END fluidPage
```

---

##  {#ui-fxn-benefits data-menu-title="Benefits of our UI function"}

[We reduced code redundancy and increased readability!]{.slide-title}

<hr>

So...what's the big deal with this??

<br>

**By turning our `pickerInput` code into a function, we:**

[[**(1)**]{.teal-text} **reduced *ten* lines of UI code into *two*** (not only does this make `ui.R` a bit more manageable to navigate, it also means we can more easily isolate `R/penguinSpp-pickerInput.R` when troubleshooting)]{.body-text-s}

[[**(2)**]{.teal-text} **made our UI code a bit easier to read** (`penguinSpp_pickerInput()` tells a reader / collaborator / future you *exactly* what that line of code is meant to do, which is to create a `pickerInput` that allows users to select penguin species. Even without code comments or additional context, one may deduce what that line of code does)]{.body-text-s}

---

##  {#server-fxns data-menu-title="Server functions"}

[Identify where we can streamline our server]{.slide-title2}

<hr>

<p class="body-text-s">Next, let's see where we can streamline our server code using functions. We have two discrete sections of code -- [**(1)**]{.teal-text} a reactive data frame and scatterplot output and [**(2)**]{.teal-text} a reactive data frame and histogram output.</p>

```{r filename="~/functions-app/server.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "4-26|29-47"
server <- function(input, output) {
  
  
  # filter penguin species (scatterplot) ----
  filtered_spp_scatterplot_df <- reactive ({

    penguins |>
      filter(species %in% input$penguinSpp_scatterplot_input)

  })

  
  # render the scatterplot output ----
  output$penguin_scatterplot_output <- renderPlot({
    
    ggplot(na.omit(filtered_spp_scatterplot_df()),
           aes(x = bill_length_mm, y = bill_depth_mm,
               color = species, shape = species)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE, aes(color = species)) + 
      scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
      labs(x = "Flipper length (mm)", y = "Bill length (mm)",
           color = "Penguin species", shape = "Penguin species")
    
  })
  
  
  # filter penguin species (histogram) ----
  filtered_spp_histogram_df <- reactive ({
    
    penguins |>
      filter(species %in% input$penguinSpp_histogram_input)
    
  })
  
  # render the histogram output ----
  output$penguin_histogram_output <- renderPlot({
    
    ggplot(na.omit(filtered_spp_histogram_df()),
           aes(x = flipper_length_mm, fill = species)) +
      geom_histogram(alpha = 0.5, position = "identity") +
      scale_fill_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      labs(x = "Flipper length (mm)", y = "Frequency",
           fill = "Penguin species")
    
  })
  
} # END server
```

---

##  {#build-penguin-scatterplot-fxn data-menu-title="build_penguin_scatterplot()"}

[Create a function to build our scatterplot]{.slide-title2}

<hr>

[The goal of this function is to filter the `penguins` data based on the user input *and* render our ggplot scatterplot. To start, I'm going to cut / paste both the code to generate the reactive `filtered_spp_scatterplot_df` data frame *and* the `renderPlot()` code from `server.R` into our `build_penguin_scatterplot()` function.]{.body-text-s}

```{r filename="~/functions-app/R/build-penguin-scatterplot.R"}
#| eval: false
#| echo: true
build_penguin_scatterplot <- function(input) {
  
  # filter penguin species (scatterplot) ----
  filtered_spp_scatterplot_df <- reactive ({

    penguins |>
      filter(species %in% input$penguinSpp_scatterplot_input)

  })

  
  # render the scatterplot output ----
  renderPlot({
    
    ggplot(na.omit(filtered_spp_scatterplot_df()),
           aes(x = bill_length_mm, y = bill_depth_mm,
               color = species, shape = species)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE, aes(color = species)) + 
      scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
      labs(x = "Flipper length (mm)", y = "Bill length (mm)",
           color = "Penguin species", shape = "Penguin species")
    
  })
  
}
```

---

##  {#input-server data-menu-title="tbd"}

[A note on the function argument, `input`]{.slide-title}

<hr>

**Important:** In isolation, our function *does not know* about the user input (`input` is not in our global environment, it's only known within the `server()` function). Therefore, **we must pass `input` as an argument to our function**. This makes any user-supplied inputs from the UI available to our function, `build_penguin_scatterplot()`, so that we can successfully filter the `penguins` data.

<br>

```{r filename="~/functions-app/R/build-penguin-scatterplot.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "1"
build_penguin_scatterplot <- function(input) {
  
  # ~ body of function omitted for brevity ~
  
}
  
```

<br>

**Also note that in R, functions return the last executed line** -- therefore `build_penguin_scatterplot()` will return the object created by `renderPlot()` (i.e. our rendered scatterplot).</p>

---

##  {#use-build-penguin-scatterplot-fxn data-menu-title="Use build_penguin_scatterplot()"}

[Now use your function inside the server]{.slide-title2}

<hr>

<p class="body-text-s">**Remember**, the output of `build_penguin_scatterplot()` is `renderPlot()`, which is used to build our reactive scatterplot. Following our rules for creating reactivity, we need to save our function's output to `output$penguin_scatterplot`. In doing so, we reduced 23 lines of code to 1 inside our server function.</p>
```{r filename="~/functions-app/server.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "3-4"
server <- function(input, output) {
  
  
  # filter data & create penguin scatterplot ----
  output$penguin_scatterplot_output <- build_penguin_scatterplot(input)
  
  
  # filter penguin species (histogram) ----
  filtered_spp_histogram_df <- reactive ({
    
    penguins |>
      filter(species %in% input$penguinSpp_histogram_input)
    
  })
  
  # render the histogram output ----
  output$penguin_histogram_output <- renderPlot({
    
    ggplot(na.omit(filtered_spp_histogram_df()),
           aes(x = flipper_length_mm, fill = species)) +
      geom_histogram(alpha = 0.5, position = "identity") +
      scale_fill_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      labs(x = "Flipper length (mm)", y = "Frequency",
           fill = "Penguin species")
    
  })
  
} # END server

```

---

##  {#build-penguin-histogram_fxn data-menu-title="Create & use build_penguin_histogram()"}

[Build a function to create our histogram]{.slide-title2}

<hr>

<p class="body-text-s">We can repeat a similar process to create a function for building our histogram:</p>

::: {.panel-tabset}

## `build-penguin-histogram.R`

```{r filename="~/functions-app/R/build-penguin-histogram.R"}
#| eval: false
#| echo: true
build_penguin_histogram <- function(input) {
  
  # filter penguin spp ----
  filtered_spp_histogram_df <- reactive ({
    
    penguins |>
      filter(species %in% input$penguinSpp_histogram_input)
    
  })
  
  # render histogram ----
  renderPlot({
   
    ggplot(na.omit(filtered_spp_histogram_df()), 
           aes(x = flipper_length_mm, fill = species)) +
      geom_histogram(alpha = 0.5, position = "identity") +
      scale_fill_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      labs(x = "Flipper length (mm)", y = "Frequency",
           fill = "Penguin species")
    
  })
  
}
```

## `server.R`

```{r filename="~/functions-app/server.R"}
#| eval: false
#| echo: true
#| code-line-numbers: "6-7"
server <- function(input, output) {
  
  # filter data & create penguin scatterplot ----
  output$penguin_scatterplot_output <- build_penguin_scatterplot(input)
  
  # filter data & create penguin histogram ----
  output$penguin_histogram_output <- build_penguin_histogram(input)

} # END server

```

:::

---

##  {#final-code1 data-menu-title="Final code (1/3)"}

[Final code (1/3)]{.slide-title}

<hr>

[Run your updated app to ensure it works as expected. Your final code should look like this:]{.body-text-s}

::: {.panel-tabset}

## `global.R`

```{r filename="~/functions-app/global.R"}
#| eval: false
#| echo: true
# load packages ----
library(shiny)
library(shinyWidgets)
library(palmerpenguins)
library(tidyverse)
```

## `ui.R`

```{r filename="~/functions-app/ui.R"}
#| eval: false
#| echo: true
ui <- fluidPage(
  
  tags$h1("Demoing Functions"),
  
  # tabsetPanel ----
  tabsetPanel(
    
    # scatterplot tab ----
    tabPanel(title = "Scatterplot",
             
             # species (scatterplot) pickerInput ---- 
             penguinSpp_pickerInput(inputId = "penguinSpp_scatterplot_input"),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_scatterplot_output")
             
             ), # END scatterplot tab
    
    
    # histogram tab ----
    tabPanel(title = "Histogram",
             
             # species (histogram) pickerInput ----
             penguinSpp_pickerInput(inputId = "penguinSpp_histogram_input"),
             
             # scatterplot output ----
             plotOutput(outputId = "penguin_histogram_output")
             
             ) # END histogram tab
    
  ) # END tabsetPanel
  
) # END fluidPage
```

## `server.R`

```{r filename="~/functions-app/server.R"}
#| eval: false
#| echo: true
server <- function(input, output) {
  
  # filter data & create penguin scatterplot ----
  output$penguin_scatterplot_output <- build_penguin_scatterplot(input)
  
  # filter data & create penguin histogram ----
  output$penguin_histogram_output <- build_penguin_histogram(input)

} # END server
```

:::

---

##  {#final-code2 data-menu-title="Final code (2/3)"}

[Final code (2/3)]{.slide-title}

<hr>

[`penguinSpp-pickerInput.R`]{.body-text-m}

```{r filename="~/functions-app/R/penguinSpp-pickerInput.R"}
#| eval: false
#| echo: true
penguinSpp_pickerInput <- function(inputId) {
  pickerInput(inputId = inputId, label = "Select a species:",
              choices = c("Adelie", "Chinstrap", "Gentoo"),
              selected = c("Adelie", "Chinstrap", "Gentoo"),
              options = pickerOptions(actionsBox = TRUE),
              multiple = TRUE)
}
```

---

##  {#final-code3 data-menu-title="Final code (3/3)"}

[Final code (3/3)]{.slide-title}

<hr>

::: {.panel-tabset}

## `build-penguin-scatterplot.R`

```{r filename="~/functions-app/R/build-penguin-scatterplot.R"}
#| eval: false
#| echo: true
build_penguin_scatterplot <- function(input) {
  
  # filter penguin species (scatterplot) ----
  filtered_spp_scatterplot_df <- reactive ({

    penguins |>
      filter(species %in% input$penguinSpp_scatterplot_input)

  })

  
  # render the scatterplot output ----
  renderPlot({
    
    ggplot(na.omit(filtered_spp_scatterplot_df()),
           aes(x = bill_length_mm, y = bill_depth_mm,
               color = species, shape = species)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE, aes(color = species)) + 
      scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
      labs(x = "Flipper length (mm)", y = "Bill length (mm)",
           color = "Penguin species", shape = "Penguin species")
    
  })
  
}
```

## `build-penguin-histogram.R`

```{r filename="~/functions-app/R/build-penguin-histogram.R"}
#| eval: false
#| echo: true
build_penguin_histogram <- function(input) {
  
  # filter penguin spp ----
  filtered_spp_histogram_df <- reactive ({
    
    penguins |>
      filter(species %in% input$penguinSpp_histogram_input)
    
  })
  
  # render histogram ----
  renderPlot({
   
    ggplot(na.omit(filtered_spp_histogram_df()), 
           aes(x = flipper_length_mm, fill = species)) +
      geom_histogram(alpha = 0.5, position = "identity") +
      scale_fill_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      labs(x = "Flipper length (mm)", y = "Frequency",
           fill = "Penguin species")
    
  })
  
}
```

:::


---

##  {#end data-menu-title="~~~ BREAK ~~~" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">End part 7.1</p>
<p class="caption-text">***Up next:** modules*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  # play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

